// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"go.temporal.io/sdk/workflow"
)

type CloudFormationClient interface {
	CancelUpdateStack(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error)
	CancelUpdateStackAsync(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) *CloudformationCancelUpdateStackFuture

	ContinueUpdateRollback(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error)
	ContinueUpdateRollbackAsync(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) *CloudformationContinueUpdateRollbackFuture

	CreateChangeSet(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error)
	CreateChangeSetAsync(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) *CloudformationCreateChangeSetFuture

	CreateStack(ctx workflow.Context, input *cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error)
	CreateStackAsync(ctx workflow.Context, input *cloudformation.CreateStackInput) *CloudformationCreateStackFuture

	CreateStackInstances(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error)
	CreateStackInstancesAsync(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) *CloudformationCreateStackInstancesFuture

	CreateStackSet(ctx workflow.Context, input *cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error)
	CreateStackSetAsync(ctx workflow.Context, input *cloudformation.CreateStackSetInput) *CloudformationCreateStackSetFuture

	DeleteChangeSet(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error)
	DeleteChangeSetAsync(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) *CloudformationDeleteChangeSetFuture

	DeleteStack(ctx workflow.Context, input *cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error)
	DeleteStackAsync(ctx workflow.Context, input *cloudformation.DeleteStackInput) *CloudformationDeleteStackFuture

	DeleteStackInstances(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error)
	DeleteStackInstancesAsync(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) *CloudformationDeleteStackInstancesFuture

	DeleteStackSet(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error)
	DeleteStackSetAsync(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) *CloudformationDeleteStackSetFuture

	DeregisterType(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) (*cloudformation.DeregisterTypeOutput, error)
	DeregisterTypeAsync(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) *CloudformationDeregisterTypeFuture

	DescribeAccountLimits(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error)
	DescribeAccountLimitsAsync(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) *CloudformationDescribeAccountLimitsFuture

	DescribeChangeSet(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error)
	DescribeChangeSetAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *CloudformationDescribeChangeSetFuture

	DescribeStackDriftDetectionStatus(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error)
	DescribeStackDriftDetectionStatusAsync(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) *CloudformationDescribeStackDriftDetectionStatusFuture

	DescribeStackEvents(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error)
	DescribeStackEventsAsync(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) *CloudformationDescribeStackEventsFuture

	DescribeStackInstance(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error)
	DescribeStackInstanceAsync(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) *CloudformationDescribeStackInstanceFuture

	DescribeStackResource(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error)
	DescribeStackResourceAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) *CloudformationDescribeStackResourceFuture

	DescribeStackResourceDrifts(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) (*cloudformation.DescribeStackResourceDriftsOutput, error)
	DescribeStackResourceDriftsAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) *CloudformationDescribeStackResourceDriftsFuture

	DescribeStackResources(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error)
	DescribeStackResourcesAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) *CloudformationDescribeStackResourcesFuture

	DescribeStackSet(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error)
	DescribeStackSetAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) *CloudformationDescribeStackSetFuture

	DescribeStackSetOperation(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error)
	DescribeStackSetOperationAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) *CloudformationDescribeStackSetOperationFuture

	DescribeStacks(ctx workflow.Context, input *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error)
	DescribeStacksAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *CloudformationDescribeStacksFuture

	DescribeType(ctx workflow.Context, input *cloudformation.DescribeTypeInput) (*cloudformation.DescribeTypeOutput, error)
	DescribeTypeAsync(ctx workflow.Context, input *cloudformation.DescribeTypeInput) *CloudformationDescribeTypeFuture

	DescribeTypeRegistration(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) (*cloudformation.DescribeTypeRegistrationOutput, error)
	DescribeTypeRegistrationAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *CloudformationDescribeTypeRegistrationFuture

	DetectStackDrift(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) (*cloudformation.DetectStackDriftOutput, error)
	DetectStackDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) *CloudformationDetectStackDriftFuture

	DetectStackResourceDrift(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) (*cloudformation.DetectStackResourceDriftOutput, error)
	DetectStackResourceDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) *CloudformationDetectStackResourceDriftFuture

	DetectStackSetDrift(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) (*cloudformation.DetectStackSetDriftOutput, error)
	DetectStackSetDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) *CloudformationDetectStackSetDriftFuture

	EstimateTemplateCost(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error)
	EstimateTemplateCostAsync(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) *CloudformationEstimateTemplateCostFuture

	ExecuteChangeSet(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error)
	ExecuteChangeSetAsync(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) *CloudformationExecuteChangeSetFuture

	GetStackPolicy(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error)
	GetStackPolicyAsync(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) *CloudformationGetStackPolicyFuture

	GetTemplate(ctx workflow.Context, input *cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error)
	GetTemplateAsync(ctx workflow.Context, input *cloudformation.GetTemplateInput) *CloudformationGetTemplateFuture

	GetTemplateSummary(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error)
	GetTemplateSummaryAsync(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) *CloudformationGetTemplateSummaryFuture

	ListChangeSets(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error)
	ListChangeSetsAsync(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) *CloudformationListChangeSetsFuture

	ListExports(ctx workflow.Context, input *cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error)
	ListExportsAsync(ctx workflow.Context, input *cloudformation.ListExportsInput) *CloudformationListExportsFuture

	ListImports(ctx workflow.Context, input *cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error)
	ListImportsAsync(ctx workflow.Context, input *cloudformation.ListImportsInput) *CloudformationListImportsFuture

	ListStackInstances(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error)
	ListStackInstancesAsync(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) *CloudformationListStackInstancesFuture

	ListStackResources(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error)
	ListStackResourcesAsync(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) *CloudformationListStackResourcesFuture

	ListStackSetOperationResults(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error)
	ListStackSetOperationResultsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) *CloudformationListStackSetOperationResultsFuture

	ListStackSetOperations(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error)
	ListStackSetOperationsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) *CloudformationListStackSetOperationsFuture

	ListStackSets(ctx workflow.Context, input *cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error)
	ListStackSetsAsync(ctx workflow.Context, input *cloudformation.ListStackSetsInput) *CloudformationListStackSetsFuture

	ListStacks(ctx workflow.Context, input *cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error)
	ListStacksAsync(ctx workflow.Context, input *cloudformation.ListStacksInput) *CloudformationListStacksFuture

	ListTypeRegistrations(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) (*cloudformation.ListTypeRegistrationsOutput, error)
	ListTypeRegistrationsAsync(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) *CloudformationListTypeRegistrationsFuture

	ListTypeVersions(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) (*cloudformation.ListTypeVersionsOutput, error)
	ListTypeVersionsAsync(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) *CloudformationListTypeVersionsFuture

	ListTypes(ctx workflow.Context, input *cloudformation.ListTypesInput) (*cloudformation.ListTypesOutput, error)
	ListTypesAsync(ctx workflow.Context, input *cloudformation.ListTypesInput) *CloudformationListTypesFuture

	RecordHandlerProgress(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) (*cloudformation.RecordHandlerProgressOutput, error)
	RecordHandlerProgressAsync(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) *CloudformationRecordHandlerProgressFuture

	RegisterType(ctx workflow.Context, input *cloudformation.RegisterTypeInput) (*cloudformation.RegisterTypeOutput, error)
	RegisterTypeAsync(ctx workflow.Context, input *cloudformation.RegisterTypeInput) *CloudformationRegisterTypeFuture

	SetStackPolicy(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error)
	SetStackPolicyAsync(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) *CloudformationSetStackPolicyFuture

	SetTypeDefaultVersion(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) (*cloudformation.SetTypeDefaultVersionOutput, error)
	SetTypeDefaultVersionAsync(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) *CloudformationSetTypeDefaultVersionFuture

	SignalResource(ctx workflow.Context, input *cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error)
	SignalResourceAsync(ctx workflow.Context, input *cloudformation.SignalResourceInput) *CloudformationSignalResourceFuture

	StopStackSetOperation(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error)
	StopStackSetOperationAsync(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) *CloudformationStopStackSetOperationFuture

	UpdateStack(ctx workflow.Context, input *cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error)
	UpdateStackAsync(ctx workflow.Context, input *cloudformation.UpdateStackInput) *CloudformationUpdateStackFuture

	UpdateStackInstances(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error)
	UpdateStackInstancesAsync(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) *CloudformationUpdateStackInstancesFuture

	UpdateStackSet(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error)
	UpdateStackSetAsync(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) *CloudformationUpdateStackSetFuture

	UpdateTerminationProtection(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error)
	UpdateTerminationProtectionAsync(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) *CloudformationUpdateTerminationProtectionFuture

	ValidateTemplate(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error)
	ValidateTemplateAsync(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) *CloudformationValidateTemplateFuture

	WaitUntilChangeSetCreateComplete(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) error
	WaitUntilChangeSetCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) workflow.Future

	WaitUntilStackCreateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilStackDeleteComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackDeleteCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilStackExists(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackExistsAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilStackImportComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackImportCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilStackRollbackComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackRollbackCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilStackUpdateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error
	WaitUntilStackUpdateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future

	WaitUntilTypeRegistrationComplete(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) error
	WaitUntilTypeRegistrationCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) workflow.Future
}

type CloudFormationStub struct{}

func NewCloudFormationStub() CloudFormationClient {
	return &CloudFormationStub{}
}

type CloudformationCancelUpdateStackFuture struct {
	Future workflow.Future
}

func (r *CloudformationCancelUpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationContinueUpdateRollbackFuture struct {
	Future workflow.Future
}

func (r *CloudformationContinueUpdateRollbackFuture) Get(ctx workflow.Context) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationCreateChangeSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationCreateChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationCreateStackFuture struct {
	Future workflow.Future
}

func (r *CloudformationCreateStackFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationCreateStackInstancesFuture struct {
	Future workflow.Future
}

func (r *CloudformationCreateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationCreateStackSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationCreateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDeleteChangeSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationDeleteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDeleteStackFuture struct {
	Future workflow.Future
}

func (r *CloudformationDeleteStackFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDeleteStackInstancesFuture struct {
	Future workflow.Future
}

func (r *CloudformationDeleteStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDeleteStackSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationDeleteStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDeregisterTypeFuture struct {
	Future workflow.Future
}

func (r *CloudformationDeregisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeAccountLimitsFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeAccountLimitsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeChangeSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackDriftDetectionStatusFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackDriftDetectionStatusFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackEventsFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackEventsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackInstanceFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackInstanceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackResourceFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackResourceFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackResourceDriftsFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackResourceDriftsFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackResourcesFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackSetFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStackSetOperationFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeStacksFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeStacksFuture) Get(ctx workflow.Context) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeTypeFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeTypeFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDescribeTypeRegistrationFuture struct {
	Future workflow.Future
}

func (r *CloudformationDescribeTypeRegistrationFuture) Get(ctx workflow.Context) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDetectStackDriftFuture struct {
	Future workflow.Future
}

func (r *CloudformationDetectStackDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDetectStackResourceDriftFuture struct {
	Future workflow.Future
}

func (r *CloudformationDetectStackResourceDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationDetectStackSetDriftFuture struct {
	Future workflow.Future
}

func (r *CloudformationDetectStackSetDriftFuture) Get(ctx workflow.Context) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationEstimateTemplateCostFuture struct {
	Future workflow.Future
}

func (r *CloudformationEstimateTemplateCostFuture) Get(ctx workflow.Context) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationExecuteChangeSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationExecuteChangeSetFuture) Get(ctx workflow.Context) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationGetStackPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudformationGetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationGetTemplateFuture struct {
	Future workflow.Future
}

func (r *CloudformationGetTemplateFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationGetTemplateSummaryFuture struct {
	Future workflow.Future
}

func (r *CloudformationGetTemplateSummaryFuture) Get(ctx workflow.Context) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListChangeSetsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListChangeSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListExportsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListExportsFuture) Get(ctx workflow.Context) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListImportsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListImportsFuture) Get(ctx workflow.Context) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStackInstancesFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStackResourcesFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStackResourcesFuture) Get(ctx workflow.Context) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStackSetOperationResultsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStackSetOperationResultsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStackSetOperationsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStackSetOperationsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStackSetsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStackSetsFuture) Get(ctx workflow.Context) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListStacksFuture struct {
	Future workflow.Future
}

func (r *CloudformationListStacksFuture) Get(ctx workflow.Context) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListTypeRegistrationsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListTypeRegistrationsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListTypeVersionsFuture struct {
	Future workflow.Future
}

func (r *CloudformationListTypeVersionsFuture) Get(ctx workflow.Context) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationListTypesFuture struct {
	Future workflow.Future
}

func (r *CloudformationListTypesFuture) Get(ctx workflow.Context) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationRecordHandlerProgressFuture struct {
	Future workflow.Future
}

func (r *CloudformationRecordHandlerProgressFuture) Get(ctx workflow.Context) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationRegisterTypeFuture struct {
	Future workflow.Future
}

func (r *CloudformationRegisterTypeFuture) Get(ctx workflow.Context) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationSetStackPolicyFuture struct {
	Future workflow.Future
}

func (r *CloudformationSetStackPolicyFuture) Get(ctx workflow.Context) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationSetTypeDefaultVersionFuture struct {
	Future workflow.Future
}

func (r *CloudformationSetTypeDefaultVersionFuture) Get(ctx workflow.Context) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationSignalResourceFuture struct {
	Future workflow.Future
}

func (r *CloudformationSignalResourceFuture) Get(ctx workflow.Context) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationStopStackSetOperationFuture struct {
	Future workflow.Future
}

func (r *CloudformationStopStackSetOperationFuture) Get(ctx workflow.Context) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationUpdateStackFuture struct {
	Future workflow.Future
}

func (r *CloudformationUpdateStackFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationUpdateStackInstancesFuture struct {
	Future workflow.Future
}

func (r *CloudformationUpdateStackInstancesFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationUpdateStackSetFuture struct {
	Future workflow.Future
}

func (r *CloudformationUpdateStackSetFuture) Get(ctx workflow.Context) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationUpdateTerminationProtectionFuture struct {
	Future workflow.Future
}

func (r *CloudformationUpdateTerminationProtectionFuture) Get(ctx workflow.Context) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudformationValidateTemplateFuture struct {
	Future workflow.Future
}

func (r *CloudformationValidateTemplateFuture) Get(ctx workflow.Context) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CancelUpdateStack(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error) {
	var output cloudformation.CancelUpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.CancelUpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CancelUpdateStackAsync(ctx workflow.Context, input *cloudformation.CancelUpdateStackInput) *CloudformationCancelUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.CancelUpdateStack", input)
	return &CloudformationCancelUpdateStackFuture{Future: future}
}

func (a *CloudFormationStub) ContinueUpdateRollback(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	var output cloudformation.ContinueUpdateRollbackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ContinueUpdateRollback", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ContinueUpdateRollbackAsync(ctx workflow.Context, input *cloudformation.ContinueUpdateRollbackInput) *CloudformationContinueUpdateRollbackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ContinueUpdateRollback", input)
	return &CloudformationContinueUpdateRollbackFuture{Future: future}
}

func (a *CloudFormationStub) CreateChangeSet(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error) {
	var output cloudformation.CreateChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CreateChangeSetAsync(ctx workflow.Context, input *cloudformation.CreateChangeSetInput) *CloudformationCreateChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateChangeSet", input)
	return &CloudformationCreateChangeSetFuture{Future: future}
}

func (a *CloudFormationStub) CreateStack(ctx workflow.Context, input *cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error) {
	var output cloudformation.CreateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CreateStackAsync(ctx workflow.Context, input *cloudformation.CreateStackInput) *CloudformationCreateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStack", input)
	return &CloudformationCreateStackFuture{Future: future}
}

func (a *CloudFormationStub) CreateStackInstances(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error) {
	var output cloudformation.CreateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CreateStackInstancesAsync(ctx workflow.Context, input *cloudformation.CreateStackInstancesInput) *CloudformationCreateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStackInstances", input)
	return &CloudformationCreateStackInstancesFuture{Future: future}
}

func (a *CloudFormationStub) CreateStackSet(ctx workflow.Context, input *cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error) {
	var output cloudformation.CreateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) CreateStackSetAsync(ctx workflow.Context, input *cloudformation.CreateStackSetInput) *CloudformationCreateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.CreateStackSet", input)
	return &CloudformationCreateStackSetFuture{Future: future}
}

func (a *CloudFormationStub) DeleteChangeSet(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) {
	var output cloudformation.DeleteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DeleteChangeSetAsync(ctx workflow.Context, input *cloudformation.DeleteChangeSetInput) *CloudformationDeleteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteChangeSet", input)
	return &CloudformationDeleteChangeSetFuture{Future: future}
}

func (a *CloudFormationStub) DeleteStack(ctx workflow.Context, input *cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error) {
	var output cloudformation.DeleteStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStack", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DeleteStackAsync(ctx workflow.Context, input *cloudformation.DeleteStackInput) *CloudformationDeleteStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStack", input)
	return &CloudformationDeleteStackFuture{Future: future}
}

func (a *CloudFormationStub) DeleteStackInstances(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error) {
	var output cloudformation.DeleteStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DeleteStackInstancesAsync(ctx workflow.Context, input *cloudformation.DeleteStackInstancesInput) *CloudformationDeleteStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStackInstances", input)
	return &CloudformationDeleteStackInstancesFuture{Future: future}
}

func (a *CloudFormationStub) DeleteStackSet(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error) {
	var output cloudformation.DeleteStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DeleteStackSetAsync(ctx workflow.Context, input *cloudformation.DeleteStackSetInput) *CloudformationDeleteStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeleteStackSet", input)
	return &CloudformationDeleteStackSetFuture{Future: future}
}

func (a *CloudFormationStub) DeregisterType(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) (*cloudformation.DeregisterTypeOutput, error) {
	var output cloudformation.DeregisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeregisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DeregisterTypeAsync(ctx workflow.Context, input *cloudformation.DeregisterTypeInput) *CloudformationDeregisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DeregisterType", input)
	return &CloudformationDeregisterTypeFuture{Future: future}
}

func (a *CloudFormationStub) DescribeAccountLimits(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error) {
	var output cloudformation.DescribeAccountLimitsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeAccountLimits", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeAccountLimitsAsync(ctx workflow.Context, input *cloudformation.DescribeAccountLimitsInput) *CloudformationDescribeAccountLimitsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeAccountLimits", input)
	return &CloudformationDescribeAccountLimitsFuture{Future: future}
}

func (a *CloudFormationStub) DescribeChangeSet(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error) {
	var output cloudformation.DescribeChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeChangeSetAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) *CloudformationDescribeChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeChangeSet", input)
	return &CloudformationDescribeChangeSetFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackDriftDetectionStatus(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {
	var output cloudformation.DescribeStackDriftDetectionStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackDriftDetectionStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackDriftDetectionStatusAsync(ctx workflow.Context, input *cloudformation.DescribeStackDriftDetectionStatusInput) *CloudformationDescribeStackDriftDetectionStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackDriftDetectionStatus", input)
	return &CloudformationDescribeStackDriftDetectionStatusFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackEvents(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error) {
	var output cloudformation.DescribeStackEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackEventsAsync(ctx workflow.Context, input *cloudformation.DescribeStackEventsInput) *CloudformationDescribeStackEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackEvents", input)
	return &CloudformationDescribeStackEventsFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackInstance(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error) {
	var output cloudformation.DescribeStackInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackInstanceAsync(ctx workflow.Context, input *cloudformation.DescribeStackInstanceInput) *CloudformationDescribeStackInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackInstance", input)
	return &CloudformationDescribeStackInstanceFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackResource(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error) {
	var output cloudformation.DescribeStackResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackResourceAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceInput) *CloudformationDescribeStackResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResource", input)
	return &CloudformationDescribeStackResourceFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackResourceDrifts(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) (*cloudformation.DescribeStackResourceDriftsOutput, error) {
	var output cloudformation.DescribeStackResourceDriftsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResourceDrifts", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackResourceDriftsAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourceDriftsInput) *CloudformationDescribeStackResourceDriftsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResourceDrifts", input)
	return &CloudformationDescribeStackResourceDriftsFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackResources(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error) {
	var output cloudformation.DescribeStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackResourcesAsync(ctx workflow.Context, input *cloudformation.DescribeStackResourcesInput) *CloudformationDescribeStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackResources", input)
	return &CloudformationDescribeStackResourcesFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackSet(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error) {
	var output cloudformation.DescribeStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackSetAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetInput) *CloudformationDescribeStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackSet", input)
	return &CloudformationDescribeStackSetFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStackSetOperation(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error) {
	var output cloudformation.DescribeStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStackSetOperationAsync(ctx workflow.Context, input *cloudformation.DescribeStackSetOperationInput) *CloudformationDescribeStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStackSetOperation", input)
	return &CloudformationDescribeStackSetOperationFuture{Future: future}
}

func (a *CloudFormationStub) DescribeStacks(ctx workflow.Context, input *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error) {
	var output cloudformation.DescribeStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeStacksAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) *CloudformationDescribeStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeStacks", input)
	return &CloudformationDescribeStacksFuture{Future: future}
}

func (a *CloudFormationStub) DescribeType(ctx workflow.Context, input *cloudformation.DescribeTypeInput) (*cloudformation.DescribeTypeOutput, error) {
	var output cloudformation.DescribeTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeType", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeTypeAsync(ctx workflow.Context, input *cloudformation.DescribeTypeInput) *CloudformationDescribeTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeType", input)
	return &CloudformationDescribeTypeFuture{Future: future}
}

func (a *CloudFormationStub) DescribeTypeRegistration(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) (*cloudformation.DescribeTypeRegistrationOutput, error) {
	var output cloudformation.DescribeTypeRegistrationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeTypeRegistration", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DescribeTypeRegistrationAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) *CloudformationDescribeTypeRegistrationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DescribeTypeRegistration", input)
	return &CloudformationDescribeTypeRegistrationFuture{Future: future}
}

func (a *CloudFormationStub) DetectStackDrift(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) (*cloudformation.DetectStackDriftOutput, error) {
	var output cloudformation.DetectStackDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DetectStackDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackDriftInput) *CloudformationDetectStackDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackDrift", input)
	return &CloudformationDetectStackDriftFuture{Future: future}
}

func (a *CloudFormationStub) DetectStackResourceDrift(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) (*cloudformation.DetectStackResourceDriftOutput, error) {
	var output cloudformation.DetectStackResourceDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackResourceDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DetectStackResourceDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackResourceDriftInput) *CloudformationDetectStackResourceDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackResourceDrift", input)
	return &CloudformationDetectStackResourceDriftFuture{Future: future}
}

func (a *CloudFormationStub) DetectStackSetDrift(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) (*cloudformation.DetectStackSetDriftOutput, error) {
	var output cloudformation.DetectStackSetDriftOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackSetDrift", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) DetectStackSetDriftAsync(ctx workflow.Context, input *cloudformation.DetectStackSetDriftInput) *CloudformationDetectStackSetDriftFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.DetectStackSetDrift", input)
	return &CloudformationDetectStackSetDriftFuture{Future: future}
}

func (a *CloudFormationStub) EstimateTemplateCost(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error) {
	var output cloudformation.EstimateTemplateCostOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.EstimateTemplateCost", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) EstimateTemplateCostAsync(ctx workflow.Context, input *cloudformation.EstimateTemplateCostInput) *CloudformationEstimateTemplateCostFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.EstimateTemplateCost", input)
	return &CloudformationEstimateTemplateCostFuture{Future: future}
}

func (a *CloudFormationStub) ExecuteChangeSet(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error) {
	var output cloudformation.ExecuteChangeSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ExecuteChangeSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ExecuteChangeSetAsync(ctx workflow.Context, input *cloudformation.ExecuteChangeSetInput) *CloudformationExecuteChangeSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ExecuteChangeSet", input)
	return &CloudformationExecuteChangeSetFuture{Future: future}
}

func (a *CloudFormationStub) GetStackPolicy(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error) {
	var output cloudformation.GetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) GetStackPolicyAsync(ctx workflow.Context, input *cloudformation.GetStackPolicyInput) *CloudformationGetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetStackPolicy", input)
	return &CloudformationGetStackPolicyFuture{Future: future}
}

func (a *CloudFormationStub) GetTemplate(ctx workflow.Context, input *cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error) {
	var output cloudformation.GetTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) GetTemplateAsync(ctx workflow.Context, input *cloudformation.GetTemplateInput) *CloudformationGetTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetTemplate", input)
	return &CloudformationGetTemplateFuture{Future: future}
}

func (a *CloudFormationStub) GetTemplateSummary(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error) {
	var output cloudformation.GetTemplateSummaryOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetTemplateSummary", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) GetTemplateSummaryAsync(ctx workflow.Context, input *cloudformation.GetTemplateSummaryInput) *CloudformationGetTemplateSummaryFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.GetTemplateSummary", input)
	return &CloudformationGetTemplateSummaryFuture{Future: future}
}

func (a *CloudFormationStub) ListChangeSets(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error) {
	var output cloudformation.ListChangeSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListChangeSets", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListChangeSetsAsync(ctx workflow.Context, input *cloudformation.ListChangeSetsInput) *CloudformationListChangeSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListChangeSets", input)
	return &CloudformationListChangeSetsFuture{Future: future}
}

func (a *CloudFormationStub) ListExports(ctx workflow.Context, input *cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error) {
	var output cloudformation.ListExportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListExports", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListExportsAsync(ctx workflow.Context, input *cloudformation.ListExportsInput) *CloudformationListExportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListExports", input)
	return &CloudformationListExportsFuture{Future: future}
}

func (a *CloudFormationStub) ListImports(ctx workflow.Context, input *cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error) {
	var output cloudformation.ListImportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListImports", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListImportsAsync(ctx workflow.Context, input *cloudformation.ListImportsInput) *CloudformationListImportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListImports", input)
	return &CloudformationListImportsFuture{Future: future}
}

func (a *CloudFormationStub) ListStackInstances(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error) {
	var output cloudformation.ListStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStackInstancesAsync(ctx workflow.Context, input *cloudformation.ListStackInstancesInput) *CloudformationListStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackInstances", input)
	return &CloudformationListStackInstancesFuture{Future: future}
}

func (a *CloudFormationStub) ListStackResources(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error) {
	var output cloudformation.ListStackResourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackResources", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStackResourcesAsync(ctx workflow.Context, input *cloudformation.ListStackResourcesInput) *CloudformationListStackResourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackResources", input)
	return &CloudformationListStackResourcesFuture{Future: future}
}

func (a *CloudFormationStub) ListStackSetOperationResults(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	var output cloudformation.ListStackSetOperationResultsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSetOperationResults", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStackSetOperationResultsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationResultsInput) *CloudformationListStackSetOperationResultsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSetOperationResults", input)
	return &CloudformationListStackSetOperationResultsFuture{Future: future}
}

func (a *CloudFormationStub) ListStackSetOperations(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error) {
	var output cloudformation.ListStackSetOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSetOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStackSetOperationsAsync(ctx workflow.Context, input *cloudformation.ListStackSetOperationsInput) *CloudformationListStackSetOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSetOperations", input)
	return &CloudformationListStackSetOperationsFuture{Future: future}
}

func (a *CloudFormationStub) ListStackSets(ctx workflow.Context, input *cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error) {
	var output cloudformation.ListStackSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSets", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStackSetsAsync(ctx workflow.Context, input *cloudformation.ListStackSetsInput) *CloudformationListStackSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStackSets", input)
	return &CloudformationListStackSetsFuture{Future: future}
}

func (a *CloudFormationStub) ListStacks(ctx workflow.Context, input *cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error) {
	var output cloudformation.ListStacksOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStacks", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListStacksAsync(ctx workflow.Context, input *cloudformation.ListStacksInput) *CloudformationListStacksFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListStacks", input)
	return &CloudformationListStacksFuture{Future: future}
}

func (a *CloudFormationStub) ListTypeRegistrations(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) (*cloudformation.ListTypeRegistrationsOutput, error) {
	var output cloudformation.ListTypeRegistrationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypeRegistrations", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListTypeRegistrationsAsync(ctx workflow.Context, input *cloudformation.ListTypeRegistrationsInput) *CloudformationListTypeRegistrationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypeRegistrations", input)
	return &CloudformationListTypeRegistrationsFuture{Future: future}
}

func (a *CloudFormationStub) ListTypeVersions(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) (*cloudformation.ListTypeVersionsOutput, error) {
	var output cloudformation.ListTypeVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypeVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListTypeVersionsAsync(ctx workflow.Context, input *cloudformation.ListTypeVersionsInput) *CloudformationListTypeVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypeVersions", input)
	return &CloudformationListTypeVersionsFuture{Future: future}
}

func (a *CloudFormationStub) ListTypes(ctx workflow.Context, input *cloudformation.ListTypesInput) (*cloudformation.ListTypesOutput, error) {
	var output cloudformation.ListTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ListTypesAsync(ctx workflow.Context, input *cloudformation.ListTypesInput) *CloudformationListTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ListTypes", input)
	return &CloudformationListTypesFuture{Future: future}
}

func (a *CloudFormationStub) RecordHandlerProgress(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) (*cloudformation.RecordHandlerProgressOutput, error) {
	var output cloudformation.RecordHandlerProgressOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.RecordHandlerProgress", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) RecordHandlerProgressAsync(ctx workflow.Context, input *cloudformation.RecordHandlerProgressInput) *CloudformationRecordHandlerProgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.RecordHandlerProgress", input)
	return &CloudformationRecordHandlerProgressFuture{Future: future}
}

func (a *CloudFormationStub) RegisterType(ctx workflow.Context, input *cloudformation.RegisterTypeInput) (*cloudformation.RegisterTypeOutput, error) {
	var output cloudformation.RegisterTypeOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.RegisterType", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) RegisterTypeAsync(ctx workflow.Context, input *cloudformation.RegisterTypeInput) *CloudformationRegisterTypeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.RegisterType", input)
	return &CloudformationRegisterTypeFuture{Future: future}
}

func (a *CloudFormationStub) SetStackPolicy(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error) {
	var output cloudformation.SetStackPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.SetStackPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) SetStackPolicyAsync(ctx workflow.Context, input *cloudformation.SetStackPolicyInput) *CloudformationSetStackPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.SetStackPolicy", input)
	return &CloudformationSetStackPolicyFuture{Future: future}
}

func (a *CloudFormationStub) SetTypeDefaultVersion(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) (*cloudformation.SetTypeDefaultVersionOutput, error) {
	var output cloudformation.SetTypeDefaultVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.SetTypeDefaultVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) SetTypeDefaultVersionAsync(ctx workflow.Context, input *cloudformation.SetTypeDefaultVersionInput) *CloudformationSetTypeDefaultVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.SetTypeDefaultVersion", input)
	return &CloudformationSetTypeDefaultVersionFuture{Future: future}
}

func (a *CloudFormationStub) SignalResource(ctx workflow.Context, input *cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error) {
	var output cloudformation.SignalResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.SignalResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) SignalResourceAsync(ctx workflow.Context, input *cloudformation.SignalResourceInput) *CloudformationSignalResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.SignalResource", input)
	return &CloudformationSignalResourceFuture{Future: future}
}

func (a *CloudFormationStub) StopStackSetOperation(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error) {
	var output cloudformation.StopStackSetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.StopStackSetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) StopStackSetOperationAsync(ctx workflow.Context, input *cloudformation.StopStackSetOperationInput) *CloudformationStopStackSetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.StopStackSetOperation", input)
	return &CloudformationStopStackSetOperationFuture{Future: future}
}

func (a *CloudFormationStub) UpdateStack(ctx workflow.Context, input *cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error) {
	var output cloudformation.UpdateStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStack", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) UpdateStackAsync(ctx workflow.Context, input *cloudformation.UpdateStackInput) *CloudformationUpdateStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStack", input)
	return &CloudformationUpdateStackFuture{Future: future}
}

func (a *CloudFormationStub) UpdateStackInstances(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error) {
	var output cloudformation.UpdateStackInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStackInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) UpdateStackInstancesAsync(ctx workflow.Context, input *cloudformation.UpdateStackInstancesInput) *CloudformationUpdateStackInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStackInstances", input)
	return &CloudformationUpdateStackInstancesFuture{Future: future}
}

func (a *CloudFormationStub) UpdateStackSet(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error) {
	var output cloudformation.UpdateStackSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStackSet", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) UpdateStackSetAsync(ctx workflow.Context, input *cloudformation.UpdateStackSetInput) *CloudformationUpdateStackSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateStackSet", input)
	return &CloudformationUpdateStackSetFuture{Future: future}
}

func (a *CloudFormationStub) UpdateTerminationProtection(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	var output cloudformation.UpdateTerminationProtectionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateTerminationProtection", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) UpdateTerminationProtectionAsync(ctx workflow.Context, input *cloudformation.UpdateTerminationProtectionInput) *CloudformationUpdateTerminationProtectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.UpdateTerminationProtection", input)
	return &CloudformationUpdateTerminationProtectionFuture{Future: future}
}

func (a *CloudFormationStub) ValidateTemplate(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error) {
	var output cloudformation.ValidateTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudformation.ValidateTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudFormationStub) ValidateTemplateAsync(ctx workflow.Context, input *cloudformation.ValidateTemplateInput) *CloudformationValidateTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudformation.ValidateTemplate", input)
	return &CloudformationValidateTemplateFuture{Future: future}
}

func (a *CloudFormationStub) WaitUntilChangeSetCreateComplete(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilChangeSetCreateComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilChangeSetCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeChangeSetInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilChangeSetCreateComplete", input)
}

func (a *CloudFormationStub) WaitUntilStackCreateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackCreateComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackCreateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackCreateComplete", input)
}

func (a *CloudFormationStub) WaitUntilStackDeleteComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackDeleteComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackDeleteCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackDeleteComplete", input)
}

func (a *CloudFormationStub) WaitUntilStackExists(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackExists", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackExistsAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackExists", input)
}

func (a *CloudFormationStub) WaitUntilStackImportComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackImportComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackImportCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackImportComplete", input)
}

func (a *CloudFormationStub) WaitUntilStackRollbackComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackRollbackComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackRollbackCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackRollbackComplete", input)
}

func (a *CloudFormationStub) WaitUntilStackUpdateComplete(ctx workflow.Context, input *cloudformation.DescribeStacksInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackUpdateComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilStackUpdateCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeStacksInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilStackUpdateComplete", input)
}

func (a *CloudFormationStub) WaitUntilTypeRegistrationComplete(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilTypeRegistrationComplete", input).Get(ctx, nil)
}

func (a *CloudFormationStub) WaitUntilTypeRegistrationCompleteAsync(ctx workflow.Context, input *cloudformation.DescribeTypeRegistrationInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.cloudformation.WaitUntilTypeRegistrationComplete", input)
}
