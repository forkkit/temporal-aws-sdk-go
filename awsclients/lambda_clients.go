// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/lambda"
	"go.temporal.io/sdk/workflow"
)

type LambdaClient interface {
	AddLayerVersionPermission(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error)
	AddLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) *LambdaAddLayerVersionPermissionFuture

	AddPermission(ctx workflow.Context, input *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error)
	AddPermissionAsync(ctx workflow.Context, input *lambda.AddPermissionInput) *LambdaAddPermissionFuture

	CreateAlias(ctx workflow.Context, input *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error)
	CreateAliasAsync(ctx workflow.Context, input *lambda.CreateAliasInput) *LambdaCreateAliasFuture

	CreateEventSourceMapping(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)
	CreateEventSourceMappingAsync(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) *LambdaCreateEventSourceMappingFuture

	CreateFunction(ctx workflow.Context, input *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error)
	CreateFunctionAsync(ctx workflow.Context, input *lambda.CreateFunctionInput) *LambdaCreateFunctionFuture

	DeleteAlias(ctx workflow.Context, input *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error)
	DeleteAliasAsync(ctx workflow.Context, input *lambda.DeleteAliasInput) *LambdaDeleteAliasFuture

	DeleteEventSourceMapping(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)
	DeleteEventSourceMappingAsync(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) *LambdaDeleteEventSourceMappingFuture

	DeleteFunction(ctx workflow.Context, input *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error)
	DeleteFunctionAsync(ctx workflow.Context, input *lambda.DeleteFunctionInput) *LambdaDeleteFunctionFuture

	DeleteFunctionConcurrency(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error)
	DeleteFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) *LambdaDeleteFunctionConcurrencyFuture

	DeleteFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)
	DeleteFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) *LambdaDeleteFunctionEventInvokeConfigFuture

	DeleteLayerVersion(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error)
	DeleteLayerVersionAsync(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) *LambdaDeleteLayerVersionFuture

	DeleteProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)
	DeleteProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) *LambdaDeleteProvisionedConcurrencyConfigFuture

	GetAccountSettings(ctx workflow.Context, input *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error)
	GetAccountSettingsAsync(ctx workflow.Context, input *lambda.GetAccountSettingsInput) *LambdaGetAccountSettingsFuture

	GetAlias(ctx workflow.Context, input *lambda.GetAliasInput) (*lambda.AliasConfiguration, error)
	GetAliasAsync(ctx workflow.Context, input *lambda.GetAliasInput) *LambdaGetAliasFuture

	GetEventSourceMapping(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)
	GetEventSourceMappingAsync(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) *LambdaGetEventSourceMappingFuture

	GetFunction(ctx workflow.Context, input *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error)
	GetFunctionAsync(ctx workflow.Context, input *lambda.GetFunctionInput) *LambdaGetFunctionFuture

	GetFunctionConcurrency(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error)
	GetFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) *LambdaGetFunctionConcurrencyFuture

	GetFunctionConfiguration(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)
	GetFunctionConfigurationAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) *LambdaGetFunctionConfigurationFuture

	GetFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error)
	GetFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) *LambdaGetFunctionEventInvokeConfigFuture

	GetLayerVersion(ctx workflow.Context, input *lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error)
	GetLayerVersionAsync(ctx workflow.Context, input *lambda.GetLayerVersionInput) *LambdaGetLayerVersionFuture

	GetLayerVersionByArn(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error)
	GetLayerVersionByArnAsync(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) *LambdaGetLayerVersionByArnFuture

	GetLayerVersionPolicy(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error)
	GetLayerVersionPolicyAsync(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) *LambdaGetLayerVersionPolicyFuture

	GetPolicy(ctx workflow.Context, input *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error)
	GetPolicyAsync(ctx workflow.Context, input *lambda.GetPolicyInput) *LambdaGetPolicyFuture

	GetProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error)
	GetProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) *LambdaGetProvisionedConcurrencyConfigFuture

	Invoke(ctx workflow.Context, input *lambda.InvokeInput) (*lambda.InvokeOutput, error)
	InvokeAsync(ctx workflow.Context, input *lambda.InvokeInput) *LambdaInvokeFuture

	ListAliases(ctx workflow.Context, input *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error)
	ListAliasesAsync(ctx workflow.Context, input *lambda.ListAliasesInput) *LambdaListAliasesFuture

	ListEventSourceMappings(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error)
	ListEventSourceMappingsAsync(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) *LambdaListEventSourceMappingsFuture

	ListFunctionEventInvokeConfigs(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error)
	ListFunctionEventInvokeConfigsAsync(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) *LambdaListFunctionEventInvokeConfigsFuture

	ListFunctions(ctx workflow.Context, input *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error)
	ListFunctionsAsync(ctx workflow.Context, input *lambda.ListFunctionsInput) *LambdaListFunctionsFuture

	ListLayerVersions(ctx workflow.Context, input *lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error)
	ListLayerVersionsAsync(ctx workflow.Context, input *lambda.ListLayerVersionsInput) *LambdaListLayerVersionsFuture

	ListLayers(ctx workflow.Context, input *lambda.ListLayersInput) (*lambda.ListLayersOutput, error)
	ListLayersAsync(ctx workflow.Context, input *lambda.ListLayersInput) *LambdaListLayersFuture

	ListProvisionedConcurrencyConfigs(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)
	ListProvisionedConcurrencyConfigsAsync(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) *LambdaListProvisionedConcurrencyConfigsFuture

	ListTags(ctx workflow.Context, input *lambda.ListTagsInput) (*lambda.ListTagsOutput, error)
	ListTagsAsync(ctx workflow.Context, input *lambda.ListTagsInput) *LambdaListTagsFuture

	ListVersionsByFunction(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error)
	ListVersionsByFunctionAsync(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) *LambdaListVersionsByFunctionFuture

	PublishLayerVersion(ctx workflow.Context, input *lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error)
	PublishLayerVersionAsync(ctx workflow.Context, input *lambda.PublishLayerVersionInput) *LambdaPublishLayerVersionFuture

	PublishVersion(ctx workflow.Context, input *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error)
	PublishVersionAsync(ctx workflow.Context, input *lambda.PublishVersionInput) *LambdaPublishVersionFuture

	PutFunctionConcurrency(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error)
	PutFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) *LambdaPutFunctionConcurrencyFuture

	PutFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error)
	PutFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) *LambdaPutFunctionEventInvokeConfigFuture

	PutProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error)
	PutProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) *LambdaPutProvisionedConcurrencyConfigFuture

	RemoveLayerVersionPermission(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error)
	RemoveLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) *LambdaRemoveLayerVersionPermissionFuture

	RemovePermission(ctx workflow.Context, input *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *lambda.RemovePermissionInput) *LambdaRemovePermissionFuture

	TagResource(ctx workflow.Context, input *lambda.TagResourceInput) (*lambda.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *lambda.TagResourceInput) *LambdaTagResourceFuture

	UntagResource(ctx workflow.Context, input *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *lambda.UntagResourceInput) *LambdaUntagResourceFuture

	UpdateAlias(ctx workflow.Context, input *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error)
	UpdateAliasAsync(ctx workflow.Context, input *lambda.UpdateAliasInput) *LambdaUpdateAliasFuture

	UpdateEventSourceMapping(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)
	UpdateEventSourceMappingAsync(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) *LambdaUpdateEventSourceMappingFuture

	UpdateFunctionCode(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error)
	UpdateFunctionCodeAsync(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) *LambdaUpdateFunctionCodeFuture

	UpdateFunctionConfiguration(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)
	UpdateFunctionConfigurationAsync(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) *LambdaUpdateFunctionConfigurationFuture

	UpdateFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)
	UpdateFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) *LambdaUpdateFunctionEventInvokeConfigFuture

	WaitUntilFunctionActive(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error
	WaitUntilFunctionActiveAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) workflow.Future

	WaitUntilFunctionExists(ctx workflow.Context, input *lambda.GetFunctionInput) error
	WaitUntilFunctionExistsAsync(ctx workflow.Context, input *lambda.GetFunctionInput) workflow.Future

	WaitUntilFunctionUpdated(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error
	WaitUntilFunctionUpdatedAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) workflow.Future
}

type LambdaStub struct{}

func NewLambdaStub() LambdaClient {
	return &LambdaStub{}
}

type LambdaAddLayerVersionPermissionFuture struct {
	Future workflow.Future
}

func (r *LambdaAddLayerVersionPermissionFuture) Get(ctx workflow.Context) (*lambda.AddLayerVersionPermissionOutput, error) {
	var output lambda.AddLayerVersionPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaAddPermissionFuture struct {
	Future workflow.Future
}

func (r *LambdaAddPermissionFuture) Get(ctx workflow.Context) (*lambda.AddPermissionOutput, error) {
	var output lambda.AddPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaCreateAliasFuture struct {
	Future workflow.Future
}

func (r *LambdaCreateAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaCreateEventSourceMappingFuture struct {
	Future workflow.Future
}

func (r *LambdaCreateEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaCreateFunctionFuture struct {
	Future workflow.Future
}

func (r *LambdaCreateFunctionFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteAliasFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteAliasFuture) Get(ctx workflow.Context) (*lambda.DeleteAliasOutput, error) {
	var output lambda.DeleteAliasOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteEventSourceMappingFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteFunctionFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteFunctionFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionOutput, error) {
	var output lambda.DeleteFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteFunctionConcurrencyFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	var output lambda.DeleteFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteFunctionEventInvokeConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	var output lambda.DeleteFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteLayerVersionFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteLayerVersionFuture) Get(ctx workflow.Context) (*lambda.DeleteLayerVersionOutput, error) {
	var output lambda.DeleteLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaDeleteProvisionedConcurrencyConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaDeleteProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	var output lambda.DeleteProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetAccountSettingsFuture struct {
	Future workflow.Future
}

func (r *LambdaGetAccountSettingsFuture) Get(ctx workflow.Context) (*lambda.GetAccountSettingsOutput, error) {
	var output lambda.GetAccountSettingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetAliasFuture struct {
	Future workflow.Future
}

func (r *LambdaGetAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetEventSourceMappingFuture struct {
	Future workflow.Future
}

func (r *LambdaGetEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetFunctionFuture struct {
	Future workflow.Future
}

func (r *LambdaGetFunctionFuture) Get(ctx workflow.Context) (*lambda.GetFunctionOutput, error) {
	var output lambda.GetFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetFunctionConcurrencyFuture struct {
	Future workflow.Future
}

func (r *LambdaGetFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.GetFunctionConcurrencyOutput, error) {
	var output lambda.GetFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetFunctionConfigurationFuture struct {
	Future workflow.Future
}

func (r *LambdaGetFunctionConfigurationFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetFunctionEventInvokeConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaGetFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	var output lambda.GetFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetLayerVersionFuture struct {
	Future workflow.Future
}

func (r *LambdaGetLayerVersionFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionOutput, error) {
	var output lambda.GetLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetLayerVersionByArnFuture struct {
	Future workflow.Future
}

func (r *LambdaGetLayerVersionByArnFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionByArnOutput, error) {
	var output lambda.GetLayerVersionByArnOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetLayerVersionPolicyFuture struct {
	Future workflow.Future
}

func (r *LambdaGetLayerVersionPolicyFuture) Get(ctx workflow.Context) (*lambda.GetLayerVersionPolicyOutput, error) {
	var output lambda.GetLayerVersionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetPolicyFuture struct {
	Future workflow.Future
}

func (r *LambdaGetPolicyFuture) Get(ctx workflow.Context) (*lambda.GetPolicyOutput, error) {
	var output lambda.GetPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaGetProvisionedConcurrencyConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaGetProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	var output lambda.GetProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaInvokeFuture struct {
	Future workflow.Future
}

func (r *LambdaInvokeFuture) Get(ctx workflow.Context) (*lambda.InvokeOutput, error) {
	var output lambda.InvokeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListAliasesFuture struct {
	Future workflow.Future
}

func (r *LambdaListAliasesFuture) Get(ctx workflow.Context) (*lambda.ListAliasesOutput, error) {
	var output lambda.ListAliasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListEventSourceMappingsFuture struct {
	Future workflow.Future
}

func (r *LambdaListEventSourceMappingsFuture) Get(ctx workflow.Context) (*lambda.ListEventSourceMappingsOutput, error) {
	var output lambda.ListEventSourceMappingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListFunctionEventInvokeConfigsFuture struct {
	Future workflow.Future
}

func (r *LambdaListFunctionEventInvokeConfigsFuture) Get(ctx workflow.Context) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	var output lambda.ListFunctionEventInvokeConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListFunctionsFuture struct {
	Future workflow.Future
}

func (r *LambdaListFunctionsFuture) Get(ctx workflow.Context) (*lambda.ListFunctionsOutput, error) {
	var output lambda.ListFunctionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListLayerVersionsFuture struct {
	Future workflow.Future
}

func (r *LambdaListLayerVersionsFuture) Get(ctx workflow.Context) (*lambda.ListLayerVersionsOutput, error) {
	var output lambda.ListLayerVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListLayersFuture struct {
	Future workflow.Future
}

func (r *LambdaListLayersFuture) Get(ctx workflow.Context) (*lambda.ListLayersOutput, error) {
	var output lambda.ListLayersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListProvisionedConcurrencyConfigsFuture struct {
	Future workflow.Future
}

func (r *LambdaListProvisionedConcurrencyConfigsFuture) Get(ctx workflow.Context) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	var output lambda.ListProvisionedConcurrencyConfigsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListTagsFuture struct {
	Future workflow.Future
}

func (r *LambdaListTagsFuture) Get(ctx workflow.Context) (*lambda.ListTagsOutput, error) {
	var output lambda.ListTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaListVersionsByFunctionFuture struct {
	Future workflow.Future
}

func (r *LambdaListVersionsByFunctionFuture) Get(ctx workflow.Context) (*lambda.ListVersionsByFunctionOutput, error) {
	var output lambda.ListVersionsByFunctionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaPublishLayerVersionFuture struct {
	Future workflow.Future
}

func (r *LambdaPublishLayerVersionFuture) Get(ctx workflow.Context) (*lambda.PublishLayerVersionOutput, error) {
	var output lambda.PublishLayerVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaPublishVersionFuture struct {
	Future workflow.Future
}

func (r *LambdaPublishVersionFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaPutFunctionConcurrencyFuture struct {
	Future workflow.Future
}

func (r *LambdaPutFunctionConcurrencyFuture) Get(ctx workflow.Context) (*lambda.PutFunctionConcurrencyOutput, error) {
	var output lambda.PutFunctionConcurrencyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaPutFunctionEventInvokeConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaPutFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	var output lambda.PutFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaPutProvisionedConcurrencyConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaPutProvisionedConcurrencyConfigFuture) Get(ctx workflow.Context) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	var output lambda.PutProvisionedConcurrencyConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaRemoveLayerVersionPermissionFuture struct {
	Future workflow.Future
}

func (r *LambdaRemoveLayerVersionPermissionFuture) Get(ctx workflow.Context) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	var output lambda.RemoveLayerVersionPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaRemovePermissionFuture struct {
	Future workflow.Future
}

func (r *LambdaRemovePermissionFuture) Get(ctx workflow.Context) (*lambda.RemovePermissionOutput, error) {
	var output lambda.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaTagResourceFuture struct {
	Future workflow.Future
}

func (r *LambdaTagResourceFuture) Get(ctx workflow.Context) (*lambda.TagResourceOutput, error) {
	var output lambda.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUntagResourceFuture struct {
	Future workflow.Future
}

func (r *LambdaUntagResourceFuture) Get(ctx workflow.Context) (*lambda.UntagResourceOutput, error) {
	var output lambda.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUpdateAliasFuture struct {
	Future workflow.Future
}

func (r *LambdaUpdateAliasFuture) Get(ctx workflow.Context) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUpdateEventSourceMappingFuture struct {
	Future workflow.Future
}

func (r *LambdaUpdateEventSourceMappingFuture) Get(ctx workflow.Context) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUpdateFunctionCodeFuture struct {
	Future workflow.Future
}

func (r *LambdaUpdateFunctionCodeFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUpdateFunctionConfigurationFuture struct {
	Future workflow.Future
}

func (r *LambdaUpdateFunctionConfigurationFuture) Get(ctx workflow.Context) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type LambdaUpdateFunctionEventInvokeConfigFuture struct {
	Future workflow.Future
}

func (r *LambdaUpdateFunctionEventInvokeConfigFuture) Get(ctx workflow.Context) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	var output lambda.UpdateFunctionEventInvokeConfigOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) AddLayerVersionPermission(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error) {
	var output lambda.AddLayerVersionPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.AddLayerVersionPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) AddLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.AddLayerVersionPermissionInput) *LambdaAddLayerVersionPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.AddLayerVersionPermission", input)
	return &LambdaAddLayerVersionPermissionFuture{Future: future}
}

func (a *LambdaStub) AddPermission(ctx workflow.Context, input *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	var output lambda.AddPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.AddPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) AddPermissionAsync(ctx workflow.Context, input *lambda.AddPermissionInput) *LambdaAddPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.AddPermission", input)
	return &LambdaAddPermissionFuture{Future: future}
}

func (a *LambdaStub) CreateAlias(ctx workflow.Context, input *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.CreateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) CreateAliasAsync(ctx workflow.Context, input *lambda.CreateAliasInput) *LambdaCreateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.CreateAlias", input)
	return &LambdaCreateAliasFuture{Future: future}
}

func (a *LambdaStub) CreateEventSourceMapping(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.CreateEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) CreateEventSourceMappingAsync(ctx workflow.Context, input *lambda.CreateEventSourceMappingInput) *LambdaCreateEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.CreateEventSourceMapping", input)
	return &LambdaCreateEventSourceMappingFuture{Future: future}
}

func (a *LambdaStub) CreateFunction(ctx workflow.Context, input *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.CreateFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) CreateFunctionAsync(ctx workflow.Context, input *lambda.CreateFunctionInput) *LambdaCreateFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.CreateFunction", input)
	return &LambdaCreateFunctionFuture{Future: future}
}

func (a *LambdaStub) DeleteAlias(ctx workflow.Context, input *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	var output lambda.DeleteAliasOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteAliasAsync(ctx workflow.Context, input *lambda.DeleteAliasInput) *LambdaDeleteAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteAlias", input)
	return &LambdaDeleteAliasFuture{Future: future}
}

func (a *LambdaStub) DeleteEventSourceMapping(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteEventSourceMappingAsync(ctx workflow.Context, input *lambda.DeleteEventSourceMappingInput) *LambdaDeleteEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteEventSourceMapping", input)
	return &LambdaDeleteEventSourceMappingFuture{Future: future}
}

func (a *LambdaStub) DeleteFunction(ctx workflow.Context, input *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	var output lambda.DeleteFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteFunctionAsync(ctx workflow.Context, input *lambda.DeleteFunctionInput) *LambdaDeleteFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunction", input)
	return &LambdaDeleteFunctionFuture{Future: future}
}

func (a *LambdaStub) DeleteFunctionConcurrency(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	var output lambda.DeleteFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.DeleteFunctionConcurrencyInput) *LambdaDeleteFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunctionConcurrency", input)
	return &LambdaDeleteFunctionConcurrencyFuture{Future: future}
}

func (a *LambdaStub) DeleteFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	var output lambda.DeleteFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.DeleteFunctionEventInvokeConfigInput) *LambdaDeleteFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteFunctionEventInvokeConfig", input)
	return &LambdaDeleteFunctionEventInvokeConfigFuture{Future: future}
}

func (a *LambdaStub) DeleteLayerVersion(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error) {
	var output lambda.DeleteLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteLayerVersionAsync(ctx workflow.Context, input *lambda.DeleteLayerVersionInput) *LambdaDeleteLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteLayerVersion", input)
	return &LambdaDeleteLayerVersionFuture{Future: future}
}

func (a *LambdaStub) DeleteProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	var output lambda.DeleteProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) DeleteProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.DeleteProvisionedConcurrencyConfigInput) *LambdaDeleteProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.DeleteProvisionedConcurrencyConfig", input)
	return &LambdaDeleteProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *LambdaStub) GetAccountSettings(ctx workflow.Context, input *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	var output lambda.GetAccountSettingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetAccountSettings", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetAccountSettingsAsync(ctx workflow.Context, input *lambda.GetAccountSettingsInput) *LambdaGetAccountSettingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetAccountSettings", input)
	return &LambdaGetAccountSettingsFuture{Future: future}
}

func (a *LambdaStub) GetAlias(ctx workflow.Context, input *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetAliasAsync(ctx workflow.Context, input *lambda.GetAliasInput) *LambdaGetAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetAlias", input)
	return &LambdaGetAliasFuture{Future: future}
}

func (a *LambdaStub) GetEventSourceMapping(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetEventSourceMappingAsync(ctx workflow.Context, input *lambda.GetEventSourceMappingInput) *LambdaGetEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetEventSourceMapping", input)
	return &LambdaGetEventSourceMappingFuture{Future: future}
}

func (a *LambdaStub) GetFunction(ctx workflow.Context, input *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	var output lambda.GetFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetFunctionAsync(ctx workflow.Context, input *lambda.GetFunctionInput) *LambdaGetFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunction", input)
	return &LambdaGetFunctionFuture{Future: future}
}

func (a *LambdaStub) GetFunctionConcurrency(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error) {
	var output lambda.GetFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.GetFunctionConcurrencyInput) *LambdaGetFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionConcurrency", input)
	return &LambdaGetFunctionConcurrencyFuture{Future: future}
}

func (a *LambdaStub) GetFunctionConfiguration(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetFunctionConfigurationAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) *LambdaGetFunctionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionConfiguration", input)
	return &LambdaGetFunctionConfigurationFuture{Future: future}
}

func (a *LambdaStub) GetFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	var output lambda.GetFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.GetFunctionEventInvokeConfigInput) *LambdaGetFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetFunctionEventInvokeConfig", input)
	return &LambdaGetFunctionEventInvokeConfigFuture{Future: future}
}

func (a *LambdaStub) GetLayerVersion(ctx workflow.Context, input *lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error) {
	var output lambda.GetLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetLayerVersionAsync(ctx workflow.Context, input *lambda.GetLayerVersionInput) *LambdaGetLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersion", input)
	return &LambdaGetLayerVersionFuture{Future: future}
}

func (a *LambdaStub) GetLayerVersionByArn(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error) {
	var output lambda.GetLayerVersionByArnOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersionByArn", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetLayerVersionByArnAsync(ctx workflow.Context, input *lambda.GetLayerVersionByArnInput) *LambdaGetLayerVersionByArnFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersionByArn", input)
	return &LambdaGetLayerVersionByArnFuture{Future: future}
}

func (a *LambdaStub) GetLayerVersionPolicy(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error) {
	var output lambda.GetLayerVersionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetLayerVersionPolicyAsync(ctx workflow.Context, input *lambda.GetLayerVersionPolicyInput) *LambdaGetLayerVersionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetLayerVersionPolicy", input)
	return &LambdaGetLayerVersionPolicyFuture{Future: future}
}

func (a *LambdaStub) GetPolicy(ctx workflow.Context, input *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	var output lambda.GetPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetPolicyAsync(ctx workflow.Context, input *lambda.GetPolicyInput) *LambdaGetPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetPolicy", input)
	return &LambdaGetPolicyFuture{Future: future}
}

func (a *LambdaStub) GetProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	var output lambda.GetProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.GetProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) GetProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.GetProvisionedConcurrencyConfigInput) *LambdaGetProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.GetProvisionedConcurrencyConfig", input)
	return &LambdaGetProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *LambdaStub) Invoke(ctx workflow.Context, input *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	var output lambda.InvokeOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.Invoke", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) InvokeAsync(ctx workflow.Context, input *lambda.InvokeInput) *LambdaInvokeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.Invoke", input)
	return &LambdaInvokeFuture{Future: future}
}

func (a *LambdaStub) ListAliases(ctx workflow.Context, input *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	var output lambda.ListAliasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListAliases", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListAliasesAsync(ctx workflow.Context, input *lambda.ListAliasesInput) *LambdaListAliasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListAliases", input)
	return &LambdaListAliasesFuture{Future: future}
}

func (a *LambdaStub) ListEventSourceMappings(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	var output lambda.ListEventSourceMappingsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListEventSourceMappings", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListEventSourceMappingsAsync(ctx workflow.Context, input *lambda.ListEventSourceMappingsInput) *LambdaListEventSourceMappingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListEventSourceMappings", input)
	return &LambdaListEventSourceMappingsFuture{Future: future}
}

func (a *LambdaStub) ListFunctionEventInvokeConfigs(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	var output lambda.ListFunctionEventInvokeConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListFunctionEventInvokeConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListFunctionEventInvokeConfigsAsync(ctx workflow.Context, input *lambda.ListFunctionEventInvokeConfigsInput) *LambdaListFunctionEventInvokeConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListFunctionEventInvokeConfigs", input)
	return &LambdaListFunctionEventInvokeConfigsFuture{Future: future}
}

func (a *LambdaStub) ListFunctions(ctx workflow.Context, input *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	var output lambda.ListFunctionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListFunctions", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListFunctionsAsync(ctx workflow.Context, input *lambda.ListFunctionsInput) *LambdaListFunctionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListFunctions", input)
	return &LambdaListFunctionsFuture{Future: future}
}

func (a *LambdaStub) ListLayerVersions(ctx workflow.Context, input *lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error) {
	var output lambda.ListLayerVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListLayerVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListLayerVersionsAsync(ctx workflow.Context, input *lambda.ListLayerVersionsInput) *LambdaListLayerVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListLayerVersions", input)
	return &LambdaListLayerVersionsFuture{Future: future}
}

func (a *LambdaStub) ListLayers(ctx workflow.Context, input *lambda.ListLayersInput) (*lambda.ListLayersOutput, error) {
	var output lambda.ListLayersOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListLayers", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListLayersAsync(ctx workflow.Context, input *lambda.ListLayersInput) *LambdaListLayersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListLayers", input)
	return &LambdaListLayersFuture{Future: future}
}

func (a *LambdaStub) ListProvisionedConcurrencyConfigs(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	var output lambda.ListProvisionedConcurrencyConfigsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListProvisionedConcurrencyConfigs", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListProvisionedConcurrencyConfigsAsync(ctx workflow.Context, input *lambda.ListProvisionedConcurrencyConfigsInput) *LambdaListProvisionedConcurrencyConfigsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListProvisionedConcurrencyConfigs", input)
	return &LambdaListProvisionedConcurrencyConfigsFuture{Future: future}
}

func (a *LambdaStub) ListTags(ctx workflow.Context, input *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	var output lambda.ListTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListTags", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListTagsAsync(ctx workflow.Context, input *lambda.ListTagsInput) *LambdaListTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListTags", input)
	return &LambdaListTagsFuture{Future: future}
}

func (a *LambdaStub) ListVersionsByFunction(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	var output lambda.ListVersionsByFunctionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.ListVersionsByFunction", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) ListVersionsByFunctionAsync(ctx workflow.Context, input *lambda.ListVersionsByFunctionInput) *LambdaListVersionsByFunctionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.ListVersionsByFunction", input)
	return &LambdaListVersionsByFunctionFuture{Future: future}
}

func (a *LambdaStub) PublishLayerVersion(ctx workflow.Context, input *lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error) {
	var output lambda.PublishLayerVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.PublishLayerVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) PublishLayerVersionAsync(ctx workflow.Context, input *lambda.PublishLayerVersionInput) *LambdaPublishLayerVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.PublishLayerVersion", input)
	return &LambdaPublishLayerVersionFuture{Future: future}
}

func (a *LambdaStub) PublishVersion(ctx workflow.Context, input *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.PublishVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) PublishVersionAsync(ctx workflow.Context, input *lambda.PublishVersionInput) *LambdaPublishVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.PublishVersion", input)
	return &LambdaPublishVersionFuture{Future: future}
}

func (a *LambdaStub) PutFunctionConcurrency(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error) {
	var output lambda.PutFunctionConcurrencyOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.PutFunctionConcurrency", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) PutFunctionConcurrencyAsync(ctx workflow.Context, input *lambda.PutFunctionConcurrencyInput) *LambdaPutFunctionConcurrencyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.PutFunctionConcurrency", input)
	return &LambdaPutFunctionConcurrencyFuture{Future: future}
}

func (a *LambdaStub) PutFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	var output lambda.PutFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.PutFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) PutFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.PutFunctionEventInvokeConfigInput) *LambdaPutFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.PutFunctionEventInvokeConfig", input)
	return &LambdaPutFunctionEventInvokeConfigFuture{Future: future}
}

func (a *LambdaStub) PutProvisionedConcurrencyConfig(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	var output lambda.PutProvisionedConcurrencyConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.PutProvisionedConcurrencyConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) PutProvisionedConcurrencyConfigAsync(ctx workflow.Context, input *lambda.PutProvisionedConcurrencyConfigInput) *LambdaPutProvisionedConcurrencyConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.PutProvisionedConcurrencyConfig", input)
	return &LambdaPutProvisionedConcurrencyConfigFuture{Future: future}
}

func (a *LambdaStub) RemoveLayerVersionPermission(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	var output lambda.RemoveLayerVersionPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.RemoveLayerVersionPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) RemoveLayerVersionPermissionAsync(ctx workflow.Context, input *lambda.RemoveLayerVersionPermissionInput) *LambdaRemoveLayerVersionPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.RemoveLayerVersionPermission", input)
	return &LambdaRemoveLayerVersionPermissionFuture{Future: future}
}

func (a *LambdaStub) RemovePermission(ctx workflow.Context, input *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	var output lambda.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) RemovePermissionAsync(ctx workflow.Context, input *lambda.RemovePermissionInput) *LambdaRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.RemovePermission", input)
	return &LambdaRemovePermissionFuture{Future: future}
}

func (a *LambdaStub) TagResource(ctx workflow.Context, input *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	var output lambda.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) TagResourceAsync(ctx workflow.Context, input *lambda.TagResourceInput) *LambdaTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.TagResource", input)
	return &LambdaTagResourceFuture{Future: future}
}

func (a *LambdaStub) UntagResource(ctx workflow.Context, input *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	var output lambda.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UntagResourceAsync(ctx workflow.Context, input *lambda.UntagResourceInput) *LambdaUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UntagResource", input)
	return &LambdaUntagResourceFuture{Future: future}
}

func (a *LambdaStub) UpdateAlias(ctx workflow.Context, input *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	var output lambda.AliasConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateAlias", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UpdateAliasAsync(ctx workflow.Context, input *lambda.UpdateAliasInput) *LambdaUpdateAliasFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateAlias", input)
	return &LambdaUpdateAliasFuture{Future: future}
}

func (a *LambdaStub) UpdateEventSourceMapping(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	var output lambda.EventSourceMappingConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateEventSourceMapping", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UpdateEventSourceMappingAsync(ctx workflow.Context, input *lambda.UpdateEventSourceMappingInput) *LambdaUpdateEventSourceMappingFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateEventSourceMapping", input)
	return &LambdaUpdateEventSourceMappingFuture{Future: future}
}

func (a *LambdaStub) UpdateFunctionCode(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionCode", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UpdateFunctionCodeAsync(ctx workflow.Context, input *lambda.UpdateFunctionCodeInput) *LambdaUpdateFunctionCodeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionCode", input)
	return &LambdaUpdateFunctionCodeFuture{Future: future}
}

func (a *LambdaStub) UpdateFunctionConfiguration(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	var output lambda.FunctionConfiguration
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UpdateFunctionConfigurationAsync(ctx workflow.Context, input *lambda.UpdateFunctionConfigurationInput) *LambdaUpdateFunctionConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionConfiguration", input)
	return &LambdaUpdateFunctionConfigurationFuture{Future: future}
}

func (a *LambdaStub) UpdateFunctionEventInvokeConfig(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	var output lambda.UpdateFunctionEventInvokeConfigOutput
	err := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionEventInvokeConfig", input).Get(ctx, &output)
	return &output, err
}

func (a *LambdaStub) UpdateFunctionEventInvokeConfigAsync(ctx workflow.Context, input *lambda.UpdateFunctionEventInvokeConfigInput) *LambdaUpdateFunctionEventInvokeConfigFuture {
	future := workflow.ExecuteActivity(ctx, "aws.lambda.UpdateFunctionEventInvokeConfig", input)
	return &LambdaUpdateFunctionEventInvokeConfigFuture{Future: future}
}

func (a *LambdaStub) WaitUntilFunctionActive(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionActive", input).Get(ctx, nil)
}

func (a *LambdaStub) WaitUntilFunctionActiveAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionActive", input)
}

func (a *LambdaStub) WaitUntilFunctionExists(ctx workflow.Context, input *lambda.GetFunctionInput) error {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionExists", input).Get(ctx, nil)
}

func (a *LambdaStub) WaitUntilFunctionExistsAsync(ctx workflow.Context, input *lambda.GetFunctionInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionExists", input)
}

func (a *LambdaStub) WaitUntilFunctionUpdated(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) error {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionUpdated", input).Get(ctx, nil)
}

func (a *LambdaStub) WaitUntilFunctionUpdatedAsync(ctx workflow.Context, input *lambda.GetFunctionConfigurationInput) workflow.Future {
	return workflow.ExecuteActivity(ctx, "aws.lambda.WaitUntilFunctionUpdated", input)
}
