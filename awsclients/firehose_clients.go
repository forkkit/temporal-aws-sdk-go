// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/firehose"
	"go.temporal.io/sdk/workflow"
)

type FirehoseClient interface {
	CreateDeliveryStream(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) (*firehose.CreateDeliveryStreamOutput, error)
	CreateDeliveryStreamAsync(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) *FirehoseCreateDeliveryStreamFuture

	DeleteDeliveryStream(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) (*firehose.DeleteDeliveryStreamOutput, error)
	DeleteDeliveryStreamAsync(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) *FirehoseDeleteDeliveryStreamFuture

	DescribeDeliveryStream(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) (*firehose.DescribeDeliveryStreamOutput, error)
	DescribeDeliveryStreamAsync(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) *FirehoseDescribeDeliveryStreamFuture

	ListDeliveryStreams(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) (*firehose.ListDeliveryStreamsOutput, error)
	ListDeliveryStreamsAsync(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) *FirehoseListDeliveryStreamsFuture

	ListTagsForDeliveryStream(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) (*firehose.ListTagsForDeliveryStreamOutput, error)
	ListTagsForDeliveryStreamAsync(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) *FirehoseListTagsForDeliveryStreamFuture

	PutRecord(ctx workflow.Context, input *firehose.PutRecordInput) (*firehose.PutRecordOutput, error)
	PutRecordAsync(ctx workflow.Context, input *firehose.PutRecordInput) *FirehosePutRecordFuture

	PutRecordBatch(ctx workflow.Context, input *firehose.PutRecordBatchInput) (*firehose.PutRecordBatchOutput, error)
	PutRecordBatchAsync(ctx workflow.Context, input *firehose.PutRecordBatchInput) *FirehosePutRecordBatchFuture

	StartDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) (*firehose.StartDeliveryStreamEncryptionOutput, error)
	StartDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) *FirehoseStartDeliveryStreamEncryptionFuture

	StopDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) (*firehose.StopDeliveryStreamEncryptionOutput, error)
	StopDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) *FirehoseStopDeliveryStreamEncryptionFuture

	TagDeliveryStream(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) (*firehose.TagDeliveryStreamOutput, error)
	TagDeliveryStreamAsync(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) *FirehoseTagDeliveryStreamFuture

	UntagDeliveryStream(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) (*firehose.UntagDeliveryStreamOutput, error)
	UntagDeliveryStreamAsync(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) *FirehoseUntagDeliveryStreamFuture

	UpdateDestination(ctx workflow.Context, input *firehose.UpdateDestinationInput) (*firehose.UpdateDestinationOutput, error)
	UpdateDestinationAsync(ctx workflow.Context, input *firehose.UpdateDestinationInput) *FirehoseUpdateDestinationFuture
}

type FirehoseStub struct{}

func NewFirehoseStub() FirehoseClient {
	return &FirehoseStub{}
}

type FirehoseCreateDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseCreateDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.CreateDeliveryStreamOutput, error) {
	var output firehose.CreateDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseDeleteDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseDeleteDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.DeleteDeliveryStreamOutput, error) {
	var output firehose.DeleteDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseDescribeDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseDescribeDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.DescribeDeliveryStreamOutput, error) {
	var output firehose.DescribeDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseListDeliveryStreamsFuture struct {
	Future workflow.Future
}

func (r *FirehoseListDeliveryStreamsFuture) Get(ctx workflow.Context) (*firehose.ListDeliveryStreamsOutput, error) {
	var output firehose.ListDeliveryStreamsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseListTagsForDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseListTagsForDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	var output firehose.ListTagsForDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehosePutRecordFuture struct {
	Future workflow.Future
}

func (r *FirehosePutRecordFuture) Get(ctx workflow.Context) (*firehose.PutRecordOutput, error) {
	var output firehose.PutRecordOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehosePutRecordBatchFuture struct {
	Future workflow.Future
}

func (r *FirehosePutRecordBatchFuture) Get(ctx workflow.Context) (*firehose.PutRecordBatchOutput, error) {
	var output firehose.PutRecordBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseStartDeliveryStreamEncryptionFuture struct {
	Future workflow.Future
}

func (r *FirehoseStartDeliveryStreamEncryptionFuture) Get(ctx workflow.Context) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	var output firehose.StartDeliveryStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseStopDeliveryStreamEncryptionFuture struct {
	Future workflow.Future
}

func (r *FirehoseStopDeliveryStreamEncryptionFuture) Get(ctx workflow.Context) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	var output firehose.StopDeliveryStreamEncryptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseTagDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseTagDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.TagDeliveryStreamOutput, error) {
	var output firehose.TagDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseUntagDeliveryStreamFuture struct {
	Future workflow.Future
}

func (r *FirehoseUntagDeliveryStreamFuture) Get(ctx workflow.Context) (*firehose.UntagDeliveryStreamOutput, error) {
	var output firehose.UntagDeliveryStreamOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type FirehoseUpdateDestinationFuture struct {
	Future workflow.Future
}

func (r *FirehoseUpdateDestinationFuture) Get(ctx workflow.Context) (*firehose.UpdateDestinationOutput, error) {
	var output firehose.UpdateDestinationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) CreateDeliveryStream(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) (*firehose.CreateDeliveryStreamOutput, error) {
	var output firehose.CreateDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.CreateDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) CreateDeliveryStreamAsync(ctx workflow.Context, input *firehose.CreateDeliveryStreamInput) *FirehoseCreateDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.CreateDeliveryStream", input)
	return &FirehoseCreateDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) DeleteDeliveryStream(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) (*firehose.DeleteDeliveryStreamOutput, error) {
	var output firehose.DeleteDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.DeleteDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) DeleteDeliveryStreamAsync(ctx workflow.Context, input *firehose.DeleteDeliveryStreamInput) *FirehoseDeleteDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.DeleteDeliveryStream", input)
	return &FirehoseDeleteDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) DescribeDeliveryStream(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) (*firehose.DescribeDeliveryStreamOutput, error) {
	var output firehose.DescribeDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.DescribeDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) DescribeDeliveryStreamAsync(ctx workflow.Context, input *firehose.DescribeDeliveryStreamInput) *FirehoseDescribeDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.DescribeDeliveryStream", input)
	return &FirehoseDescribeDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) ListDeliveryStreams(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) (*firehose.ListDeliveryStreamsOutput, error) {
	var output firehose.ListDeliveryStreamsOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.ListDeliveryStreams", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) ListDeliveryStreamsAsync(ctx workflow.Context, input *firehose.ListDeliveryStreamsInput) *FirehoseListDeliveryStreamsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.ListDeliveryStreams", input)
	return &FirehoseListDeliveryStreamsFuture{Future: future}
}

func (a *FirehoseStub) ListTagsForDeliveryStream(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	var output firehose.ListTagsForDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.ListTagsForDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) ListTagsForDeliveryStreamAsync(ctx workflow.Context, input *firehose.ListTagsForDeliveryStreamInput) *FirehoseListTagsForDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.ListTagsForDeliveryStream", input)
	return &FirehoseListTagsForDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) PutRecord(ctx workflow.Context, input *firehose.PutRecordInput) (*firehose.PutRecordOutput, error) {
	var output firehose.PutRecordOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.PutRecord", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) PutRecordAsync(ctx workflow.Context, input *firehose.PutRecordInput) *FirehosePutRecordFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.PutRecord", input)
	return &FirehosePutRecordFuture{Future: future}
}

func (a *FirehoseStub) PutRecordBatch(ctx workflow.Context, input *firehose.PutRecordBatchInput) (*firehose.PutRecordBatchOutput, error) {
	var output firehose.PutRecordBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.PutRecordBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) PutRecordBatchAsync(ctx workflow.Context, input *firehose.PutRecordBatchInput) *FirehosePutRecordBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.PutRecordBatch", input)
	return &FirehosePutRecordBatchFuture{Future: future}
}

func (a *FirehoseStub) StartDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	var output firehose.StartDeliveryStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.StartDeliveryStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) StartDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StartDeliveryStreamEncryptionInput) *FirehoseStartDeliveryStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.StartDeliveryStreamEncryption", input)
	return &FirehoseStartDeliveryStreamEncryptionFuture{Future: future}
}

func (a *FirehoseStub) StopDeliveryStreamEncryption(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	var output firehose.StopDeliveryStreamEncryptionOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.StopDeliveryStreamEncryption", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) StopDeliveryStreamEncryptionAsync(ctx workflow.Context, input *firehose.StopDeliveryStreamEncryptionInput) *FirehoseStopDeliveryStreamEncryptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.StopDeliveryStreamEncryption", input)
	return &FirehoseStopDeliveryStreamEncryptionFuture{Future: future}
}

func (a *FirehoseStub) TagDeliveryStream(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) (*firehose.TagDeliveryStreamOutput, error) {
	var output firehose.TagDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.TagDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) TagDeliveryStreamAsync(ctx workflow.Context, input *firehose.TagDeliveryStreamInput) *FirehoseTagDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.TagDeliveryStream", input)
	return &FirehoseTagDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) UntagDeliveryStream(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) (*firehose.UntagDeliveryStreamOutput, error) {
	var output firehose.UntagDeliveryStreamOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.UntagDeliveryStream", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) UntagDeliveryStreamAsync(ctx workflow.Context, input *firehose.UntagDeliveryStreamInput) *FirehoseUntagDeliveryStreamFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.UntagDeliveryStream", input)
	return &FirehoseUntagDeliveryStreamFuture{Future: future}
}

func (a *FirehoseStub) UpdateDestination(ctx workflow.Context, input *firehose.UpdateDestinationInput) (*firehose.UpdateDestinationOutput, error) {
	var output firehose.UpdateDestinationOutput
	err := workflow.ExecuteActivity(ctx, "aws.firehose.UpdateDestination", input).Get(ctx, &output)
	return &output, err
}

func (a *FirehoseStub) UpdateDestinationAsync(ctx workflow.Context, input *firehose.UpdateDestinationInput) *FirehoseUpdateDestinationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.firehose.UpdateDestination", input)
	return &FirehoseUpdateDestinationFuture{Future: future}
}
