// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/waf"
	"go.temporal.io/sdk/workflow"
)

type WAFClient interface {
	CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error)
	CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WAFCreateByteMatchSetFuture

	CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error)
	CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WAFCreateGeoMatchSetFuture

	CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error)
	CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WAFCreateIPSetFuture

	CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error)
	CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WAFCreateRateBasedRuleFuture

	CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error)
	CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WAFCreateRegexMatchSetFuture

	CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error)
	CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WAFCreateRegexPatternSetFuture

	CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error)
	CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WAFCreateRuleFuture

	CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error)
	CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WAFCreateRuleGroupFuture

	CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error)
	CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WAFCreateSizeConstraintSetFuture

	CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error)
	CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WAFCreateSqlInjectionMatchSetFuture

	CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error)
	CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WAFCreateWebACLFuture

	CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error)
	CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WAFCreateWebACLMigrationStackFuture

	CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error)
	CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WAFCreateXssMatchSetFuture

	DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error)
	DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WAFDeleteByteMatchSetFuture

	DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error)
	DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WAFDeleteGeoMatchSetFuture

	DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error)
	DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WAFDeleteIPSetFuture

	DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error)
	DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WAFDeleteLoggingConfigurationFuture

	DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error)
	DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WAFDeletePermissionPolicyFuture

	DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error)
	DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WAFDeleteRateBasedRuleFuture

	DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error)
	DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WAFDeleteRegexMatchSetFuture

	DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error)
	DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WAFDeleteRegexPatternSetFuture

	DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WAFDeleteRuleFuture

	DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error)
	DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WAFDeleteRuleGroupFuture

	DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error)
	DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WAFDeleteSizeConstraintSetFuture

	DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error)
	DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WAFDeleteSqlInjectionMatchSetFuture

	DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error)
	DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WAFDeleteWebACLFuture

	DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error)
	DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WAFDeleteXssMatchSetFuture

	GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error)
	GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WAFGetByteMatchSetFuture

	GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error)
	GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WAFGetChangeTokenFuture

	GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error)
	GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WAFGetChangeTokenStatusFuture

	GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error)
	GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WAFGetGeoMatchSetFuture

	GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error)
	GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WAFGetIPSetFuture

	GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error)
	GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WAFGetLoggingConfigurationFuture

	GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error)
	GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WAFGetPermissionPolicyFuture

	GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error)
	GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WAFGetRateBasedRuleFuture

	GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error)
	GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WAFGetRateBasedRuleManagedKeysFuture

	GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error)
	GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WAFGetRegexMatchSetFuture

	GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error)
	GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WAFGetRegexPatternSetFuture

	GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error)
	GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WAFGetRuleFuture

	GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error)
	GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WAFGetRuleGroupFuture

	GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error)
	GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WAFGetSampledRequestsFuture

	GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error)
	GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WAFGetSizeConstraintSetFuture

	GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error)
	GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WAFGetSqlInjectionMatchSetFuture

	GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error)
	GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WAFGetWebACLFuture

	GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error)
	GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WAFGetXssMatchSetFuture

	ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error)
	ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WAFListActivatedRulesInRuleGroupFuture

	ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error)
	ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WAFListByteMatchSetsFuture

	ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error)
	ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WAFListGeoMatchSetsFuture

	ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error)
	ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WAFListIPSetsFuture

	ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error)
	ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WAFListLoggingConfigurationsFuture

	ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error)
	ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WAFListRateBasedRulesFuture

	ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error)
	ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WAFListRegexMatchSetsFuture

	ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error)
	ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WAFListRegexPatternSetsFuture

	ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error)
	ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WAFListRuleGroupsFuture

	ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WAFListRulesFuture

	ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error)
	ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WAFListSizeConstraintSetsFuture

	ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error)
	ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WAFListSqlInjectionMatchSetsFuture

	ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error)
	ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WAFListSubscribedRuleGroupsFuture

	ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WAFListTagsForResourceFuture

	ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error)
	ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WAFListWebACLsFuture

	ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error)
	ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WAFListXssMatchSetsFuture

	PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error)
	PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WAFPutLoggingConfigurationFuture

	PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error)
	PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WAFPutPermissionPolicyFuture

	TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WAFTagResourceFuture

	UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WAFUntagResourceFuture

	UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error)
	UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WAFUpdateByteMatchSetFuture

	UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error)
	UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WAFUpdateGeoMatchSetFuture

	UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error)
	UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WAFUpdateIPSetFuture

	UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error)
	UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WAFUpdateRateBasedRuleFuture

	UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error)
	UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WAFUpdateRegexMatchSetFuture

	UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error)
	UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WAFUpdateRegexPatternSetFuture

	UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error)
	UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WAFUpdateRuleFuture

	UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error)
	UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WAFUpdateRuleGroupFuture

	UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error)
	UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WAFUpdateSizeConstraintSetFuture

	UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error)
	UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WAFUpdateSqlInjectionMatchSetFuture

	UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error)
	UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WAFUpdateWebACLFuture

	UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error)
	UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WAFUpdateXssMatchSetFuture
}

type WAFStub struct{}

func NewWAFStub() WAFClient {
	return &WAFStub{}
}

type WAFCreateByteMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateGeoMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateIPSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateIPSetFuture) Get(ctx workflow.Context) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRateBasedRuleFuture struct {
	Future workflow.Future
}

func (r *WAFCreateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRegexMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRuleFuture struct {
	Future workflow.Future
}

func (r *WAFCreateRuleFuture) Get(ctx workflow.Context) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateRuleGroupFuture struct {
	Future workflow.Future
}

func (r *WAFCreateRuleGroupFuture) Get(ctx workflow.Context) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateSizeConstraintSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateSqlInjectionMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateWebACLFuture struct {
	Future workflow.Future
}

func (r *WAFCreateWebACLFuture) Get(ctx workflow.Context) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateWebACLMigrationStackFuture struct {
	Future workflow.Future
}

func (r *WAFCreateWebACLMigrationStackFuture) Get(ctx workflow.Context) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFCreateXssMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFCreateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteByteMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteByteMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteGeoMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteIPSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteIPSetFuture) Get(ctx workflow.Context) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeletePermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *WAFDeletePermissionPolicyFuture) Get(ctx workflow.Context) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRateBasedRuleFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRegexMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRuleFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteRuleFuture) Get(ctx workflow.Context) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteRuleGroupFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteRuleGroupFuture) Get(ctx workflow.Context) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteSizeConstraintSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteSqlInjectionMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteWebACLFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteWebACLFuture) Get(ctx workflow.Context) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFDeleteXssMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFDeleteXssMatchSetFuture) Get(ctx workflow.Context) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetByteMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetByteMatchSetFuture) Get(ctx workflow.Context) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetChangeTokenFuture struct {
	Future workflow.Future
}

func (r *WAFGetChangeTokenFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetChangeTokenStatusFuture struct {
	Future workflow.Future
}

func (r *WAFGetChangeTokenStatusFuture) Get(ctx workflow.Context) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetGeoMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetIPSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetIPSetFuture) Get(ctx workflow.Context) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *WAFGetLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetPermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *WAFGetPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRateBasedRuleFuture struct {
	Future workflow.Future
}

func (r *WAFGetRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRateBasedRuleManagedKeysFuture struct {
	Future workflow.Future
}

func (r *WAFGetRateBasedRuleManagedKeysFuture) Get(ctx workflow.Context) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRegexMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRuleFuture struct {
	Future workflow.Future
}

func (r *WAFGetRuleFuture) Get(ctx workflow.Context) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetRuleGroupFuture struct {
	Future workflow.Future
}

func (r *WAFGetRuleGroupFuture) Get(ctx workflow.Context) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSampledRequestsFuture struct {
	Future workflow.Future
}

func (r *WAFGetSampledRequestsFuture) Get(ctx workflow.Context) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSizeConstraintSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetSqlInjectionMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetWebACLFuture struct {
	Future workflow.Future
}

func (r *WAFGetWebACLFuture) Get(ctx workflow.Context) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFGetXssMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFGetXssMatchSetFuture) Get(ctx workflow.Context) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListActivatedRulesInRuleGroupFuture struct {
	Future workflow.Future
}

func (r *WAFListActivatedRulesInRuleGroupFuture) Get(ctx workflow.Context) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListByteMatchSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListByteMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListGeoMatchSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListGeoMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListIPSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListIPSetsFuture) Get(ctx workflow.Context) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListLoggingConfigurationsFuture struct {
	Future workflow.Future
}

func (r *WAFListLoggingConfigurationsFuture) Get(ctx workflow.Context) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRateBasedRulesFuture struct {
	Future workflow.Future
}

func (r *WAFListRateBasedRulesFuture) Get(ctx workflow.Context) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRegexMatchSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListRegexMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRegexPatternSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListRegexPatternSetsFuture) Get(ctx workflow.Context) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRuleGroupsFuture struct {
	Future workflow.Future
}

func (r *WAFListRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListRulesFuture struct {
	Future workflow.Future
}

func (r *WAFListRulesFuture) Get(ctx workflow.Context) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSizeConstraintSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListSizeConstraintSetsFuture) Get(ctx workflow.Context) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSqlInjectionMatchSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListSqlInjectionMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListSubscribedRuleGroupsFuture struct {
	Future workflow.Future
}

func (r *WAFListSubscribedRuleGroupsFuture) Get(ctx workflow.Context) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *WAFListTagsForResourceFuture) Get(ctx workflow.Context) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListWebACLsFuture struct {
	Future workflow.Future
}

func (r *WAFListWebACLsFuture) Get(ctx workflow.Context) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFListXssMatchSetsFuture struct {
	Future workflow.Future
}

func (r *WAFListXssMatchSetsFuture) Get(ctx workflow.Context) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFPutLoggingConfigurationFuture struct {
	Future workflow.Future
}

func (r *WAFPutLoggingConfigurationFuture) Get(ctx workflow.Context) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFPutPermissionPolicyFuture struct {
	Future workflow.Future
}

func (r *WAFPutPermissionPolicyFuture) Get(ctx workflow.Context) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFTagResourceFuture struct {
	Future workflow.Future
}

func (r *WAFTagResourceFuture) Get(ctx workflow.Context) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUntagResourceFuture struct {
	Future workflow.Future
}

func (r *WAFUntagResourceFuture) Get(ctx workflow.Context) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateByteMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateByteMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateGeoMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateGeoMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateIPSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateIPSetFuture) Get(ctx workflow.Context) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRateBasedRuleFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateRateBasedRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRegexMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateRegexMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRegexPatternSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateRegexPatternSetFuture) Get(ctx workflow.Context) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRuleFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateRuleFuture) Get(ctx workflow.Context) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateRuleGroupFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateRuleGroupFuture) Get(ctx workflow.Context) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateSizeConstraintSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateSizeConstraintSetFuture) Get(ctx workflow.Context) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateSqlInjectionMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateSqlInjectionMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateWebACLFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateWebACLFuture) Get(ctx workflow.Context) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WAFUpdateXssMatchSetFuture struct {
	Future workflow.Future
}

func (r *WAFUpdateXssMatchSetFuture) Get(ctx workflow.Context) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateByteMatchSet(ctx workflow.Context, input *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	var output waf.CreateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateByteMatchSetAsync(ctx workflow.Context, input *waf.CreateByteMatchSetInput) *WAFCreateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateByteMatchSet", input)
	return &WAFCreateByteMatchSetFuture{Future: future}
}

func (a *WAFStub) CreateGeoMatchSet(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	var output waf.CreateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateGeoMatchSetAsync(ctx workflow.Context, input *waf.CreateGeoMatchSetInput) *WAFCreateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateGeoMatchSet", input)
	return &WAFCreateGeoMatchSetFuture{Future: future}
}

func (a *WAFStub) CreateIPSet(ctx workflow.Context, input *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	var output waf.CreateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateIPSetAsync(ctx workflow.Context, input *waf.CreateIPSetInput) *WAFCreateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateIPSet", input)
	return &WAFCreateIPSetFuture{Future: future}
}

func (a *WAFStub) CreateRateBasedRule(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	var output waf.CreateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateRateBasedRuleAsync(ctx workflow.Context, input *waf.CreateRateBasedRuleInput) *WAFCreateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateRateBasedRule", input)
	return &WAFCreateRateBasedRuleFuture{Future: future}
}

func (a *WAFStub) CreateRegexMatchSet(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	var output waf.CreateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateRegexMatchSetAsync(ctx workflow.Context, input *waf.CreateRegexMatchSetInput) *WAFCreateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateRegexMatchSet", input)
	return &WAFCreateRegexMatchSetFuture{Future: future}
}

func (a *WAFStub) CreateRegexPatternSet(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	var output waf.CreateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateRegexPatternSetAsync(ctx workflow.Context, input *waf.CreateRegexPatternSetInput) *WAFCreateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateRegexPatternSet", input)
	return &WAFCreateRegexPatternSetFuture{Future: future}
}

func (a *WAFStub) CreateRule(ctx workflow.Context, input *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	var output waf.CreateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateRuleAsync(ctx workflow.Context, input *waf.CreateRuleInput) *WAFCreateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateRule", input)
	return &WAFCreateRuleFuture{Future: future}
}

func (a *WAFStub) CreateRuleGroup(ctx workflow.Context, input *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	var output waf.CreateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateRuleGroupAsync(ctx workflow.Context, input *waf.CreateRuleGroupInput) *WAFCreateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateRuleGroup", input)
	return &WAFCreateRuleGroupFuture{Future: future}
}

func (a *WAFStub) CreateSizeConstraintSet(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	var output waf.CreateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateSizeConstraintSetAsync(ctx workflow.Context, input *waf.CreateSizeConstraintSetInput) *WAFCreateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateSizeConstraintSet", input)
	return &WAFCreateSizeConstraintSetFuture{Future: future}
}

func (a *WAFStub) CreateSqlInjectionMatchSet(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	var output waf.CreateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.CreateSqlInjectionMatchSetInput) *WAFCreateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateSqlInjectionMatchSet", input)
	return &WAFCreateSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFStub) CreateWebACL(ctx workflow.Context, input *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	var output waf.CreateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateWebACLAsync(ctx workflow.Context, input *waf.CreateWebACLInput) *WAFCreateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateWebACL", input)
	return &WAFCreateWebACLFuture{Future: future}
}

func (a *WAFStub) CreateWebACLMigrationStack(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	var output waf.CreateWebACLMigrationStackOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateWebACLMigrationStack", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateWebACLMigrationStackAsync(ctx workflow.Context, input *waf.CreateWebACLMigrationStackInput) *WAFCreateWebACLMigrationStackFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateWebACLMigrationStack", input)
	return &WAFCreateWebACLMigrationStackFuture{Future: future}
}

func (a *WAFStub) CreateXssMatchSet(ctx workflow.Context, input *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	var output waf.CreateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.CreateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) CreateXssMatchSetAsync(ctx workflow.Context, input *waf.CreateXssMatchSetInput) *WAFCreateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.CreateXssMatchSet", input)
	return &WAFCreateXssMatchSetFuture{Future: future}
}

func (a *WAFStub) DeleteByteMatchSet(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	var output waf.DeleteByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteByteMatchSetAsync(ctx workflow.Context, input *waf.DeleteByteMatchSetInput) *WAFDeleteByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteByteMatchSet", input)
	return &WAFDeleteByteMatchSetFuture{Future: future}
}

func (a *WAFStub) DeleteGeoMatchSet(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	var output waf.DeleteGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteGeoMatchSetAsync(ctx workflow.Context, input *waf.DeleteGeoMatchSetInput) *WAFDeleteGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteGeoMatchSet", input)
	return &WAFDeleteGeoMatchSetFuture{Future: future}
}

func (a *WAFStub) DeleteIPSet(ctx workflow.Context, input *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	var output waf.DeleteIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteIPSetAsync(ctx workflow.Context, input *waf.DeleteIPSetInput) *WAFDeleteIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteIPSet", input)
	return &WAFDeleteIPSetFuture{Future: future}
}

func (a *WAFStub) DeleteLoggingConfiguration(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	var output waf.DeleteLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteLoggingConfigurationAsync(ctx workflow.Context, input *waf.DeleteLoggingConfigurationInput) *WAFDeleteLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteLoggingConfiguration", input)
	return &WAFDeleteLoggingConfigurationFuture{Future: future}
}

func (a *WAFStub) DeletePermissionPolicy(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	var output waf.DeletePermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeletePermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeletePermissionPolicyAsync(ctx workflow.Context, input *waf.DeletePermissionPolicyInput) *WAFDeletePermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeletePermissionPolicy", input)
	return &WAFDeletePermissionPolicyFuture{Future: future}
}

func (a *WAFStub) DeleteRateBasedRule(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	var output waf.DeleteRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteRateBasedRuleAsync(ctx workflow.Context, input *waf.DeleteRateBasedRuleInput) *WAFDeleteRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRateBasedRule", input)
	return &WAFDeleteRateBasedRuleFuture{Future: future}
}

func (a *WAFStub) DeleteRegexMatchSet(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	var output waf.DeleteRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteRegexMatchSetAsync(ctx workflow.Context, input *waf.DeleteRegexMatchSetInput) *WAFDeleteRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRegexMatchSet", input)
	return &WAFDeleteRegexMatchSetFuture{Future: future}
}

func (a *WAFStub) DeleteRegexPatternSet(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	var output waf.DeleteRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteRegexPatternSetAsync(ctx workflow.Context, input *waf.DeleteRegexPatternSetInput) *WAFDeleteRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRegexPatternSet", input)
	return &WAFDeleteRegexPatternSetFuture{Future: future}
}

func (a *WAFStub) DeleteRule(ctx workflow.Context, input *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	var output waf.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteRuleAsync(ctx workflow.Context, input *waf.DeleteRuleInput) *WAFDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRule", input)
	return &WAFDeleteRuleFuture{Future: future}
}

func (a *WAFStub) DeleteRuleGroup(ctx workflow.Context, input *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	var output waf.DeleteRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteRuleGroupAsync(ctx workflow.Context, input *waf.DeleteRuleGroupInput) *WAFDeleteRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteRuleGroup", input)
	return &WAFDeleteRuleGroupFuture{Future: future}
}

func (a *WAFStub) DeleteSizeConstraintSet(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	var output waf.DeleteSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteSizeConstraintSetAsync(ctx workflow.Context, input *waf.DeleteSizeConstraintSetInput) *WAFDeleteSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteSizeConstraintSet", input)
	return &WAFDeleteSizeConstraintSetFuture{Future: future}
}

func (a *WAFStub) DeleteSqlInjectionMatchSet(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	var output waf.DeleteSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.DeleteSqlInjectionMatchSetInput) *WAFDeleteSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteSqlInjectionMatchSet", input)
	return &WAFDeleteSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFStub) DeleteWebACL(ctx workflow.Context, input *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	var output waf.DeleteWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteWebACLAsync(ctx workflow.Context, input *waf.DeleteWebACLInput) *WAFDeleteWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteWebACL", input)
	return &WAFDeleteWebACLFuture{Future: future}
}

func (a *WAFStub) DeleteXssMatchSet(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	var output waf.DeleteXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.DeleteXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) DeleteXssMatchSetAsync(ctx workflow.Context, input *waf.DeleteXssMatchSetInput) *WAFDeleteXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.DeleteXssMatchSet", input)
	return &WAFDeleteXssMatchSetFuture{Future: future}
}

func (a *WAFStub) GetByteMatchSet(ctx workflow.Context, input *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	var output waf.GetByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetByteMatchSetAsync(ctx workflow.Context, input *waf.GetByteMatchSetInput) *WAFGetByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetByteMatchSet", input)
	return &WAFGetByteMatchSetFuture{Future: future}
}

func (a *WAFStub) GetChangeToken(ctx workflow.Context, input *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	var output waf.GetChangeTokenOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetChangeToken", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetChangeTokenAsync(ctx workflow.Context, input *waf.GetChangeTokenInput) *WAFGetChangeTokenFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetChangeToken", input)
	return &WAFGetChangeTokenFuture{Future: future}
}

func (a *WAFStub) GetChangeTokenStatus(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	var output waf.GetChangeTokenStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetChangeTokenStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetChangeTokenStatusAsync(ctx workflow.Context, input *waf.GetChangeTokenStatusInput) *WAFGetChangeTokenStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetChangeTokenStatus", input)
	return &WAFGetChangeTokenStatusFuture{Future: future}
}

func (a *WAFStub) GetGeoMatchSet(ctx workflow.Context, input *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	var output waf.GetGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetGeoMatchSetAsync(ctx workflow.Context, input *waf.GetGeoMatchSetInput) *WAFGetGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetGeoMatchSet", input)
	return &WAFGetGeoMatchSetFuture{Future: future}
}

func (a *WAFStub) GetIPSet(ctx workflow.Context, input *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	var output waf.GetIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetIPSetAsync(ctx workflow.Context, input *waf.GetIPSetInput) *WAFGetIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetIPSet", input)
	return &WAFGetIPSetFuture{Future: future}
}

func (a *WAFStub) GetLoggingConfiguration(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	var output waf.GetLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetLoggingConfigurationAsync(ctx workflow.Context, input *waf.GetLoggingConfigurationInput) *WAFGetLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetLoggingConfiguration", input)
	return &WAFGetLoggingConfigurationFuture{Future: future}
}

func (a *WAFStub) GetPermissionPolicy(ctx workflow.Context, input *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	var output waf.GetPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetPermissionPolicyAsync(ctx workflow.Context, input *waf.GetPermissionPolicyInput) *WAFGetPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetPermissionPolicy", input)
	return &WAFGetPermissionPolicyFuture{Future: future}
}

func (a *WAFStub) GetRateBasedRule(ctx workflow.Context, input *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	var output waf.GetRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRateBasedRuleAsync(ctx workflow.Context, input *waf.GetRateBasedRuleInput) *WAFGetRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRateBasedRule", input)
	return &WAFGetRateBasedRuleFuture{Future: future}
}

func (a *WAFStub) GetRateBasedRuleManagedKeys(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	var output waf.GetRateBasedRuleManagedKeysOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRateBasedRuleManagedKeys", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRateBasedRuleManagedKeysAsync(ctx workflow.Context, input *waf.GetRateBasedRuleManagedKeysInput) *WAFGetRateBasedRuleManagedKeysFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRateBasedRuleManagedKeys", input)
	return &WAFGetRateBasedRuleManagedKeysFuture{Future: future}
}

func (a *WAFStub) GetRegexMatchSet(ctx workflow.Context, input *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	var output waf.GetRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRegexMatchSetAsync(ctx workflow.Context, input *waf.GetRegexMatchSetInput) *WAFGetRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRegexMatchSet", input)
	return &WAFGetRegexMatchSetFuture{Future: future}
}

func (a *WAFStub) GetRegexPatternSet(ctx workflow.Context, input *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	var output waf.GetRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRegexPatternSetAsync(ctx workflow.Context, input *waf.GetRegexPatternSetInput) *WAFGetRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRegexPatternSet", input)
	return &WAFGetRegexPatternSetFuture{Future: future}
}

func (a *WAFStub) GetRule(ctx workflow.Context, input *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	var output waf.GetRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRuleAsync(ctx workflow.Context, input *waf.GetRuleInput) *WAFGetRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRule", input)
	return &WAFGetRuleFuture{Future: future}
}

func (a *WAFStub) GetRuleGroup(ctx workflow.Context, input *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	var output waf.GetRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetRuleGroupAsync(ctx workflow.Context, input *waf.GetRuleGroupInput) *WAFGetRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetRuleGroup", input)
	return &WAFGetRuleGroupFuture{Future: future}
}

func (a *WAFStub) GetSampledRequests(ctx workflow.Context, input *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	var output waf.GetSampledRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetSampledRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetSampledRequestsAsync(ctx workflow.Context, input *waf.GetSampledRequestsInput) *WAFGetSampledRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetSampledRequests", input)
	return &WAFGetSampledRequestsFuture{Future: future}
}

func (a *WAFStub) GetSizeConstraintSet(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	var output waf.GetSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetSizeConstraintSetAsync(ctx workflow.Context, input *waf.GetSizeConstraintSetInput) *WAFGetSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetSizeConstraintSet", input)
	return &WAFGetSizeConstraintSetFuture{Future: future}
}

func (a *WAFStub) GetSqlInjectionMatchSet(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	var output waf.GetSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.GetSqlInjectionMatchSetInput) *WAFGetSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetSqlInjectionMatchSet", input)
	return &WAFGetSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFStub) GetWebACL(ctx workflow.Context, input *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	var output waf.GetWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetWebACLAsync(ctx workflow.Context, input *waf.GetWebACLInput) *WAFGetWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetWebACL", input)
	return &WAFGetWebACLFuture{Future: future}
}

func (a *WAFStub) GetXssMatchSet(ctx workflow.Context, input *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	var output waf.GetXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.GetXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) GetXssMatchSetAsync(ctx workflow.Context, input *waf.GetXssMatchSetInput) *WAFGetXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.GetXssMatchSet", input)
	return &WAFGetXssMatchSetFuture{Future: future}
}

func (a *WAFStub) ListActivatedRulesInRuleGroup(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	var output waf.ListActivatedRulesInRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListActivatedRulesInRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListActivatedRulesInRuleGroupAsync(ctx workflow.Context, input *waf.ListActivatedRulesInRuleGroupInput) *WAFListActivatedRulesInRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListActivatedRulesInRuleGroup", input)
	return &WAFListActivatedRulesInRuleGroupFuture{Future: future}
}

func (a *WAFStub) ListByteMatchSets(ctx workflow.Context, input *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	var output waf.ListByteMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListByteMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListByteMatchSetsAsync(ctx workflow.Context, input *waf.ListByteMatchSetsInput) *WAFListByteMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListByteMatchSets", input)
	return &WAFListByteMatchSetsFuture{Future: future}
}

func (a *WAFStub) ListGeoMatchSets(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	var output waf.ListGeoMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListGeoMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListGeoMatchSetsAsync(ctx workflow.Context, input *waf.ListGeoMatchSetsInput) *WAFListGeoMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListGeoMatchSets", input)
	return &WAFListGeoMatchSetsFuture{Future: future}
}

func (a *WAFStub) ListIPSets(ctx workflow.Context, input *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	var output waf.ListIPSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListIPSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListIPSetsAsync(ctx workflow.Context, input *waf.ListIPSetsInput) *WAFListIPSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListIPSets", input)
	return &WAFListIPSetsFuture{Future: future}
}

func (a *WAFStub) ListLoggingConfigurations(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	var output waf.ListLoggingConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListLoggingConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListLoggingConfigurationsAsync(ctx workflow.Context, input *waf.ListLoggingConfigurationsInput) *WAFListLoggingConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListLoggingConfigurations", input)
	return &WAFListLoggingConfigurationsFuture{Future: future}
}

func (a *WAFStub) ListRateBasedRules(ctx workflow.Context, input *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	var output waf.ListRateBasedRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListRateBasedRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListRateBasedRulesAsync(ctx workflow.Context, input *waf.ListRateBasedRulesInput) *WAFListRateBasedRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListRateBasedRules", input)
	return &WAFListRateBasedRulesFuture{Future: future}
}

func (a *WAFStub) ListRegexMatchSets(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	var output waf.ListRegexMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListRegexMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListRegexMatchSetsAsync(ctx workflow.Context, input *waf.ListRegexMatchSetsInput) *WAFListRegexMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListRegexMatchSets", input)
	return &WAFListRegexMatchSetsFuture{Future: future}
}

func (a *WAFStub) ListRegexPatternSets(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	var output waf.ListRegexPatternSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListRegexPatternSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListRegexPatternSetsAsync(ctx workflow.Context, input *waf.ListRegexPatternSetsInput) *WAFListRegexPatternSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListRegexPatternSets", input)
	return &WAFListRegexPatternSetsFuture{Future: future}
}

func (a *WAFStub) ListRuleGroups(ctx workflow.Context, input *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	var output waf.ListRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListRuleGroupsAsync(ctx workflow.Context, input *waf.ListRuleGroupsInput) *WAFListRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListRuleGroups", input)
	return &WAFListRuleGroupsFuture{Future: future}
}

func (a *WAFStub) ListRules(ctx workflow.Context, input *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	var output waf.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListRulesAsync(ctx workflow.Context, input *waf.ListRulesInput) *WAFListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListRules", input)
	return &WAFListRulesFuture{Future: future}
}

func (a *WAFStub) ListSizeConstraintSets(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	var output waf.ListSizeConstraintSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListSizeConstraintSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListSizeConstraintSetsAsync(ctx workflow.Context, input *waf.ListSizeConstraintSetsInput) *WAFListSizeConstraintSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListSizeConstraintSets", input)
	return &WAFListSizeConstraintSetsFuture{Future: future}
}

func (a *WAFStub) ListSqlInjectionMatchSets(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	var output waf.ListSqlInjectionMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListSqlInjectionMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListSqlInjectionMatchSetsAsync(ctx workflow.Context, input *waf.ListSqlInjectionMatchSetsInput) *WAFListSqlInjectionMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListSqlInjectionMatchSets", input)
	return &WAFListSqlInjectionMatchSetsFuture{Future: future}
}

func (a *WAFStub) ListSubscribedRuleGroups(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	var output waf.ListSubscribedRuleGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListSubscribedRuleGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListSubscribedRuleGroupsAsync(ctx workflow.Context, input *waf.ListSubscribedRuleGroupsInput) *WAFListSubscribedRuleGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListSubscribedRuleGroups", input)
	return &WAFListSubscribedRuleGroupsFuture{Future: future}
}

func (a *WAFStub) ListTagsForResource(ctx workflow.Context, input *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	var output waf.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListTagsForResourceAsync(ctx workflow.Context, input *waf.ListTagsForResourceInput) *WAFListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListTagsForResource", input)
	return &WAFListTagsForResourceFuture{Future: future}
}

func (a *WAFStub) ListWebACLs(ctx workflow.Context, input *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	var output waf.ListWebACLsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListWebACLs", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListWebACLsAsync(ctx workflow.Context, input *waf.ListWebACLsInput) *WAFListWebACLsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListWebACLs", input)
	return &WAFListWebACLsFuture{Future: future}
}

func (a *WAFStub) ListXssMatchSets(ctx workflow.Context, input *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	var output waf.ListXssMatchSetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.ListXssMatchSets", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) ListXssMatchSetsAsync(ctx workflow.Context, input *waf.ListXssMatchSetsInput) *WAFListXssMatchSetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.ListXssMatchSets", input)
	return &WAFListXssMatchSetsFuture{Future: future}
}

func (a *WAFStub) PutLoggingConfiguration(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	var output waf.PutLoggingConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.PutLoggingConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) PutLoggingConfigurationAsync(ctx workflow.Context, input *waf.PutLoggingConfigurationInput) *WAFPutLoggingConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.PutLoggingConfiguration", input)
	return &WAFPutLoggingConfigurationFuture{Future: future}
}

func (a *WAFStub) PutPermissionPolicy(ctx workflow.Context, input *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	var output waf.PutPermissionPolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.PutPermissionPolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) PutPermissionPolicyAsync(ctx workflow.Context, input *waf.PutPermissionPolicyInput) *WAFPutPermissionPolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.PutPermissionPolicy", input)
	return &WAFPutPermissionPolicyFuture{Future: future}
}

func (a *WAFStub) TagResource(ctx workflow.Context, input *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	var output waf.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) TagResourceAsync(ctx workflow.Context, input *waf.TagResourceInput) *WAFTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.TagResource", input)
	return &WAFTagResourceFuture{Future: future}
}

func (a *WAFStub) UntagResource(ctx workflow.Context, input *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	var output waf.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UntagResourceAsync(ctx workflow.Context, input *waf.UntagResourceInput) *WAFUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UntagResource", input)
	return &WAFUntagResourceFuture{Future: future}
}

func (a *WAFStub) UpdateByteMatchSet(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	var output waf.UpdateByteMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateByteMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateByteMatchSetAsync(ctx workflow.Context, input *waf.UpdateByteMatchSetInput) *WAFUpdateByteMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateByteMatchSet", input)
	return &WAFUpdateByteMatchSetFuture{Future: future}
}

func (a *WAFStub) UpdateGeoMatchSet(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	var output waf.UpdateGeoMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateGeoMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateGeoMatchSetAsync(ctx workflow.Context, input *waf.UpdateGeoMatchSetInput) *WAFUpdateGeoMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateGeoMatchSet", input)
	return &WAFUpdateGeoMatchSetFuture{Future: future}
}

func (a *WAFStub) UpdateIPSet(ctx workflow.Context, input *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	var output waf.UpdateIPSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateIPSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateIPSetAsync(ctx workflow.Context, input *waf.UpdateIPSetInput) *WAFUpdateIPSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateIPSet", input)
	return &WAFUpdateIPSetFuture{Future: future}
}

func (a *WAFStub) UpdateRateBasedRule(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	var output waf.UpdateRateBasedRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRateBasedRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateRateBasedRuleAsync(ctx workflow.Context, input *waf.UpdateRateBasedRuleInput) *WAFUpdateRateBasedRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRateBasedRule", input)
	return &WAFUpdateRateBasedRuleFuture{Future: future}
}

func (a *WAFStub) UpdateRegexMatchSet(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	var output waf.UpdateRegexMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRegexMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateRegexMatchSetAsync(ctx workflow.Context, input *waf.UpdateRegexMatchSetInput) *WAFUpdateRegexMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRegexMatchSet", input)
	return &WAFUpdateRegexMatchSetFuture{Future: future}
}

func (a *WAFStub) UpdateRegexPatternSet(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	var output waf.UpdateRegexPatternSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRegexPatternSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateRegexPatternSetAsync(ctx workflow.Context, input *waf.UpdateRegexPatternSetInput) *WAFUpdateRegexPatternSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRegexPatternSet", input)
	return &WAFUpdateRegexPatternSetFuture{Future: future}
}

func (a *WAFStub) UpdateRule(ctx workflow.Context, input *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	var output waf.UpdateRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRule", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateRuleAsync(ctx workflow.Context, input *waf.UpdateRuleInput) *WAFUpdateRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRule", input)
	return &WAFUpdateRuleFuture{Future: future}
}

func (a *WAFStub) UpdateRuleGroup(ctx workflow.Context, input *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	var output waf.UpdateRuleGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRuleGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateRuleGroupAsync(ctx workflow.Context, input *waf.UpdateRuleGroupInput) *WAFUpdateRuleGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateRuleGroup", input)
	return &WAFUpdateRuleGroupFuture{Future: future}
}

func (a *WAFStub) UpdateSizeConstraintSet(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	var output waf.UpdateSizeConstraintSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateSizeConstraintSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateSizeConstraintSetAsync(ctx workflow.Context, input *waf.UpdateSizeConstraintSetInput) *WAFUpdateSizeConstraintSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateSizeConstraintSet", input)
	return &WAFUpdateSizeConstraintSetFuture{Future: future}
}

func (a *WAFStub) UpdateSqlInjectionMatchSet(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	var output waf.UpdateSqlInjectionMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateSqlInjectionMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateSqlInjectionMatchSetAsync(ctx workflow.Context, input *waf.UpdateSqlInjectionMatchSetInput) *WAFUpdateSqlInjectionMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateSqlInjectionMatchSet", input)
	return &WAFUpdateSqlInjectionMatchSetFuture{Future: future}
}

func (a *WAFStub) UpdateWebACL(ctx workflow.Context, input *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	var output waf.UpdateWebACLOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateWebACL", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateWebACLAsync(ctx workflow.Context, input *waf.UpdateWebACLInput) *WAFUpdateWebACLFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateWebACL", input)
	return &WAFUpdateWebACLFuture{Future: future}
}

func (a *WAFStub) UpdateXssMatchSet(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	var output waf.UpdateXssMatchSetOutput
	err := workflow.ExecuteActivity(ctx, "aws.waf.UpdateXssMatchSet", input).Get(ctx, &output)
	return &output, err
}

func (a *WAFStub) UpdateXssMatchSetAsync(ctx workflow.Context, input *waf.UpdateXssMatchSetInput) *WAFUpdateXssMatchSetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.waf.UpdateXssMatchSet", input)
	return &WAFUpdateXssMatchSetFuture{Future: future}
}
