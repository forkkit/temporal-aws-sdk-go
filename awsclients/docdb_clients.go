// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/docdb"
	"go.temporal.io/sdk/workflow"
)

type DocDBClient interface {
	AddTagsToResource(ctx workflow.Context, input *docdb.AddTagsToResourceInput) (*docdb.AddTagsToResourceOutput, error)
	AddTagsToResourceAsync(ctx workflow.Context, input *docdb.AddTagsToResourceInput) *DocdbAddTagsToResourceFuture

	ApplyPendingMaintenanceAction(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) (*docdb.ApplyPendingMaintenanceActionOutput, error)
	ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) *DocdbApplyPendingMaintenanceActionFuture

	CopyDBClusterParameterGroup(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) (*docdb.CopyDBClusterParameterGroupOutput, error)
	CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) *DocdbCopyDBClusterParameterGroupFuture

	CopyDBClusterSnapshot(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) (*docdb.CopyDBClusterSnapshotOutput, error)
	CopyDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) *DocdbCopyDBClusterSnapshotFuture

	CreateDBCluster(ctx workflow.Context, input *docdb.CreateDBClusterInput) (*docdb.CreateDBClusterOutput, error)
	CreateDBClusterAsync(ctx workflow.Context, input *docdb.CreateDBClusterInput) *DocdbCreateDBClusterFuture

	CreateDBClusterParameterGroup(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) (*docdb.CreateDBClusterParameterGroupOutput, error)
	CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) *DocdbCreateDBClusterParameterGroupFuture

	CreateDBClusterSnapshot(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) (*docdb.CreateDBClusterSnapshotOutput, error)
	CreateDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) *DocdbCreateDBClusterSnapshotFuture

	CreateDBInstance(ctx workflow.Context, input *docdb.CreateDBInstanceInput) (*docdb.CreateDBInstanceOutput, error)
	CreateDBInstanceAsync(ctx workflow.Context, input *docdb.CreateDBInstanceInput) *DocdbCreateDBInstanceFuture

	CreateDBSubnetGroup(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) (*docdb.CreateDBSubnetGroupOutput, error)
	CreateDBSubnetGroupAsync(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) *DocdbCreateDBSubnetGroupFuture

	DeleteDBCluster(ctx workflow.Context, input *docdb.DeleteDBClusterInput) (*docdb.DeleteDBClusterOutput, error)
	DeleteDBClusterAsync(ctx workflow.Context, input *docdb.DeleteDBClusterInput) *DocdbDeleteDBClusterFuture

	DeleteDBClusterParameterGroup(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) (*docdb.DeleteDBClusterParameterGroupOutput, error)
	DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) *DocdbDeleteDBClusterParameterGroupFuture

	DeleteDBClusterSnapshot(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) (*docdb.DeleteDBClusterSnapshotOutput, error)
	DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) *DocdbDeleteDBClusterSnapshotFuture

	DeleteDBInstance(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) (*docdb.DeleteDBInstanceOutput, error)
	DeleteDBInstanceAsync(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) *DocdbDeleteDBInstanceFuture

	DeleteDBSubnetGroup(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) (*docdb.DeleteDBSubnetGroupOutput, error)
	DeleteDBSubnetGroupAsync(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) *DocdbDeleteDBSubnetGroupFuture

	DescribeCertificates(ctx workflow.Context, input *docdb.DescribeCertificatesInput) (*docdb.DescribeCertificatesOutput, error)
	DescribeCertificatesAsync(ctx workflow.Context, input *docdb.DescribeCertificatesInput) *DocdbDescribeCertificatesFuture

	DescribeDBClusterParameterGroups(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) (*docdb.DescribeDBClusterParameterGroupsOutput, error)
	DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) *DocdbDescribeDBClusterParameterGroupsFuture

	DescribeDBClusterParameters(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) (*docdb.DescribeDBClusterParametersOutput, error)
	DescribeDBClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) *DocdbDescribeDBClusterParametersFuture

	DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error)
	DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) *DocdbDescribeDBClusterSnapshotAttributesFuture

	DescribeDBClusterSnapshots(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) (*docdb.DescribeDBClusterSnapshotsOutput, error)
	DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) *DocdbDescribeDBClusterSnapshotsFuture

	DescribeDBClusters(ctx workflow.Context, input *docdb.DescribeDBClustersInput) (*docdb.DescribeDBClustersOutput, error)
	DescribeDBClustersAsync(ctx workflow.Context, input *docdb.DescribeDBClustersInput) *DocdbDescribeDBClustersFuture

	DescribeDBEngineVersions(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) (*docdb.DescribeDBEngineVersionsOutput, error)
	DescribeDBEngineVersionsAsync(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) *DocdbDescribeDBEngineVersionsFuture

	DescribeDBInstances(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) (*docdb.DescribeDBInstancesOutput, error)
	DescribeDBInstancesAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *DocdbDescribeDBInstancesFuture

	DescribeDBSubnetGroups(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) (*docdb.DescribeDBSubnetGroupsOutput, error)
	DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) *DocdbDescribeDBSubnetGroupsFuture

	DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) (*docdb.DescribeEngineDefaultClusterParametersOutput, error)
	DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) *DocdbDescribeEngineDefaultClusterParametersFuture

	DescribeEventCategories(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) (*docdb.DescribeEventCategoriesOutput, error)
	DescribeEventCategoriesAsync(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) *DocdbDescribeEventCategoriesFuture

	DescribeEvents(ctx workflow.Context, input *docdb.DescribeEventsInput) (*docdb.DescribeEventsOutput, error)
	DescribeEventsAsync(ctx workflow.Context, input *docdb.DescribeEventsInput) *DocdbDescribeEventsFuture

	DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error)
	DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) *DocdbDescribeOrderableDBInstanceOptionsFuture

	DescribePendingMaintenanceActions(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) (*docdb.DescribePendingMaintenanceActionsOutput, error)
	DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) *DocdbDescribePendingMaintenanceActionsFuture

	FailoverDBCluster(ctx workflow.Context, input *docdb.FailoverDBClusterInput) (*docdb.FailoverDBClusterOutput, error)
	FailoverDBClusterAsync(ctx workflow.Context, input *docdb.FailoverDBClusterInput) *DocdbFailoverDBClusterFuture

	ListTagsForResource(ctx workflow.Context, input *docdb.ListTagsForResourceInput) (*docdb.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *docdb.ListTagsForResourceInput) *DocdbListTagsForResourceFuture

	ModifyDBCluster(ctx workflow.Context, input *docdb.ModifyDBClusterInput) (*docdb.ModifyDBClusterOutput, error)
	ModifyDBClusterAsync(ctx workflow.Context, input *docdb.ModifyDBClusterInput) *DocdbModifyDBClusterFuture

	ModifyDBClusterParameterGroup(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) (*docdb.ModifyDBClusterParameterGroupOutput, error)
	ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) *DocdbModifyDBClusterParameterGroupFuture

	ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error)
	ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) *DocdbModifyDBClusterSnapshotAttributeFuture

	ModifyDBInstance(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) (*docdb.ModifyDBInstanceOutput, error)
	ModifyDBInstanceAsync(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) *DocdbModifyDBInstanceFuture

	ModifyDBSubnetGroup(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) (*docdb.ModifyDBSubnetGroupOutput, error)
	ModifyDBSubnetGroupAsync(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) *DocdbModifyDBSubnetGroupFuture

	RebootDBInstance(ctx workflow.Context, input *docdb.RebootDBInstanceInput) (*docdb.RebootDBInstanceOutput, error)
	RebootDBInstanceAsync(ctx workflow.Context, input *docdb.RebootDBInstanceInput) *DocdbRebootDBInstanceFuture

	RemoveTagsFromResource(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) (*docdb.RemoveTagsFromResourceOutput, error)
	RemoveTagsFromResourceAsync(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) *DocdbRemoveTagsFromResourceFuture

	ResetDBClusterParameterGroup(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) (*docdb.ResetDBClusterParameterGroupOutput, error)
	ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) *DocdbResetDBClusterParameterGroupFuture

	RestoreDBClusterFromSnapshot(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) (*docdb.RestoreDBClusterFromSnapshotOutput, error)
	RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) *DocdbRestoreDBClusterFromSnapshotFuture

	RestoreDBClusterToPointInTime(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) (*docdb.RestoreDBClusterToPointInTimeOutput, error)
	RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) *DocdbRestoreDBClusterToPointInTimeFuture

	StartDBCluster(ctx workflow.Context, input *docdb.StartDBClusterInput) (*docdb.StartDBClusterOutput, error)
	StartDBClusterAsync(ctx workflow.Context, input *docdb.StartDBClusterInput) *DocdbStartDBClusterFuture

	StopDBCluster(ctx workflow.Context, input *docdb.StopDBClusterInput) (*docdb.StopDBClusterOutput, error)
	StopDBClusterAsync(ctx workflow.Context, input *docdb.StopDBClusterInput) *DocdbStopDBClusterFuture

	WaitUntilDBInstanceAvailable(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error
	WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *VoidFuture

	WaitUntilDBInstanceDeleted(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error
	WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *VoidFuture
}

type DocDBStub struct{}

func NewDocDBStub() DocDBClient {
	return &DocDBStub{}
}

type DocdbAddTagsToResourceFuture struct {
	Future workflow.Future
}

func (r *DocdbAddTagsToResourceFuture) Get(ctx workflow.Context) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbApplyPendingMaintenanceActionFuture struct {
	Future workflow.Future
}

func (r *DocdbApplyPendingMaintenanceActionFuture) Get(ctx workflow.Context) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCopyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbCopyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCopyDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *DocdbCopyDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCreateDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbCreateDBClusterFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCreateDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbCreateDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCreateDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *DocdbCreateDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCreateDBInstanceFuture struct {
	Future workflow.Future
}

func (r *DocdbCreateDBInstanceFuture) Get(ctx workflow.Context) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbCreateDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbCreateDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDeleteDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbDeleteDBClusterFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDeleteDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbDeleteDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDeleteDBClusterSnapshotFuture struct {
	Future workflow.Future
}

func (r *DocdbDeleteDBClusterSnapshotFuture) Get(ctx workflow.Context) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDeleteDBInstanceFuture struct {
	Future workflow.Future
}

func (r *DocdbDeleteDBInstanceFuture) Get(ctx workflow.Context) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDeleteDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbDeleteDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeCertificatesFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeCertificatesFuture) Get(ctx workflow.Context) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBClusterParameterGroupsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBClusterParameterGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBClusterParametersFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBClusterSnapshotAttributesFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBClusterSnapshotAttributesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBClusterSnapshotsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBClusterSnapshotsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBClustersFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBClustersFuture) Get(ctx workflow.Context) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBEngineVersionsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBEngineVersionsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBInstancesFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBInstancesFuture) Get(ctx workflow.Context) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeDBSubnetGroupsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeDBSubnetGroupsFuture) Get(ctx workflow.Context) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeEngineDefaultClusterParametersFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeEngineDefaultClusterParametersFuture) Get(ctx workflow.Context) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeEventCategoriesFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeEventCategoriesFuture) Get(ctx workflow.Context) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeEventsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeEventsFuture) Get(ctx workflow.Context) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribeOrderableDBInstanceOptionsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribeOrderableDBInstanceOptionsFuture) Get(ctx workflow.Context) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbDescribePendingMaintenanceActionsFuture struct {
	Future workflow.Future
}

func (r *DocdbDescribePendingMaintenanceActionsFuture) Get(ctx workflow.Context) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbFailoverDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbFailoverDBClusterFuture) Get(ctx workflow.Context) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *DocdbListTagsForResourceFuture) Get(ctx workflow.Context) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbModifyDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbModifyDBClusterFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbModifyDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbModifyDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbModifyDBClusterSnapshotAttributeFuture struct {
	Future workflow.Future
}

func (r *DocdbModifyDBClusterSnapshotAttributeFuture) Get(ctx workflow.Context) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbModifyDBInstanceFuture struct {
	Future workflow.Future
}

func (r *DocdbModifyDBInstanceFuture) Get(ctx workflow.Context) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbModifyDBSubnetGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbModifyDBSubnetGroupFuture) Get(ctx workflow.Context) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbRebootDBInstanceFuture struct {
	Future workflow.Future
}

func (r *DocdbRebootDBInstanceFuture) Get(ctx workflow.Context) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbRemoveTagsFromResourceFuture struct {
	Future workflow.Future
}

func (r *DocdbRemoveTagsFromResourceFuture) Get(ctx workflow.Context) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbResetDBClusterParameterGroupFuture struct {
	Future workflow.Future
}

func (r *DocdbResetDBClusterParameterGroupFuture) Get(ctx workflow.Context) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbRestoreDBClusterFromSnapshotFuture struct {
	Future workflow.Future
}

func (r *DocdbRestoreDBClusterFromSnapshotFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbRestoreDBClusterToPointInTimeFuture struct {
	Future workflow.Future
}

func (r *DocdbRestoreDBClusterToPointInTimeFuture) Get(ctx workflow.Context) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbStartDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbStartDBClusterFuture) Get(ctx workflow.Context) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DocdbStopDBClusterFuture struct {
	Future workflow.Future
}

func (r *DocdbStopDBClusterFuture) Get(ctx workflow.Context) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) AddTagsToResource(ctx workflow.Context, input *docdb.AddTagsToResourceInput) (*docdb.AddTagsToResourceOutput, error) {
	var output docdb.AddTagsToResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.AddTagsToResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) AddTagsToResourceAsync(ctx workflow.Context, input *docdb.AddTagsToResourceInput) *DocdbAddTagsToResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.AddTagsToResource", input)
	return &DocdbAddTagsToResourceFuture{Future: future}
}

func (a *DocDBStub) ApplyPendingMaintenanceAction(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	var output docdb.ApplyPendingMaintenanceActionOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ApplyPendingMaintenanceAction", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ApplyPendingMaintenanceActionAsync(ctx workflow.Context, input *docdb.ApplyPendingMaintenanceActionInput) *DocdbApplyPendingMaintenanceActionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ApplyPendingMaintenanceAction", input)
	return &DocdbApplyPendingMaintenanceActionFuture{Future: future}
}

func (a *DocDBStub) CopyDBClusterParameterGroup(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	var output docdb.CopyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CopyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CopyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CopyDBClusterParameterGroupInput) *DocdbCopyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CopyDBClusterParameterGroup", input)
	return &DocdbCopyDBClusterParameterGroupFuture{Future: future}
}

func (a *DocDBStub) CopyDBClusterSnapshot(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) (*docdb.CopyDBClusterSnapshotOutput, error) {
	var output docdb.CopyDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CopyDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CopyDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CopyDBClusterSnapshotInput) *DocdbCopyDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CopyDBClusterSnapshot", input)
	return &DocdbCopyDBClusterSnapshotFuture{Future: future}
}

func (a *DocDBStub) CreateDBCluster(ctx workflow.Context, input *docdb.CreateDBClusterInput) (*docdb.CreateDBClusterOutput, error) {
	var output docdb.CreateDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CreateDBClusterAsync(ctx workflow.Context, input *docdb.CreateDBClusterInput) *DocdbCreateDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBCluster", input)
	return &DocdbCreateDBClusterFuture{Future: future}
}

func (a *DocDBStub) CreateDBClusterParameterGroup(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	var output docdb.CreateDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CreateDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.CreateDBClusterParameterGroupInput) *DocdbCreateDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBClusterParameterGroup", input)
	return &DocdbCreateDBClusterParameterGroupFuture{Future: future}
}

func (a *DocDBStub) CreateDBClusterSnapshot(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) (*docdb.CreateDBClusterSnapshotOutput, error) {
	var output docdb.CreateDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CreateDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.CreateDBClusterSnapshotInput) *DocdbCreateDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBClusterSnapshot", input)
	return &DocdbCreateDBClusterSnapshotFuture{Future: future}
}

func (a *DocDBStub) CreateDBInstance(ctx workflow.Context, input *docdb.CreateDBInstanceInput) (*docdb.CreateDBInstanceOutput, error) {
	var output docdb.CreateDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CreateDBInstanceAsync(ctx workflow.Context, input *docdb.CreateDBInstanceInput) *DocdbCreateDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBInstance", input)
	return &DocdbCreateDBInstanceFuture{Future: future}
}

func (a *DocDBStub) CreateDBSubnetGroup(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) (*docdb.CreateDBSubnetGroupOutput, error) {
	var output docdb.CreateDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) CreateDBSubnetGroupAsync(ctx workflow.Context, input *docdb.CreateDBSubnetGroupInput) *DocdbCreateDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.CreateDBSubnetGroup", input)
	return &DocdbCreateDBSubnetGroupFuture{Future: future}
}

func (a *DocDBStub) DeleteDBCluster(ctx workflow.Context, input *docdb.DeleteDBClusterInput) (*docdb.DeleteDBClusterOutput, error) {
	var output docdb.DeleteDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DeleteDBClusterAsync(ctx workflow.Context, input *docdb.DeleteDBClusterInput) *DocdbDeleteDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBCluster", input)
	return &DocdbDeleteDBClusterFuture{Future: future}
}

func (a *DocDBStub) DeleteDBClusterParameterGroup(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	var output docdb.DeleteDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DeleteDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.DeleteDBClusterParameterGroupInput) *DocdbDeleteDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBClusterParameterGroup", input)
	return &DocdbDeleteDBClusterParameterGroupFuture{Future: future}
}

func (a *DocDBStub) DeleteDBClusterSnapshot(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	var output docdb.DeleteDBClusterSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBClusterSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DeleteDBClusterSnapshotAsync(ctx workflow.Context, input *docdb.DeleteDBClusterSnapshotInput) *DocdbDeleteDBClusterSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBClusterSnapshot", input)
	return &DocdbDeleteDBClusterSnapshotFuture{Future: future}
}

func (a *DocDBStub) DeleteDBInstance(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) (*docdb.DeleteDBInstanceOutput, error) {
	var output docdb.DeleteDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DeleteDBInstanceAsync(ctx workflow.Context, input *docdb.DeleteDBInstanceInput) *DocdbDeleteDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBInstance", input)
	return &DocdbDeleteDBInstanceFuture{Future: future}
}

func (a *DocDBStub) DeleteDBSubnetGroup(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) (*docdb.DeleteDBSubnetGroupOutput, error) {
	var output docdb.DeleteDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DeleteDBSubnetGroupAsync(ctx workflow.Context, input *docdb.DeleteDBSubnetGroupInput) *DocdbDeleteDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DeleteDBSubnetGroup", input)
	return &DocdbDeleteDBSubnetGroupFuture{Future: future}
}

func (a *DocDBStub) DescribeCertificates(ctx workflow.Context, input *docdb.DescribeCertificatesInput) (*docdb.DescribeCertificatesOutput, error) {
	var output docdb.DescribeCertificatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeCertificates", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeCertificatesAsync(ctx workflow.Context, input *docdb.DescribeCertificatesInput) *DocdbDescribeCertificatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeCertificates", input)
	return &DocdbDescribeCertificatesFuture{Future: future}
}

func (a *DocDBStub) DescribeDBClusterParameterGroups(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	var output docdb.DescribeDBClusterParameterGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterParameterGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBClusterParameterGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParameterGroupsInput) *DocdbDescribeDBClusterParameterGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterParameterGroups", input)
	return &DocdbDescribeDBClusterParameterGroupsFuture{Future: future}
}

func (a *DocDBStub) DescribeDBClusterParameters(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) (*docdb.DescribeDBClusterParametersOutput, error) {
	var output docdb.DescribeDBClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeDBClusterParametersInput) *DocdbDescribeDBClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterParameters", input)
	return &DocdbDescribeDBClusterParametersFuture{Future: future}
}

func (a *DocDBStub) DescribeDBClusterSnapshotAttributes(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	var output docdb.DescribeDBClusterSnapshotAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterSnapshotAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBClusterSnapshotAttributesAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotAttributesInput) *DocdbDescribeDBClusterSnapshotAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterSnapshotAttributes", input)
	return &DocdbDescribeDBClusterSnapshotAttributesFuture{Future: future}
}

func (a *DocDBStub) DescribeDBClusterSnapshots(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	var output docdb.DescribeDBClusterSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBClusterSnapshotsAsync(ctx workflow.Context, input *docdb.DescribeDBClusterSnapshotsInput) *DocdbDescribeDBClusterSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusterSnapshots", input)
	return &DocdbDescribeDBClusterSnapshotsFuture{Future: future}
}

func (a *DocDBStub) DescribeDBClusters(ctx workflow.Context, input *docdb.DescribeDBClustersInput) (*docdb.DescribeDBClustersOutput, error) {
	var output docdb.DescribeDBClustersOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusters", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBClustersAsync(ctx workflow.Context, input *docdb.DescribeDBClustersInput) *DocdbDescribeDBClustersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBClusters", input)
	return &DocdbDescribeDBClustersFuture{Future: future}
}

func (a *DocDBStub) DescribeDBEngineVersions(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) (*docdb.DescribeDBEngineVersionsOutput, error) {
	var output docdb.DescribeDBEngineVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBEngineVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBEngineVersionsAsync(ctx workflow.Context, input *docdb.DescribeDBEngineVersionsInput) *DocdbDescribeDBEngineVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBEngineVersions", input)
	return &DocdbDescribeDBEngineVersionsFuture{Future: future}
}

func (a *DocDBStub) DescribeDBInstances(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) (*docdb.DescribeDBInstancesOutput, error) {
	var output docdb.DescribeDBInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBInstancesAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *DocdbDescribeDBInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBInstances", input)
	return &DocdbDescribeDBInstancesFuture{Future: future}
}

func (a *DocDBStub) DescribeDBSubnetGroups(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	var output docdb.DescribeDBSubnetGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBSubnetGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeDBSubnetGroupsAsync(ctx workflow.Context, input *docdb.DescribeDBSubnetGroupsInput) *DocdbDescribeDBSubnetGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeDBSubnetGroups", input)
	return &DocdbDescribeDBSubnetGroupsFuture{Future: future}
}

func (a *DocDBStub) DescribeEngineDefaultClusterParameters(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	var output docdb.DescribeEngineDefaultClusterParametersOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEngineDefaultClusterParameters", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeEngineDefaultClusterParametersAsync(ctx workflow.Context, input *docdb.DescribeEngineDefaultClusterParametersInput) *DocdbDescribeEngineDefaultClusterParametersFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEngineDefaultClusterParameters", input)
	return &DocdbDescribeEngineDefaultClusterParametersFuture{Future: future}
}

func (a *DocDBStub) DescribeEventCategories(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) (*docdb.DescribeEventCategoriesOutput, error) {
	var output docdb.DescribeEventCategoriesOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEventCategories", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeEventCategoriesAsync(ctx workflow.Context, input *docdb.DescribeEventCategoriesInput) *DocdbDescribeEventCategoriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEventCategories", input)
	return &DocdbDescribeEventCategoriesFuture{Future: future}
}

func (a *DocDBStub) DescribeEvents(ctx workflow.Context, input *docdb.DescribeEventsInput) (*docdb.DescribeEventsOutput, error) {
	var output docdb.DescribeEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeEventsAsync(ctx workflow.Context, input *docdb.DescribeEventsInput) *DocdbDescribeEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeEvents", input)
	return &DocdbDescribeEventsFuture{Future: future}
}

func (a *DocDBStub) DescribeOrderableDBInstanceOptions(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	var output docdb.DescribeOrderableDBInstanceOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeOrderableDBInstanceOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribeOrderableDBInstanceOptionsAsync(ctx workflow.Context, input *docdb.DescribeOrderableDBInstanceOptionsInput) *DocdbDescribeOrderableDBInstanceOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribeOrderableDBInstanceOptions", input)
	return &DocdbDescribeOrderableDBInstanceOptionsFuture{Future: future}
}

func (a *DocDBStub) DescribePendingMaintenanceActions(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	var output docdb.DescribePendingMaintenanceActionsOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.DescribePendingMaintenanceActions", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) DescribePendingMaintenanceActionsAsync(ctx workflow.Context, input *docdb.DescribePendingMaintenanceActionsInput) *DocdbDescribePendingMaintenanceActionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.DescribePendingMaintenanceActions", input)
	return &DocdbDescribePendingMaintenanceActionsFuture{Future: future}
}

func (a *DocDBStub) FailoverDBCluster(ctx workflow.Context, input *docdb.FailoverDBClusterInput) (*docdb.FailoverDBClusterOutput, error) {
	var output docdb.FailoverDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.FailoverDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) FailoverDBClusterAsync(ctx workflow.Context, input *docdb.FailoverDBClusterInput) *DocdbFailoverDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.FailoverDBCluster", input)
	return &DocdbFailoverDBClusterFuture{Future: future}
}

func (a *DocDBStub) ListTagsForResource(ctx workflow.Context, input *docdb.ListTagsForResourceInput) (*docdb.ListTagsForResourceOutput, error) {
	var output docdb.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ListTagsForResourceAsync(ctx workflow.Context, input *docdb.ListTagsForResourceInput) *DocdbListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ListTagsForResource", input)
	return &DocdbListTagsForResourceFuture{Future: future}
}

func (a *DocDBStub) ModifyDBCluster(ctx workflow.Context, input *docdb.ModifyDBClusterInput) (*docdb.ModifyDBClusterOutput, error) {
	var output docdb.ModifyDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ModifyDBClusterAsync(ctx workflow.Context, input *docdb.ModifyDBClusterInput) *DocdbModifyDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBCluster", input)
	return &DocdbModifyDBClusterFuture{Future: future}
}

func (a *DocDBStub) ModifyDBClusterParameterGroup(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	var output docdb.ModifyDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ModifyDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ModifyDBClusterParameterGroupInput) *DocdbModifyDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBClusterParameterGroup", input)
	return &DocdbModifyDBClusterParameterGroupFuture{Future: future}
}

func (a *DocDBStub) ModifyDBClusterSnapshotAttribute(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	var output docdb.ModifyDBClusterSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBClusterSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ModifyDBClusterSnapshotAttributeAsync(ctx workflow.Context, input *docdb.ModifyDBClusterSnapshotAttributeInput) *DocdbModifyDBClusterSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBClusterSnapshotAttribute", input)
	return &DocdbModifyDBClusterSnapshotAttributeFuture{Future: future}
}

func (a *DocDBStub) ModifyDBInstance(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) (*docdb.ModifyDBInstanceOutput, error) {
	var output docdb.ModifyDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ModifyDBInstanceAsync(ctx workflow.Context, input *docdb.ModifyDBInstanceInput) *DocdbModifyDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBInstance", input)
	return &DocdbModifyDBInstanceFuture{Future: future}
}

func (a *DocDBStub) ModifyDBSubnetGroup(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) (*docdb.ModifyDBSubnetGroupOutput, error) {
	var output docdb.ModifyDBSubnetGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBSubnetGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ModifyDBSubnetGroupAsync(ctx workflow.Context, input *docdb.ModifyDBSubnetGroupInput) *DocdbModifyDBSubnetGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ModifyDBSubnetGroup", input)
	return &DocdbModifyDBSubnetGroupFuture{Future: future}
}

func (a *DocDBStub) RebootDBInstance(ctx workflow.Context, input *docdb.RebootDBInstanceInput) (*docdb.RebootDBInstanceOutput, error) {
	var output docdb.RebootDBInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.RebootDBInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) RebootDBInstanceAsync(ctx workflow.Context, input *docdb.RebootDBInstanceInput) *DocdbRebootDBInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.RebootDBInstance", input)
	return &DocdbRebootDBInstanceFuture{Future: future}
}

func (a *DocDBStub) RemoveTagsFromResource(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) (*docdb.RemoveTagsFromResourceOutput, error) {
	var output docdb.RemoveTagsFromResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.RemoveTagsFromResource", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) RemoveTagsFromResourceAsync(ctx workflow.Context, input *docdb.RemoveTagsFromResourceInput) *DocdbRemoveTagsFromResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.RemoveTagsFromResource", input)
	return &DocdbRemoveTagsFromResourceFuture{Future: future}
}

func (a *DocDBStub) ResetDBClusterParameterGroup(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	var output docdb.ResetDBClusterParameterGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.ResetDBClusterParameterGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) ResetDBClusterParameterGroupAsync(ctx workflow.Context, input *docdb.ResetDBClusterParameterGroupInput) *DocdbResetDBClusterParameterGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.ResetDBClusterParameterGroup", input)
	return &DocdbResetDBClusterParameterGroupFuture{Future: future}
}

func (a *DocDBStub) RestoreDBClusterFromSnapshot(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	var output docdb.RestoreDBClusterFromSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.RestoreDBClusterFromSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) RestoreDBClusterFromSnapshotAsync(ctx workflow.Context, input *docdb.RestoreDBClusterFromSnapshotInput) *DocdbRestoreDBClusterFromSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.RestoreDBClusterFromSnapshot", input)
	return &DocdbRestoreDBClusterFromSnapshotFuture{Future: future}
}

func (a *DocDBStub) RestoreDBClusterToPointInTime(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	var output docdb.RestoreDBClusterToPointInTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.RestoreDBClusterToPointInTime", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) RestoreDBClusterToPointInTimeAsync(ctx workflow.Context, input *docdb.RestoreDBClusterToPointInTimeInput) *DocdbRestoreDBClusterToPointInTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.RestoreDBClusterToPointInTime", input)
	return &DocdbRestoreDBClusterToPointInTimeFuture{Future: future}
}

func (a *DocDBStub) StartDBCluster(ctx workflow.Context, input *docdb.StartDBClusterInput) (*docdb.StartDBClusterOutput, error) {
	var output docdb.StartDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.StartDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) StartDBClusterAsync(ctx workflow.Context, input *docdb.StartDBClusterInput) *DocdbStartDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.StartDBCluster", input)
	return &DocdbStartDBClusterFuture{Future: future}
}

func (a *DocDBStub) StopDBCluster(ctx workflow.Context, input *docdb.StopDBClusterInput) (*docdb.StopDBClusterOutput, error) {
	var output docdb.StopDBClusterOutput
	err := workflow.ExecuteActivity(ctx, "aws.docdb.StopDBCluster", input).Get(ctx, &output)
	return &output, err
}

func (a *DocDBStub) StopDBClusterAsync(ctx workflow.Context, input *docdb.StopDBClusterInput) *DocdbStopDBClusterFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.StopDBCluster", input)
	return &DocdbStopDBClusterFuture{Future: future}
}

func (a *DocDBStub) WaitUntilDBInstanceAvailable(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.docdb.WaitUntilDBInstanceAvailable", input).Get(ctx, nil)
}

func (a *DocDBStub) WaitUntilDBInstanceAvailableAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.WaitUntilDBInstanceAvailable", input)
	return NewVoidFuture(future)
}

func (a *DocDBStub) WaitUntilDBInstanceDeleted(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws.docdb.WaitUntilDBInstanceDeleted", input).Get(ctx, nil)
}

func (a *DocDBStub) WaitUntilDBInstanceDeletedAsync(ctx workflow.Context, input *docdb.DescribeDBInstancesInput) *VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws.docdb.WaitUntilDBInstanceDeleted", input)
	return NewVoidFuture(future)
}
