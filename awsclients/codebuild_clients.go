// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/codebuild"
	"go.temporal.io/sdk/workflow"
)

type CodeBuildClient interface {
	BatchDeleteBuilds(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error)
	BatchDeleteBuildsAsync(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) *CodebuildBatchDeleteBuildsFuture

	BatchGetBuildBatches(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) (*codebuild.BatchGetBuildBatchesOutput, error)
	BatchGetBuildBatchesAsync(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) *CodebuildBatchGetBuildBatchesFuture

	BatchGetBuilds(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error)
	BatchGetBuildsAsync(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) *CodebuildBatchGetBuildsFuture

	BatchGetProjects(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error)
	BatchGetProjectsAsync(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) *CodebuildBatchGetProjectsFuture

	BatchGetReportGroups(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) (*codebuild.BatchGetReportGroupsOutput, error)
	BatchGetReportGroupsAsync(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) *CodebuildBatchGetReportGroupsFuture

	BatchGetReports(ctx workflow.Context, input *codebuild.BatchGetReportsInput) (*codebuild.BatchGetReportsOutput, error)
	BatchGetReportsAsync(ctx workflow.Context, input *codebuild.BatchGetReportsInput) *CodebuildBatchGetReportsFuture

	CreateProject(ctx workflow.Context, input *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error)
	CreateProjectAsync(ctx workflow.Context, input *codebuild.CreateProjectInput) *CodebuildCreateProjectFuture

	CreateReportGroup(ctx workflow.Context, input *codebuild.CreateReportGroupInput) (*codebuild.CreateReportGroupOutput, error)
	CreateReportGroupAsync(ctx workflow.Context, input *codebuild.CreateReportGroupInput) *CodebuildCreateReportGroupFuture

	CreateWebhook(ctx workflow.Context, input *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error)
	CreateWebhookAsync(ctx workflow.Context, input *codebuild.CreateWebhookInput) *CodebuildCreateWebhookFuture

	DeleteBuildBatch(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) (*codebuild.DeleteBuildBatchOutput, error)
	DeleteBuildBatchAsync(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) *CodebuildDeleteBuildBatchFuture

	DeleteProject(ctx workflow.Context, input *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error)
	DeleteProjectAsync(ctx workflow.Context, input *codebuild.DeleteProjectInput) *CodebuildDeleteProjectFuture

	DeleteReport(ctx workflow.Context, input *codebuild.DeleteReportInput) (*codebuild.DeleteReportOutput, error)
	DeleteReportAsync(ctx workflow.Context, input *codebuild.DeleteReportInput) *CodebuildDeleteReportFuture

	DeleteReportGroup(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) (*codebuild.DeleteReportGroupOutput, error)
	DeleteReportGroupAsync(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) *CodebuildDeleteReportGroupFuture

	DeleteResourcePolicy(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) (*codebuild.DeleteResourcePolicyOutput, error)
	DeleteResourcePolicyAsync(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) *CodebuildDeleteResourcePolicyFuture

	DeleteSourceCredentials(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error)
	DeleteSourceCredentialsAsync(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) *CodebuildDeleteSourceCredentialsFuture

	DeleteWebhook(ctx workflow.Context, input *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error)
	DeleteWebhookAsync(ctx workflow.Context, input *codebuild.DeleteWebhookInput) *CodebuildDeleteWebhookFuture

	DescribeCodeCoverages(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) (*codebuild.DescribeCodeCoveragesOutput, error)
	DescribeCodeCoveragesAsync(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) *CodebuildDescribeCodeCoveragesFuture

	DescribeTestCases(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) (*codebuild.DescribeTestCasesOutput, error)
	DescribeTestCasesAsync(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) *CodebuildDescribeTestCasesFuture

	GetResourcePolicy(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) (*codebuild.GetResourcePolicyOutput, error)
	GetResourcePolicyAsync(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) *CodebuildGetResourcePolicyFuture

	ImportSourceCredentials(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error)
	ImportSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) *CodebuildImportSourceCredentialsFuture

	InvalidateProjectCache(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error)
	InvalidateProjectCacheAsync(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) *CodebuildInvalidateProjectCacheFuture

	ListBuildBatches(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) (*codebuild.ListBuildBatchesOutput, error)
	ListBuildBatchesAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) *CodebuildListBuildBatchesFuture

	ListBuildBatchesForProject(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) (*codebuild.ListBuildBatchesForProjectOutput, error)
	ListBuildBatchesForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) *CodebuildListBuildBatchesForProjectFuture

	ListBuilds(ctx workflow.Context, input *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error)
	ListBuildsAsync(ctx workflow.Context, input *codebuild.ListBuildsInput) *CodebuildListBuildsFuture

	ListBuildsForProject(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error)
	ListBuildsForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) *CodebuildListBuildsForProjectFuture

	ListCuratedEnvironmentImages(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error)
	ListCuratedEnvironmentImagesAsync(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) *CodebuildListCuratedEnvironmentImagesFuture

	ListProjects(ctx workflow.Context, input *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error)
	ListProjectsAsync(ctx workflow.Context, input *codebuild.ListProjectsInput) *CodebuildListProjectsFuture

	ListReportGroups(ctx workflow.Context, input *codebuild.ListReportGroupsInput) (*codebuild.ListReportGroupsOutput, error)
	ListReportGroupsAsync(ctx workflow.Context, input *codebuild.ListReportGroupsInput) *CodebuildListReportGroupsFuture

	ListReports(ctx workflow.Context, input *codebuild.ListReportsInput) (*codebuild.ListReportsOutput, error)
	ListReportsAsync(ctx workflow.Context, input *codebuild.ListReportsInput) *CodebuildListReportsFuture

	ListReportsForReportGroup(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) (*codebuild.ListReportsForReportGroupOutput, error)
	ListReportsForReportGroupAsync(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) *CodebuildListReportsForReportGroupFuture

	ListSharedProjects(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) (*codebuild.ListSharedProjectsOutput, error)
	ListSharedProjectsAsync(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) *CodebuildListSharedProjectsFuture

	ListSharedReportGroups(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) (*codebuild.ListSharedReportGroupsOutput, error)
	ListSharedReportGroupsAsync(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) *CodebuildListSharedReportGroupsFuture

	ListSourceCredentials(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error)
	ListSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) *CodebuildListSourceCredentialsFuture

	PutResourcePolicy(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) (*codebuild.PutResourcePolicyOutput, error)
	PutResourcePolicyAsync(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) *CodebuildPutResourcePolicyFuture

	RetryBuild(ctx workflow.Context, input *codebuild.RetryBuildInput) (*codebuild.RetryBuildOutput, error)
	RetryBuildAsync(ctx workflow.Context, input *codebuild.RetryBuildInput) *CodebuildRetryBuildFuture

	RetryBuildBatch(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) (*codebuild.RetryBuildBatchOutput, error)
	RetryBuildBatchAsync(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) *CodebuildRetryBuildBatchFuture

	StartBuild(ctx workflow.Context, input *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error)
	StartBuildAsync(ctx workflow.Context, input *codebuild.StartBuildInput) *CodebuildStartBuildFuture

	StartBuildBatch(ctx workflow.Context, input *codebuild.StartBuildBatchInput) (*codebuild.StartBuildBatchOutput, error)
	StartBuildBatchAsync(ctx workflow.Context, input *codebuild.StartBuildBatchInput) *CodebuildStartBuildBatchFuture

	StopBuild(ctx workflow.Context, input *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error)
	StopBuildAsync(ctx workflow.Context, input *codebuild.StopBuildInput) *CodebuildStopBuildFuture

	StopBuildBatch(ctx workflow.Context, input *codebuild.StopBuildBatchInput) (*codebuild.StopBuildBatchOutput, error)
	StopBuildBatchAsync(ctx workflow.Context, input *codebuild.StopBuildBatchInput) *CodebuildStopBuildBatchFuture

	UpdateProject(ctx workflow.Context, input *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error)
	UpdateProjectAsync(ctx workflow.Context, input *codebuild.UpdateProjectInput) *CodebuildUpdateProjectFuture

	UpdateReportGroup(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) (*codebuild.UpdateReportGroupOutput, error)
	UpdateReportGroupAsync(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) *CodebuildUpdateReportGroupFuture

	UpdateWebhook(ctx workflow.Context, input *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error)
	UpdateWebhookAsync(ctx workflow.Context, input *codebuild.UpdateWebhookInput) *CodebuildUpdateWebhookFuture
}

type CodeBuildStub struct{}

func NewCodeBuildStub() CodeBuildClient {
	return &CodeBuildStub{}
}

type CodebuildBatchDeleteBuildsFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchDeleteBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildBatchGetBuildBatchesFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchGetBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildBatchGetBuildsFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchGetBuildsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildBatchGetProjectsFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchGetProjectsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildBatchGetReportGroupsFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchGetReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildBatchGetReportsFuture struct {
	Future workflow.Future
}

func (r *CodebuildBatchGetReportsFuture) Get(ctx workflow.Context) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildCreateProjectFuture struct {
	Future workflow.Future
}

func (r *CodebuildCreateProjectFuture) Get(ctx workflow.Context) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildCreateReportGroupFuture struct {
	Future workflow.Future
}

func (r *CodebuildCreateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildCreateWebhookFuture struct {
	Future workflow.Future
}

func (r *CodebuildCreateWebhookFuture) Get(ctx workflow.Context) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteBuildBatchFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteProjectFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteProjectFuture) Get(ctx workflow.Context) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteReportFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteReportFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteReportGroupFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteReportGroupFuture) Get(ctx workflow.Context) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteSourceCredentialsFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDeleteWebhookFuture struct {
	Future workflow.Future
}

func (r *CodebuildDeleteWebhookFuture) Get(ctx workflow.Context) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDescribeCodeCoveragesFuture struct {
	Future workflow.Future
}

func (r *CodebuildDescribeCodeCoveragesFuture) Get(ctx workflow.Context) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildDescribeTestCasesFuture struct {
	Future workflow.Future
}

func (r *CodebuildDescribeTestCasesFuture) Get(ctx workflow.Context) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildGetResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *CodebuildGetResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildImportSourceCredentialsFuture struct {
	Future workflow.Future
}

func (r *CodebuildImportSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildInvalidateProjectCacheFuture struct {
	Future workflow.Future
}

func (r *CodebuildInvalidateProjectCacheFuture) Get(ctx workflow.Context) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListBuildBatchesFuture struct {
	Future workflow.Future
}

func (r *CodebuildListBuildBatchesFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListBuildBatchesForProjectFuture struct {
	Future workflow.Future
}

func (r *CodebuildListBuildBatchesForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListBuildsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListBuildsFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListBuildsForProjectFuture struct {
	Future workflow.Future
}

func (r *CodebuildListBuildsForProjectFuture) Get(ctx workflow.Context) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListCuratedEnvironmentImagesFuture struct {
	Future workflow.Future
}

func (r *CodebuildListCuratedEnvironmentImagesFuture) Get(ctx workflow.Context) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListProjectsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListReportGroupsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListReportsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListReportsFuture) Get(ctx workflow.Context) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListReportsForReportGroupFuture struct {
	Future workflow.Future
}

func (r *CodebuildListReportsForReportGroupFuture) Get(ctx workflow.Context) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListSharedProjectsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListSharedProjectsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListSharedReportGroupsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListSharedReportGroupsFuture) Get(ctx workflow.Context) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildListSourceCredentialsFuture struct {
	Future workflow.Future
}

func (r *CodebuildListSourceCredentialsFuture) Get(ctx workflow.Context) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildPutResourcePolicyFuture struct {
	Future workflow.Future
}

func (r *CodebuildPutResourcePolicyFuture) Get(ctx workflow.Context) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildRetryBuildFuture struct {
	Future workflow.Future
}

func (r *CodebuildRetryBuildFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildRetryBuildBatchFuture struct {
	Future workflow.Future
}

func (r *CodebuildRetryBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildStartBuildFuture struct {
	Future workflow.Future
}

func (r *CodebuildStartBuildFuture) Get(ctx workflow.Context) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildStartBuildBatchFuture struct {
	Future workflow.Future
}

func (r *CodebuildStartBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildStopBuildFuture struct {
	Future workflow.Future
}

func (r *CodebuildStopBuildFuture) Get(ctx workflow.Context) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildStopBuildBatchFuture struct {
	Future workflow.Future
}

func (r *CodebuildStopBuildBatchFuture) Get(ctx workflow.Context) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildUpdateProjectFuture struct {
	Future workflow.Future
}

func (r *CodebuildUpdateProjectFuture) Get(ctx workflow.Context) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildUpdateReportGroupFuture struct {
	Future workflow.Future
}

func (r *CodebuildUpdateReportGroupFuture) Get(ctx workflow.Context) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CodebuildUpdateWebhookFuture struct {
	Future workflow.Future
}

func (r *CodebuildUpdateWebhookFuture) Get(ctx workflow.Context) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchDeleteBuilds(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	var output codebuild.BatchDeleteBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchDeleteBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchDeleteBuildsAsync(ctx workflow.Context, input *codebuild.BatchDeleteBuildsInput) *CodebuildBatchDeleteBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchDeleteBuilds", input)
	return &CodebuildBatchDeleteBuildsFuture{Future: future}
}

func (a *CodeBuildStub) BatchGetBuildBatches(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) (*codebuild.BatchGetBuildBatchesOutput, error) {
	var output codebuild.BatchGetBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchGetBuildBatchesAsync(ctx workflow.Context, input *codebuild.BatchGetBuildBatchesInput) *CodebuildBatchGetBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetBuildBatches", input)
	return &CodebuildBatchGetBuildBatchesFuture{Future: future}
}

func (a *CodeBuildStub) BatchGetBuilds(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	var output codebuild.BatchGetBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchGetBuildsAsync(ctx workflow.Context, input *codebuild.BatchGetBuildsInput) *CodebuildBatchGetBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetBuilds", input)
	return &CodebuildBatchGetBuildsFuture{Future: future}
}

func (a *CodeBuildStub) BatchGetProjects(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	var output codebuild.BatchGetProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchGetProjectsAsync(ctx workflow.Context, input *codebuild.BatchGetProjectsInput) *CodebuildBatchGetProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetProjects", input)
	return &CodebuildBatchGetProjectsFuture{Future: future}
}

func (a *CodeBuildStub) BatchGetReportGroups(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) (*codebuild.BatchGetReportGroupsOutput, error) {
	var output codebuild.BatchGetReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchGetReportGroupsAsync(ctx workflow.Context, input *codebuild.BatchGetReportGroupsInput) *CodebuildBatchGetReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetReportGroups", input)
	return &CodebuildBatchGetReportGroupsFuture{Future: future}
}

func (a *CodeBuildStub) BatchGetReports(ctx workflow.Context, input *codebuild.BatchGetReportsInput) (*codebuild.BatchGetReportsOutput, error) {
	var output codebuild.BatchGetReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetReports", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) BatchGetReportsAsync(ctx workflow.Context, input *codebuild.BatchGetReportsInput) *CodebuildBatchGetReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.BatchGetReports", input)
	return &CodebuildBatchGetReportsFuture{Future: future}
}

func (a *CodeBuildStub) CreateProject(ctx workflow.Context, input *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	var output codebuild.CreateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) CreateProjectAsync(ctx workflow.Context, input *codebuild.CreateProjectInput) *CodebuildCreateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateProject", input)
	return &CodebuildCreateProjectFuture{Future: future}
}

func (a *CodeBuildStub) CreateReportGroup(ctx workflow.Context, input *codebuild.CreateReportGroupInput) (*codebuild.CreateReportGroupOutput, error) {
	var output codebuild.CreateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) CreateReportGroupAsync(ctx workflow.Context, input *codebuild.CreateReportGroupInput) *CodebuildCreateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateReportGroup", input)
	return &CodebuildCreateReportGroupFuture{Future: future}
}

func (a *CodeBuildStub) CreateWebhook(ctx workflow.Context, input *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	var output codebuild.CreateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) CreateWebhookAsync(ctx workflow.Context, input *codebuild.CreateWebhookInput) *CodebuildCreateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.CreateWebhook", input)
	return &CodebuildCreateWebhookFuture{Future: future}
}

func (a *CodeBuildStub) DeleteBuildBatch(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) (*codebuild.DeleteBuildBatchOutput, error) {
	var output codebuild.DeleteBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteBuildBatchAsync(ctx workflow.Context, input *codebuild.DeleteBuildBatchInput) *CodebuildDeleteBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteBuildBatch", input)
	return &CodebuildDeleteBuildBatchFuture{Future: future}
}

func (a *CodeBuildStub) DeleteProject(ctx workflow.Context, input *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	var output codebuild.DeleteProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteProject", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteProjectAsync(ctx workflow.Context, input *codebuild.DeleteProjectInput) *CodebuildDeleteProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteProject", input)
	return &CodebuildDeleteProjectFuture{Future: future}
}

func (a *CodeBuildStub) DeleteReport(ctx workflow.Context, input *codebuild.DeleteReportInput) (*codebuild.DeleteReportOutput, error) {
	var output codebuild.DeleteReportOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteReport", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteReportAsync(ctx workflow.Context, input *codebuild.DeleteReportInput) *CodebuildDeleteReportFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteReport", input)
	return &CodebuildDeleteReportFuture{Future: future}
}

func (a *CodeBuildStub) DeleteReportGroup(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) (*codebuild.DeleteReportGroupOutput, error) {
	var output codebuild.DeleteReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteReportGroupAsync(ctx workflow.Context, input *codebuild.DeleteReportGroupInput) *CodebuildDeleteReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteReportGroup", input)
	return &CodebuildDeleteReportGroupFuture{Future: future}
}

func (a *CodeBuildStub) DeleteResourcePolicy(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) (*codebuild.DeleteResourcePolicyOutput, error) {
	var output codebuild.DeleteResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteResourcePolicyAsync(ctx workflow.Context, input *codebuild.DeleteResourcePolicyInput) *CodebuildDeleteResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteResourcePolicy", input)
	return &CodebuildDeleteResourcePolicyFuture{Future: future}
}

func (a *CodeBuildStub) DeleteSourceCredentials(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error) {
	var output codebuild.DeleteSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteSourceCredentialsAsync(ctx workflow.Context, input *codebuild.DeleteSourceCredentialsInput) *CodebuildDeleteSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteSourceCredentials", input)
	return &CodebuildDeleteSourceCredentialsFuture{Future: future}
}

func (a *CodeBuildStub) DeleteWebhook(ctx workflow.Context, input *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	var output codebuild.DeleteWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DeleteWebhookAsync(ctx workflow.Context, input *codebuild.DeleteWebhookInput) *CodebuildDeleteWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DeleteWebhook", input)
	return &CodebuildDeleteWebhookFuture{Future: future}
}

func (a *CodeBuildStub) DescribeCodeCoverages(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) (*codebuild.DescribeCodeCoveragesOutput, error) {
	var output codebuild.DescribeCodeCoveragesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DescribeCodeCoverages", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DescribeCodeCoveragesAsync(ctx workflow.Context, input *codebuild.DescribeCodeCoveragesInput) *CodebuildDescribeCodeCoveragesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DescribeCodeCoverages", input)
	return &CodebuildDescribeCodeCoveragesFuture{Future: future}
}

func (a *CodeBuildStub) DescribeTestCases(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) (*codebuild.DescribeTestCasesOutput, error) {
	var output codebuild.DescribeTestCasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.DescribeTestCases", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) DescribeTestCasesAsync(ctx workflow.Context, input *codebuild.DescribeTestCasesInput) *CodebuildDescribeTestCasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.DescribeTestCases", input)
	return &CodebuildDescribeTestCasesFuture{Future: future}
}

func (a *CodeBuildStub) GetResourcePolicy(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) (*codebuild.GetResourcePolicyOutput, error) {
	var output codebuild.GetResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.GetResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) GetResourcePolicyAsync(ctx workflow.Context, input *codebuild.GetResourcePolicyInput) *CodebuildGetResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.GetResourcePolicy", input)
	return &CodebuildGetResourcePolicyFuture{Future: future}
}

func (a *CodeBuildStub) ImportSourceCredentials(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error) {
	var output codebuild.ImportSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ImportSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ImportSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ImportSourceCredentialsInput) *CodebuildImportSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ImportSourceCredentials", input)
	return &CodebuildImportSourceCredentialsFuture{Future: future}
}

func (a *CodeBuildStub) InvalidateProjectCache(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	var output codebuild.InvalidateProjectCacheOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.InvalidateProjectCache", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) InvalidateProjectCacheAsync(ctx workflow.Context, input *codebuild.InvalidateProjectCacheInput) *CodebuildInvalidateProjectCacheFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.InvalidateProjectCache", input)
	return &CodebuildInvalidateProjectCacheFuture{Future: future}
}

func (a *CodeBuildStub) ListBuildBatches(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) (*codebuild.ListBuildBatchesOutput, error) {
	var output codebuild.ListBuildBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListBuildBatchesAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesInput) *CodebuildListBuildBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildBatches", input)
	return &CodebuildListBuildBatchesFuture{Future: future}
}

func (a *CodeBuildStub) ListBuildBatchesForProject(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	var output codebuild.ListBuildBatchesForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildBatchesForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListBuildBatchesForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildBatchesForProjectInput) *CodebuildListBuildBatchesForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildBatchesForProject", input)
	return &CodebuildListBuildBatchesForProjectFuture{Future: future}
}

func (a *CodeBuildStub) ListBuilds(ctx workflow.Context, input *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	var output codebuild.ListBuildsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuilds", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListBuildsAsync(ctx workflow.Context, input *codebuild.ListBuildsInput) *CodebuildListBuildsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuilds", input)
	return &CodebuildListBuildsFuture{Future: future}
}

func (a *CodeBuildStub) ListBuildsForProject(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	var output codebuild.ListBuildsForProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildsForProject", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListBuildsForProjectAsync(ctx workflow.Context, input *codebuild.ListBuildsForProjectInput) *CodebuildListBuildsForProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListBuildsForProject", input)
	return &CodebuildListBuildsForProjectFuture{Future: future}
}

func (a *CodeBuildStub) ListCuratedEnvironmentImages(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	var output codebuild.ListCuratedEnvironmentImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListCuratedEnvironmentImages", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListCuratedEnvironmentImagesAsync(ctx workflow.Context, input *codebuild.ListCuratedEnvironmentImagesInput) *CodebuildListCuratedEnvironmentImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListCuratedEnvironmentImages", input)
	return &CodebuildListCuratedEnvironmentImagesFuture{Future: future}
}

func (a *CodeBuildStub) ListProjects(ctx workflow.Context, input *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	var output codebuild.ListProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListProjectsAsync(ctx workflow.Context, input *codebuild.ListProjectsInput) *CodebuildListProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListProjects", input)
	return &CodebuildListProjectsFuture{Future: future}
}

func (a *CodeBuildStub) ListReportGroups(ctx workflow.Context, input *codebuild.ListReportGroupsInput) (*codebuild.ListReportGroupsOutput, error) {
	var output codebuild.ListReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListReportGroupsAsync(ctx workflow.Context, input *codebuild.ListReportGroupsInput) *CodebuildListReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReportGroups", input)
	return &CodebuildListReportGroupsFuture{Future: future}
}

func (a *CodeBuildStub) ListReports(ctx workflow.Context, input *codebuild.ListReportsInput) (*codebuild.ListReportsOutput, error) {
	var output codebuild.ListReportsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReports", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListReportsAsync(ctx workflow.Context, input *codebuild.ListReportsInput) *CodebuildListReportsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReports", input)
	return &CodebuildListReportsFuture{Future: future}
}

func (a *CodeBuildStub) ListReportsForReportGroup(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) (*codebuild.ListReportsForReportGroupOutput, error) {
	var output codebuild.ListReportsForReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReportsForReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListReportsForReportGroupAsync(ctx workflow.Context, input *codebuild.ListReportsForReportGroupInput) *CodebuildListReportsForReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListReportsForReportGroup", input)
	return &CodebuildListReportsForReportGroupFuture{Future: future}
}

func (a *CodeBuildStub) ListSharedProjects(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) (*codebuild.ListSharedProjectsOutput, error) {
	var output codebuild.ListSharedProjectsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSharedProjects", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListSharedProjectsAsync(ctx workflow.Context, input *codebuild.ListSharedProjectsInput) *CodebuildListSharedProjectsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSharedProjects", input)
	return &CodebuildListSharedProjectsFuture{Future: future}
}

func (a *CodeBuildStub) ListSharedReportGroups(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) (*codebuild.ListSharedReportGroupsOutput, error) {
	var output codebuild.ListSharedReportGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSharedReportGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListSharedReportGroupsAsync(ctx workflow.Context, input *codebuild.ListSharedReportGroupsInput) *CodebuildListSharedReportGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSharedReportGroups", input)
	return &CodebuildListSharedReportGroupsFuture{Future: future}
}

func (a *CodeBuildStub) ListSourceCredentials(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error) {
	var output codebuild.ListSourceCredentialsOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSourceCredentials", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) ListSourceCredentialsAsync(ctx workflow.Context, input *codebuild.ListSourceCredentialsInput) *CodebuildListSourceCredentialsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.ListSourceCredentials", input)
	return &CodebuildListSourceCredentialsFuture{Future: future}
}

func (a *CodeBuildStub) PutResourcePolicy(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) (*codebuild.PutResourcePolicyOutput, error) {
	var output codebuild.PutResourcePolicyOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.PutResourcePolicy", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) PutResourcePolicyAsync(ctx workflow.Context, input *codebuild.PutResourcePolicyInput) *CodebuildPutResourcePolicyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.PutResourcePolicy", input)
	return &CodebuildPutResourcePolicyFuture{Future: future}
}

func (a *CodeBuildStub) RetryBuild(ctx workflow.Context, input *codebuild.RetryBuildInput) (*codebuild.RetryBuildOutput, error) {
	var output codebuild.RetryBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.RetryBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) RetryBuildAsync(ctx workflow.Context, input *codebuild.RetryBuildInput) *CodebuildRetryBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.RetryBuild", input)
	return &CodebuildRetryBuildFuture{Future: future}
}

func (a *CodeBuildStub) RetryBuildBatch(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) (*codebuild.RetryBuildBatchOutput, error) {
	var output codebuild.RetryBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.RetryBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) RetryBuildBatchAsync(ctx workflow.Context, input *codebuild.RetryBuildBatchInput) *CodebuildRetryBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.RetryBuildBatch", input)
	return &CodebuildRetryBuildBatchFuture{Future: future}
}

func (a *CodeBuildStub) StartBuild(ctx workflow.Context, input *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	var output codebuild.StartBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.StartBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) StartBuildAsync(ctx workflow.Context, input *codebuild.StartBuildInput) *CodebuildStartBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.StartBuild", input)
	return &CodebuildStartBuildFuture{Future: future}
}

func (a *CodeBuildStub) StartBuildBatch(ctx workflow.Context, input *codebuild.StartBuildBatchInput) (*codebuild.StartBuildBatchOutput, error) {
	var output codebuild.StartBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.StartBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) StartBuildBatchAsync(ctx workflow.Context, input *codebuild.StartBuildBatchInput) *CodebuildStartBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.StartBuildBatch", input)
	return &CodebuildStartBuildBatchFuture{Future: future}
}

func (a *CodeBuildStub) StopBuild(ctx workflow.Context, input *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	var output codebuild.StopBuildOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.StopBuild", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) StopBuildAsync(ctx workflow.Context, input *codebuild.StopBuildInput) *CodebuildStopBuildFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.StopBuild", input)
	return &CodebuildStopBuildFuture{Future: future}
}

func (a *CodeBuildStub) StopBuildBatch(ctx workflow.Context, input *codebuild.StopBuildBatchInput) (*codebuild.StopBuildBatchOutput, error) {
	var output codebuild.StopBuildBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.StopBuildBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) StopBuildBatchAsync(ctx workflow.Context, input *codebuild.StopBuildBatchInput) *CodebuildStopBuildBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.StopBuildBatch", input)
	return &CodebuildStopBuildBatchFuture{Future: future}
}

func (a *CodeBuildStub) UpdateProject(ctx workflow.Context, input *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	var output codebuild.UpdateProjectOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateProject", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) UpdateProjectAsync(ctx workflow.Context, input *codebuild.UpdateProjectInput) *CodebuildUpdateProjectFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateProject", input)
	return &CodebuildUpdateProjectFuture{Future: future}
}

func (a *CodeBuildStub) UpdateReportGroup(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) (*codebuild.UpdateReportGroupOutput, error) {
	var output codebuild.UpdateReportGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateReportGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) UpdateReportGroupAsync(ctx workflow.Context, input *codebuild.UpdateReportGroupInput) *CodebuildUpdateReportGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateReportGroup", input)
	return &CodebuildUpdateReportGroupFuture{Future: future}
}

func (a *CodeBuildStub) UpdateWebhook(ctx workflow.Context, input *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error) {
	var output codebuild.UpdateWebhookOutput
	err := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateWebhook", input).Get(ctx, &output)
	return &output, err
}

func (a *CodeBuildStub) UpdateWebhookAsync(ctx workflow.Context, input *codebuild.UpdateWebhookInput) *CodebuildUpdateWebhookFuture {
	future := workflow.ExecuteActivity(ctx, "aws.codebuild.UpdateWebhook", input)
	return &CodebuildUpdateWebhookFuture{Future: future}
}
