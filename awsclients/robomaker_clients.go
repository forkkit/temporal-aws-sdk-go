// Generated by https://github.com/temporalio/temporal-aws-sdk/cmd/temporal-aws-sdk-gen/main.go
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/robomaker"
	"go.temporal.io/sdk/workflow"
)

type RoboMakerClient interface {
	BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error)
	BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *RobomakerBatchDeleteWorldsResult

	BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error)
	BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *RobomakerBatchDescribeSimulationJobResult

	CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error)
	CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *RobomakerCancelDeploymentJobResult

	CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error)
	CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *RobomakerCancelSimulationJobResult

	CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error)
	CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *RobomakerCancelSimulationJobBatchResult

	CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error)
	CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *RobomakerCancelWorldExportJobResult

	CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error)
	CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *RobomakerCancelWorldGenerationJobResult

	CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error)
	CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *RobomakerCreateDeploymentJobResult

	CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *RobomakerCreateFleetResult

	CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error)
	CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *RobomakerCreateRobotResult

	CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error)
	CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *RobomakerCreateRobotApplicationResult

	CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error)
	CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *RobomakerCreateRobotApplicationVersionResult

	CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error)
	CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *RobomakerCreateSimulationApplicationResult

	CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error)
	CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *RobomakerCreateSimulationApplicationVersionResult

	CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error)
	CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *RobomakerCreateSimulationJobResult

	CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error)
	CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *RobomakerCreateWorldExportJobResult

	CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error)
	CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *RobomakerCreateWorldGenerationJobResult

	CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error)
	CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *RobomakerCreateWorldTemplateResult

	DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *RobomakerDeleteFleetResult

	DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error)
	DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *RobomakerDeleteRobotResult

	DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error)
	DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *RobomakerDeleteRobotApplicationResult

	DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error)
	DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *RobomakerDeleteSimulationApplicationResult

	DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error)
	DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *RobomakerDeleteWorldTemplateResult

	DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error)
	DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *RobomakerDeregisterRobotResult

	DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error)
	DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *RobomakerDescribeDeploymentJobResult

	DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error)
	DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *RobomakerDescribeFleetResult

	DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error)
	DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *RobomakerDescribeRobotResult

	DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error)
	DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *RobomakerDescribeRobotApplicationResult

	DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error)
	DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *RobomakerDescribeSimulationApplicationResult

	DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error)
	DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *RobomakerDescribeSimulationJobResult

	DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error)
	DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *RobomakerDescribeSimulationJobBatchResult

	DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error)
	DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *RobomakerDescribeWorldResult

	DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error)
	DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *RobomakerDescribeWorldExportJobResult

	DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error)
	DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *RobomakerDescribeWorldGenerationJobResult

	DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error)
	DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *RobomakerDescribeWorldTemplateResult

	GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error)
	GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *RobomakerGetWorldTemplateBodyResult

	ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error)
	ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *RobomakerListDeploymentJobsResult

	ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error)
	ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *RobomakerListFleetsResult

	ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error)
	ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *RobomakerListRobotApplicationsResult

	ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error)
	ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *RobomakerListRobotsResult

	ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error)
	ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *RobomakerListSimulationApplicationsResult

	ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error)
	ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *RobomakerListSimulationJobBatchesResult

	ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error)
	ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *RobomakerListSimulationJobsResult

	ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *RobomakerListTagsForResourceResult

	ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error)
	ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *RobomakerListWorldExportJobsResult

	ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error)
	ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *RobomakerListWorldGenerationJobsResult

	ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error)
	ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *RobomakerListWorldTemplatesResult

	ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error)
	ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *RobomakerListWorldsResult

	RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error)
	RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RobomakerRegisterRobotResult

	RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error)
	RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RobomakerRestartSimulationJobResult

	StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error)
	StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *RobomakerStartSimulationJobBatchResult

	SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error)
	SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *RobomakerSyncDeploymentJobResult

	TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *RobomakerTagResourceResult

	UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *RobomakerUntagResourceResult

	UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error)
	UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *RobomakerUpdateRobotApplicationResult

	UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error)
	UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *RobomakerUpdateSimulationApplicationResult

	UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error)
	UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *RobomakerUpdateWorldTemplateResult
}

type RoboMakerStub struct{}

func NewRoboMakerStub() RoboMakerClient {
	return &RoboMakerStub{}
}

type RobomakerBatchDeleteWorldsResult struct {
	Result workflow.Future
}

func (r *RobomakerBatchDeleteWorldsResult) Get(ctx workflow.Context) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerBatchDescribeSimulationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerBatchDescribeSimulationJobResult) Get(ctx workflow.Context) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelDeploymentJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCancelDeploymentJobResult) Get(ctx workflow.Context) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelSimulationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCancelSimulationJobResult) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelSimulationJobBatchResult struct {
	Result workflow.Future
}

func (r *RobomakerCancelSimulationJobBatchResult) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelWorldExportJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCancelWorldExportJobResult) Get(ctx workflow.Context) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelWorldGenerationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCancelWorldGenerationJobResult) Get(ctx workflow.Context) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateDeploymentJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateDeploymentJobResult) Get(ctx workflow.Context) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateFleetResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateFleetResult) Get(ctx workflow.Context) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateRobotResult) Get(ctx workflow.Context) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateRobotApplicationResult) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotApplicationVersionResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateRobotApplicationVersionResult) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateSimulationApplicationResult) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationApplicationVersionResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateSimulationApplicationVersionResult) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateSimulationJobResult) Get(ctx workflow.Context) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldExportJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateWorldExportJobResult) Get(ctx workflow.Context) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldGenerationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateWorldGenerationJobResult) Get(ctx workflow.Context) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldTemplateResult struct {
	Result workflow.Future
}

func (r *RobomakerCreateWorldTemplateResult) Get(ctx workflow.Context) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteFleetResult struct {
	Result workflow.Future
}

func (r *RobomakerDeleteFleetResult) Get(ctx workflow.Context) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteRobotResult struct {
	Result workflow.Future
}

func (r *RobomakerDeleteRobotResult) Get(ctx workflow.Context) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteRobotApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerDeleteRobotApplicationResult) Get(ctx workflow.Context) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteSimulationApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerDeleteSimulationApplicationResult) Get(ctx workflow.Context) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteWorldTemplateResult struct {
	Result workflow.Future
}

func (r *RobomakerDeleteWorldTemplateResult) Get(ctx workflow.Context) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDeregisterRobotResult struct {
	Result workflow.Future
}

func (r *RobomakerDeregisterRobotResult) Get(ctx workflow.Context) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeDeploymentJobResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeDeploymentJobResult) Get(ctx workflow.Context) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeFleetResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeFleetResult) Get(ctx workflow.Context) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeRobotResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeRobotResult) Get(ctx workflow.Context) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeRobotApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeRobotApplicationResult) Get(ctx workflow.Context) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeSimulationApplicationResult) Get(ctx workflow.Context) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeSimulationJobResult) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationJobBatchResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeSimulationJobBatchResult) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeWorldResult) Get(ctx workflow.Context) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldExportJobResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeWorldExportJobResult) Get(ctx workflow.Context) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldGenerationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeWorldGenerationJobResult) Get(ctx workflow.Context) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldTemplateResult struct {
	Result workflow.Future
}

func (r *RobomakerDescribeWorldTemplateResult) Get(ctx workflow.Context) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerGetWorldTemplateBodyResult struct {
	Result workflow.Future
}

func (r *RobomakerGetWorldTemplateBodyResult) Get(ctx workflow.Context) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListDeploymentJobsResult struct {
	Result workflow.Future
}

func (r *RobomakerListDeploymentJobsResult) Get(ctx workflow.Context) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListFleetsResult struct {
	Result workflow.Future
}

func (r *RobomakerListFleetsResult) Get(ctx workflow.Context) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListRobotApplicationsResult struct {
	Result workflow.Future
}

func (r *RobomakerListRobotApplicationsResult) Get(ctx workflow.Context) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListRobotsResult struct {
	Result workflow.Future
}

func (r *RobomakerListRobotsResult) Get(ctx workflow.Context) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationApplicationsResult struct {
	Result workflow.Future
}

func (r *RobomakerListSimulationApplicationsResult) Get(ctx workflow.Context) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationJobBatchesResult struct {
	Result workflow.Future
}

func (r *RobomakerListSimulationJobBatchesResult) Get(ctx workflow.Context) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationJobsResult struct {
	Result workflow.Future
}

func (r *RobomakerListSimulationJobsResult) Get(ctx workflow.Context) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListTagsForResourceResult struct {
	Result workflow.Future
}

func (r *RobomakerListTagsForResourceResult) Get(ctx workflow.Context) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldExportJobsResult struct {
	Result workflow.Future
}

func (r *RobomakerListWorldExportJobsResult) Get(ctx workflow.Context) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldGenerationJobsResult struct {
	Result workflow.Future
}

func (r *RobomakerListWorldGenerationJobsResult) Get(ctx workflow.Context) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldTemplatesResult struct {
	Result workflow.Future
}

func (r *RobomakerListWorldTemplatesResult) Get(ctx workflow.Context) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldsResult struct {
	Result workflow.Future
}

func (r *RobomakerListWorldsResult) Get(ctx workflow.Context) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerRegisterRobotResult struct {
	Result workflow.Future
}

func (r *RobomakerRegisterRobotResult) Get(ctx workflow.Context) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerRestartSimulationJobResult struct {
	Result workflow.Future
}

func (r *RobomakerRestartSimulationJobResult) Get(ctx workflow.Context) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerStartSimulationJobBatchResult struct {
	Result workflow.Future
}

func (r *RobomakerStartSimulationJobBatchResult) Get(ctx workflow.Context) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerSyncDeploymentJobResult struct {
	Result workflow.Future
}

func (r *RobomakerSyncDeploymentJobResult) Get(ctx workflow.Context) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerTagResourceResult struct {
	Result workflow.Future
}

func (r *RobomakerTagResourceResult) Get(ctx workflow.Context) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerUntagResourceResult struct {
	Result workflow.Future
}

func (r *RobomakerUntagResourceResult) Get(ctx workflow.Context) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateRobotApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerUpdateRobotApplicationResult) Get(ctx workflow.Context) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateSimulationApplicationResult struct {
	Result workflow.Future
}

func (r *RobomakerUpdateSimulationApplicationResult) Get(ctx workflow.Context) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateWorldTemplateResult struct {
	Result workflow.Future
}

func (r *RobomakerUpdateWorldTemplateResult) Get(ctx workflow.Context) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := r.Result.Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDeleteWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *RobomakerBatchDeleteWorldsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDeleteWorlds", input)
	return &RobomakerBatchDeleteWorldsResult{Result: future}
}

func (a *RoboMakerStub) BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *RobomakerBatchDescribeSimulationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDescribeSimulationJob", input)
	return &RobomakerBatchDescribeSimulationJobResult{Result: future}
}

func (a *RoboMakerStub) CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *RobomakerCancelDeploymentJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelDeploymentJob", input)
	return &RobomakerCancelDeploymentJobResult{Result: future}
}

func (a *RoboMakerStub) CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *RobomakerCancelSimulationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJob", input)
	return &RobomakerCancelSimulationJobResult{Result: future}
}

func (a *RoboMakerStub) CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *RobomakerCancelSimulationJobBatchResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJobBatch", input)
	return &RobomakerCancelSimulationJobBatchResult{Result: future}
}

func (a *RoboMakerStub) CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *RobomakerCancelWorldExportJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldExportJob", input)
	return &RobomakerCancelWorldExportJobResult{Result: future}
}

func (a *RoboMakerStub) CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *RobomakerCancelWorldGenerationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldGenerationJob", input)
	return &RobomakerCancelWorldGenerationJobResult{Result: future}
}

func (a *RoboMakerStub) CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *RobomakerCreateDeploymentJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateDeploymentJob", input)
	return &RobomakerCreateDeploymentJobResult{Result: future}
}

func (a *RoboMakerStub) CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *RobomakerCreateFleetResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateFleet", input)
	return &RobomakerCreateFleetResult{Result: future}
}

func (a *RoboMakerStub) CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *RobomakerCreateRobotResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobot", input)
	return &RobomakerCreateRobotResult{Result: future}
}

func (a *RoboMakerStub) CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *RobomakerCreateRobotApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplication", input)
	return &RobomakerCreateRobotApplicationResult{Result: future}
}

func (a *RoboMakerStub) CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *RobomakerCreateRobotApplicationVersionResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplicationVersion", input)
	return &RobomakerCreateRobotApplicationVersionResult{Result: future}
}

func (a *RoboMakerStub) CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *RobomakerCreateSimulationApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplication", input)
	return &RobomakerCreateSimulationApplicationResult{Result: future}
}

func (a *RoboMakerStub) CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *RobomakerCreateSimulationApplicationVersionResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplicationVersion", input)
	return &RobomakerCreateSimulationApplicationVersionResult{Result: future}
}

func (a *RoboMakerStub) CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *RobomakerCreateSimulationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationJob", input)
	return &RobomakerCreateSimulationJobResult{Result: future}
}

func (a *RoboMakerStub) CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *RobomakerCreateWorldExportJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldExportJob", input)
	return &RobomakerCreateWorldExportJobResult{Result: future}
}

func (a *RoboMakerStub) CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *RobomakerCreateWorldGenerationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldGenerationJob", input)
	return &RobomakerCreateWorldGenerationJobResult{Result: future}
}

func (a *RoboMakerStub) CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *RobomakerCreateWorldTemplateResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldTemplate", input)
	return &RobomakerCreateWorldTemplateResult{Result: future}
}

func (a *RoboMakerStub) DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *RobomakerDeleteFleetResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteFleet", input)
	return &RobomakerDeleteFleetResult{Result: future}
}

func (a *RoboMakerStub) DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *RobomakerDeleteRobotResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobot", input)
	return &RobomakerDeleteRobotResult{Result: future}
}

func (a *RoboMakerStub) DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *RobomakerDeleteRobotApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobotApplication", input)
	return &RobomakerDeleteRobotApplicationResult{Result: future}
}

func (a *RoboMakerStub) DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *RobomakerDeleteSimulationApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteSimulationApplication", input)
	return &RobomakerDeleteSimulationApplicationResult{Result: future}
}

func (a *RoboMakerStub) DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *RobomakerDeleteWorldTemplateResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteWorldTemplate", input)
	return &RobomakerDeleteWorldTemplateResult{Result: future}
}

func (a *RoboMakerStub) DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeregisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *RobomakerDeregisterRobotResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeregisterRobot", input)
	return &RobomakerDeregisterRobotResult{Result: future}
}

func (a *RoboMakerStub) DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *RobomakerDescribeDeploymentJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeDeploymentJob", input)
	return &RobomakerDescribeDeploymentJobResult{Result: future}
}

func (a *RoboMakerStub) DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *RobomakerDescribeFleetResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeFleet", input)
	return &RobomakerDescribeFleetResult{Result: future}
}

func (a *RoboMakerStub) DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *RobomakerDescribeRobotResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobot", input)
	return &RobomakerDescribeRobotResult{Result: future}
}

func (a *RoboMakerStub) DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *RobomakerDescribeRobotApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobotApplication", input)
	return &RobomakerDescribeRobotApplicationResult{Result: future}
}

func (a *RoboMakerStub) DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *RobomakerDescribeSimulationApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationApplication", input)
	return &RobomakerDescribeSimulationApplicationResult{Result: future}
}

func (a *RoboMakerStub) DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *RobomakerDescribeSimulationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJob", input)
	return &RobomakerDescribeSimulationJobResult{Result: future}
}

func (a *RoboMakerStub) DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *RobomakerDescribeSimulationJobBatchResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJobBatch", input)
	return &RobomakerDescribeSimulationJobBatchResult{Result: future}
}

func (a *RoboMakerStub) DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorld", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *RobomakerDescribeWorldResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorld", input)
	return &RobomakerDescribeWorldResult{Result: future}
}

func (a *RoboMakerStub) DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *RobomakerDescribeWorldExportJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldExportJob", input)
	return &RobomakerDescribeWorldExportJobResult{Result: future}
}

func (a *RoboMakerStub) DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *RobomakerDescribeWorldGenerationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldGenerationJob", input)
	return &RobomakerDescribeWorldGenerationJobResult{Result: future}
}

func (a *RoboMakerStub) DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *RobomakerDescribeWorldTemplateResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldTemplate", input)
	return &RobomakerDescribeWorldTemplateResult{Result: future}
}

func (a *RoboMakerStub) GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.GetWorldTemplateBody", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *RobomakerGetWorldTemplateBodyResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.GetWorldTemplateBody", input)
	return &RobomakerGetWorldTemplateBodyResult{Result: future}
}

func (a *RoboMakerStub) ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListDeploymentJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *RobomakerListDeploymentJobsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListDeploymentJobs", input)
	return &RobomakerListDeploymentJobsResult{Result: future}
}

func (a *RoboMakerStub) ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *RobomakerListFleetsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListFleets", input)
	return &RobomakerListFleetsResult{Result: future}
}

func (a *RoboMakerStub) ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobotApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *RobomakerListRobotApplicationsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobotApplications", input)
	return &RobomakerListRobotApplicationsResult{Result: future}
}

func (a *RoboMakerStub) ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobots", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *RobomakerListRobotsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobots", input)
	return &RobomakerListRobotsResult{Result: future}
}

func (a *RoboMakerStub) ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *RobomakerListSimulationApplicationsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationApplications", input)
	return &RobomakerListSimulationApplicationsResult{Result: future}
}

func (a *RoboMakerStub) ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *RobomakerListSimulationJobBatchesResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobBatches", input)
	return &RobomakerListSimulationJobBatchesResult{Result: future}
}

func (a *RoboMakerStub) ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *RobomakerListSimulationJobsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobs", input)
	return &RobomakerListSimulationJobsResult{Result: future}
}

func (a *RoboMakerStub) ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *RobomakerListTagsForResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListTagsForResource", input)
	return &RobomakerListTagsForResourceResult{Result: future}
}

func (a *RoboMakerStub) ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *RobomakerListWorldExportJobsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldExportJobs", input)
	return &RobomakerListWorldExportJobsResult{Result: future}
}

func (a *RoboMakerStub) ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldGenerationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *RobomakerListWorldGenerationJobsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldGenerationJobs", input)
	return &RobomakerListWorldGenerationJobsResult{Result: future}
}

func (a *RoboMakerStub) ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *RobomakerListWorldTemplatesResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldTemplates", input)
	return &RobomakerListWorldTemplatesResult{Result: future}
}

func (a *RoboMakerStub) ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *RobomakerListWorldsResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorlds", input)
	return &RobomakerListWorldsResult{Result: future}
}

func (a *RoboMakerStub) RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.RegisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RobomakerRegisterRobotResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.RegisterRobot", input)
	return &RobomakerRegisterRobotResult{Result: future}
}

func (a *RoboMakerStub) RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.RestartSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RobomakerRestartSimulationJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.RestartSimulationJob", input)
	return &RobomakerRestartSimulationJobResult{Result: future}
}

func (a *RoboMakerStub) StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.StartSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *RobomakerStartSimulationJobBatchResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.StartSimulationJobBatch", input)
	return &RobomakerStartSimulationJobBatchResult{Result: future}
}

func (a *RoboMakerStub) SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.SyncDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *RobomakerSyncDeploymentJobResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.SyncDeploymentJob", input)
	return &RobomakerSyncDeploymentJobResult{Result: future}
}

func (a *RoboMakerStub) TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *RobomakerTagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.TagResource", input)
	return &RobomakerTagResourceResult{Result: future}
}

func (a *RoboMakerStub) UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *RobomakerUntagResourceResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UntagResource", input)
	return &RobomakerUntagResourceResult{Result: future}
}

func (a *RoboMakerStub) UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *RobomakerUpdateRobotApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateRobotApplication", input)
	return &RobomakerUpdateRobotApplicationResult{Result: future}
}

func (a *RoboMakerStub) UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *RobomakerUpdateSimulationApplicationResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateSimulationApplication", input)
	return &RobomakerUpdateSimulationApplicationResult{Result: future}
}

func (a *RoboMakerStub) UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *RobomakerUpdateWorldTemplateResult {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateWorldTemplate", input)
	return &RobomakerUpdateWorldTemplateResult{Result: future}
}
