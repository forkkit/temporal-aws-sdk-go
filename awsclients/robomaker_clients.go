// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/robomaker"
	"go.temporal.io/sdk/workflow"
)

type RoboMakerClient interface {
	BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error)
	BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *RobomakerBatchDeleteWorldsFuture

	BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error)
	BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *RobomakerBatchDescribeSimulationJobFuture

	CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error)
	CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *RobomakerCancelDeploymentJobFuture

	CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error)
	CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *RobomakerCancelSimulationJobFuture

	CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error)
	CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *RobomakerCancelSimulationJobBatchFuture

	CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error)
	CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *RobomakerCancelWorldExportJobFuture

	CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error)
	CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *RobomakerCancelWorldGenerationJobFuture

	CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error)
	CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *RobomakerCreateDeploymentJobFuture

	CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error)
	CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *RobomakerCreateFleetFuture

	CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error)
	CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *RobomakerCreateRobotFuture

	CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error)
	CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *RobomakerCreateRobotApplicationFuture

	CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error)
	CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *RobomakerCreateRobotApplicationVersionFuture

	CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error)
	CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *RobomakerCreateSimulationApplicationFuture

	CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error)
	CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *RobomakerCreateSimulationApplicationVersionFuture

	CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error)
	CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *RobomakerCreateSimulationJobFuture

	CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error)
	CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *RobomakerCreateWorldExportJobFuture

	CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error)
	CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *RobomakerCreateWorldGenerationJobFuture

	CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error)
	CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *RobomakerCreateWorldTemplateFuture

	DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error)
	DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *RobomakerDeleteFleetFuture

	DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error)
	DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *RobomakerDeleteRobotFuture

	DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error)
	DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *RobomakerDeleteRobotApplicationFuture

	DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error)
	DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *RobomakerDeleteSimulationApplicationFuture

	DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error)
	DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *RobomakerDeleteWorldTemplateFuture

	DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error)
	DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *RobomakerDeregisterRobotFuture

	DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error)
	DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *RobomakerDescribeDeploymentJobFuture

	DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error)
	DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *RobomakerDescribeFleetFuture

	DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error)
	DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *RobomakerDescribeRobotFuture

	DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error)
	DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *RobomakerDescribeRobotApplicationFuture

	DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error)
	DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *RobomakerDescribeSimulationApplicationFuture

	DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error)
	DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *RobomakerDescribeSimulationJobFuture

	DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error)
	DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *RobomakerDescribeSimulationJobBatchFuture

	DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error)
	DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *RobomakerDescribeWorldFuture

	DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error)
	DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *RobomakerDescribeWorldExportJobFuture

	DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error)
	DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *RobomakerDescribeWorldGenerationJobFuture

	DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error)
	DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *RobomakerDescribeWorldTemplateFuture

	GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error)
	GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *RobomakerGetWorldTemplateBodyFuture

	ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error)
	ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *RobomakerListDeploymentJobsFuture

	ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error)
	ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *RobomakerListFleetsFuture

	ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error)
	ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *RobomakerListRobotApplicationsFuture

	ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error)
	ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *RobomakerListRobotsFuture

	ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error)
	ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *RobomakerListSimulationApplicationsFuture

	ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error)
	ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *RobomakerListSimulationJobBatchesFuture

	ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error)
	ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *RobomakerListSimulationJobsFuture

	ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *RobomakerListTagsForResourceFuture

	ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error)
	ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *RobomakerListWorldExportJobsFuture

	ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error)
	ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *RobomakerListWorldGenerationJobsFuture

	ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error)
	ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *RobomakerListWorldTemplatesFuture

	ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error)
	ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *RobomakerListWorldsFuture

	RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error)
	RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RobomakerRegisterRobotFuture

	RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error)
	RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RobomakerRestartSimulationJobFuture

	StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error)
	StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *RobomakerStartSimulationJobBatchFuture

	SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error)
	SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *RobomakerSyncDeploymentJobFuture

	TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *RobomakerTagResourceFuture

	UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *RobomakerUntagResourceFuture

	UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error)
	UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *RobomakerUpdateRobotApplicationFuture

	UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error)
	UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *RobomakerUpdateSimulationApplicationFuture

	UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error)
	UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *RobomakerUpdateWorldTemplateFuture
}

type RoboMakerStub struct{}

func NewRoboMakerStub() RoboMakerClient {
	return &RoboMakerStub{}
}

type RobomakerBatchDeleteWorldsFuture struct {
	Future workflow.Future
}

func (r *RobomakerBatchDeleteWorldsFuture) Get(ctx workflow.Context) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerBatchDescribeSimulationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerBatchDescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelDeploymentJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCancelDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelSimulationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCancelSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelSimulationJobBatchFuture struct {
	Future workflow.Future
}

func (r *RobomakerCancelSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelWorldExportJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCancelWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCancelWorldGenerationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCancelWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateDeploymentJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateFleetFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateFleetFuture) Get(ctx workflow.Context) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateRobotFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateRobotApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateRobotApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationApplicationVersionFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateSimulationApplicationVersionFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateSimulationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldExportJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldGenerationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerCreateWorldTemplateFuture struct {
	Future workflow.Future
}

func (r *RobomakerCreateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteFleetFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeleteFleetFuture) Get(ctx workflow.Context) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteRobotFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeleteRobotFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteRobotApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeleteRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteSimulationApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeleteSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeleteWorldTemplateFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeleteWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDeregisterRobotFuture struct {
	Future workflow.Future
}

func (r *RobomakerDeregisterRobotFuture) Get(ctx workflow.Context) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeDeploymentJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeFleetFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeFleetFuture) Get(ctx workflow.Context) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeRobotFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeRobotFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeRobotApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeSimulationJobBatchFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeWorldFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldExportJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeWorldExportJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldGenerationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeWorldGenerationJobFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerDescribeWorldTemplateFuture struct {
	Future workflow.Future
}

func (r *RobomakerDescribeWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerGetWorldTemplateBodyFuture struct {
	Future workflow.Future
}

func (r *RobomakerGetWorldTemplateBodyFuture) Get(ctx workflow.Context) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListDeploymentJobsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListDeploymentJobsFuture) Get(ctx workflow.Context) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListFleetsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListFleetsFuture) Get(ctx workflow.Context) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListRobotApplicationsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListRobotApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListRobotsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListRobotsFuture) Get(ctx workflow.Context) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationApplicationsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListSimulationApplicationsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationJobBatchesFuture struct {
	Future workflow.Future
}

func (r *RobomakerListSimulationJobBatchesFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListSimulationJobsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListSimulationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *RobomakerListTagsForResourceFuture) Get(ctx workflow.Context) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldExportJobsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListWorldExportJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldGenerationJobsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListWorldGenerationJobsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldTemplatesFuture struct {
	Future workflow.Future
}

func (r *RobomakerListWorldTemplatesFuture) Get(ctx workflow.Context) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerListWorldsFuture struct {
	Future workflow.Future
}

func (r *RobomakerListWorldsFuture) Get(ctx workflow.Context) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerRegisterRobotFuture struct {
	Future workflow.Future
}

func (r *RobomakerRegisterRobotFuture) Get(ctx workflow.Context) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerRestartSimulationJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerRestartSimulationJobFuture) Get(ctx workflow.Context) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerStartSimulationJobBatchFuture struct {
	Future workflow.Future
}

func (r *RobomakerStartSimulationJobBatchFuture) Get(ctx workflow.Context) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerSyncDeploymentJobFuture struct {
	Future workflow.Future
}

func (r *RobomakerSyncDeploymentJobFuture) Get(ctx workflow.Context) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerTagResourceFuture struct {
	Future workflow.Future
}

func (r *RobomakerTagResourceFuture) Get(ctx workflow.Context) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerUntagResourceFuture struct {
	Future workflow.Future
}

func (r *RobomakerUntagResourceFuture) Get(ctx workflow.Context) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateRobotApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerUpdateRobotApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateSimulationApplicationFuture struct {
	Future workflow.Future
}

func (r *RobomakerUpdateSimulationApplicationFuture) Get(ctx workflow.Context) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RobomakerUpdateWorldTemplateFuture struct {
	Future workflow.Future
}

func (r *RobomakerUpdateWorldTemplateFuture) Get(ctx workflow.Context) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDeleteWorlds(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error) {
	var output robomaker.BatchDeleteWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDeleteWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDeleteWorldsAsync(ctx workflow.Context, input *robomaker.BatchDeleteWorldsInput) *RobomakerBatchDeleteWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDeleteWorlds", input)
	return &RobomakerBatchDeleteWorldsFuture{Future: future}
}

func (a *RoboMakerStub) BatchDescribeSimulationJob(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	var output robomaker.BatchDescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) BatchDescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.BatchDescribeSimulationJobInput) *RobomakerBatchDescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.BatchDescribeSimulationJob", input)
	return &RobomakerBatchDescribeSimulationJobFuture{Future: future}
}

func (a *RoboMakerStub) CancelDeploymentJob(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error) {
	var output robomaker.CancelDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelDeploymentJobAsync(ctx workflow.Context, input *robomaker.CancelDeploymentJobInput) *RobomakerCancelDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelDeploymentJob", input)
	return &RobomakerCancelDeploymentJobFuture{Future: future}
}

func (a *RoboMakerStub) CancelSimulationJob(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	var output robomaker.CancelSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelSimulationJobAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobInput) *RobomakerCancelSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJob", input)
	return &RobomakerCancelSimulationJobFuture{Future: future}
}

func (a *RoboMakerStub) CancelSimulationJobBatch(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error) {
	var output robomaker.CancelSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.CancelSimulationJobBatchInput) *RobomakerCancelSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelSimulationJobBatch", input)
	return &RobomakerCancelSimulationJobBatchFuture{Future: future}
}

func (a *RoboMakerStub) CancelWorldExportJob(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error) {
	var output robomaker.CancelWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelWorldExportJobAsync(ctx workflow.Context, input *robomaker.CancelWorldExportJobInput) *RobomakerCancelWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldExportJob", input)
	return &RobomakerCancelWorldExportJobFuture{Future: future}
}

func (a *RoboMakerStub) CancelWorldGenerationJob(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error) {
	var output robomaker.CancelWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CancelWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CancelWorldGenerationJobInput) *RobomakerCancelWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CancelWorldGenerationJob", input)
	return &RobomakerCancelWorldGenerationJobFuture{Future: future}
}

func (a *RoboMakerStub) CreateDeploymentJob(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	var output robomaker.CreateDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateDeploymentJobAsync(ctx workflow.Context, input *robomaker.CreateDeploymentJobInput) *RobomakerCreateDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateDeploymentJob", input)
	return &RobomakerCreateDeploymentJobFuture{Future: future}
}

func (a *RoboMakerStub) CreateFleet(ctx workflow.Context, input *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	var output robomaker.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateFleetAsync(ctx workflow.Context, input *robomaker.CreateFleetInput) *RobomakerCreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateFleet", input)
	return &RobomakerCreateFleetFuture{Future: future}
}

func (a *RoboMakerStub) CreateRobot(ctx workflow.Context, input *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	var output robomaker.CreateRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotAsync(ctx workflow.Context, input *robomaker.CreateRobotInput) *RobomakerCreateRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobot", input)
	return &RobomakerCreateRobotFuture{Future: future}
}

func (a *RoboMakerStub) CreateRobotApplication(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	var output robomaker.CreateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotApplicationAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationInput) *RobomakerCreateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplication", input)
	return &RobomakerCreateRobotApplicationFuture{Future: future}
}

func (a *RoboMakerStub) CreateRobotApplicationVersion(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	var output robomaker.CreateRobotApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateRobotApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateRobotApplicationVersionInput) *RobomakerCreateRobotApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateRobotApplicationVersion", input)
	return &RobomakerCreateRobotApplicationVersionFuture{Future: future}
}

func (a *RoboMakerStub) CreateSimulationApplication(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	var output robomaker.CreateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationInput) *RobomakerCreateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplication", input)
	return &RobomakerCreateSimulationApplicationFuture{Future: future}
}

func (a *RoboMakerStub) CreateSimulationApplicationVersion(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	var output robomaker.CreateSimulationApplicationVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplicationVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationApplicationVersionAsync(ctx workflow.Context, input *robomaker.CreateSimulationApplicationVersionInput) *RobomakerCreateSimulationApplicationVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationApplicationVersion", input)
	return &RobomakerCreateSimulationApplicationVersionFuture{Future: future}
}

func (a *RoboMakerStub) CreateSimulationJob(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	var output robomaker.CreateSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateSimulationJobAsync(ctx workflow.Context, input *robomaker.CreateSimulationJobInput) *RobomakerCreateSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateSimulationJob", input)
	return &RobomakerCreateSimulationJobFuture{Future: future}
}

func (a *RoboMakerStub) CreateWorldExportJob(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error) {
	var output robomaker.CreateWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldExportJobAsync(ctx workflow.Context, input *robomaker.CreateWorldExportJobInput) *RobomakerCreateWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldExportJob", input)
	return &RobomakerCreateWorldExportJobFuture{Future: future}
}

func (a *RoboMakerStub) CreateWorldGenerationJob(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error) {
	var output robomaker.CreateWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.CreateWorldGenerationJobInput) *RobomakerCreateWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldGenerationJob", input)
	return &RobomakerCreateWorldGenerationJobFuture{Future: future}
}

func (a *RoboMakerStub) CreateWorldTemplate(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error) {
	var output robomaker.CreateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) CreateWorldTemplateAsync(ctx workflow.Context, input *robomaker.CreateWorldTemplateInput) *RobomakerCreateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.CreateWorldTemplate", input)
	return &RobomakerCreateWorldTemplateFuture{Future: future}
}

func (a *RoboMakerStub) DeleteFleet(ctx workflow.Context, input *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	var output robomaker.DeleteFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteFleetAsync(ctx workflow.Context, input *robomaker.DeleteFleetInput) *RobomakerDeleteFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteFleet", input)
	return &RobomakerDeleteFleetFuture{Future: future}
}

func (a *RoboMakerStub) DeleteRobot(ctx workflow.Context, input *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	var output robomaker.DeleteRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteRobotAsync(ctx workflow.Context, input *robomaker.DeleteRobotInput) *RobomakerDeleteRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobot", input)
	return &RobomakerDeleteRobotFuture{Future: future}
}

func (a *RoboMakerStub) DeleteRobotApplication(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	var output robomaker.DeleteRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteRobotApplicationAsync(ctx workflow.Context, input *robomaker.DeleteRobotApplicationInput) *RobomakerDeleteRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteRobotApplication", input)
	return &RobomakerDeleteRobotApplicationFuture{Future: future}
}

func (a *RoboMakerStub) DeleteSimulationApplication(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	var output robomaker.DeleteSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DeleteSimulationApplicationInput) *RobomakerDeleteSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteSimulationApplication", input)
	return &RobomakerDeleteSimulationApplicationFuture{Future: future}
}

func (a *RoboMakerStub) DeleteWorldTemplate(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error) {
	var output robomaker.DeleteWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeleteWorldTemplateAsync(ctx workflow.Context, input *robomaker.DeleteWorldTemplateInput) *RobomakerDeleteWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeleteWorldTemplate", input)
	return &RobomakerDeleteWorldTemplateFuture{Future: future}
}

func (a *RoboMakerStub) DeregisterRobot(ctx workflow.Context, input *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	var output robomaker.DeregisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DeregisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DeregisterRobotAsync(ctx workflow.Context, input *robomaker.DeregisterRobotInput) *RobomakerDeregisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DeregisterRobot", input)
	return &RobomakerDeregisterRobotFuture{Future: future}
}

func (a *RoboMakerStub) DescribeDeploymentJob(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	var output robomaker.DescribeDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeDeploymentJobAsync(ctx workflow.Context, input *robomaker.DescribeDeploymentJobInput) *RobomakerDescribeDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeDeploymentJob", input)
	return &RobomakerDescribeDeploymentJobFuture{Future: future}
}

func (a *RoboMakerStub) DescribeFleet(ctx workflow.Context, input *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	var output robomaker.DescribeFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeFleetAsync(ctx workflow.Context, input *robomaker.DescribeFleetInput) *RobomakerDescribeFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeFleet", input)
	return &RobomakerDescribeFleetFuture{Future: future}
}

func (a *RoboMakerStub) DescribeRobot(ctx workflow.Context, input *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	var output robomaker.DescribeRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeRobotAsync(ctx workflow.Context, input *robomaker.DescribeRobotInput) *RobomakerDescribeRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobot", input)
	return &RobomakerDescribeRobotFuture{Future: future}
}

func (a *RoboMakerStub) DescribeRobotApplication(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	var output robomaker.DescribeRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeRobotApplicationAsync(ctx workflow.Context, input *robomaker.DescribeRobotApplicationInput) *RobomakerDescribeRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeRobotApplication", input)
	return &RobomakerDescribeRobotApplicationFuture{Future: future}
}

func (a *RoboMakerStub) DescribeSimulationApplication(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	var output robomaker.DescribeSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationApplicationAsync(ctx workflow.Context, input *robomaker.DescribeSimulationApplicationInput) *RobomakerDescribeSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationApplication", input)
	return &RobomakerDescribeSimulationApplicationFuture{Future: future}
}

func (a *RoboMakerStub) DescribeSimulationJob(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	var output robomaker.DescribeSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationJobAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobInput) *RobomakerDescribeSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJob", input)
	return &RobomakerDescribeSimulationJobFuture{Future: future}
}

func (a *RoboMakerStub) DescribeSimulationJobBatch(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	var output robomaker.DescribeSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.DescribeSimulationJobBatchInput) *RobomakerDescribeSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeSimulationJobBatch", input)
	return &RobomakerDescribeSimulationJobBatchFuture{Future: future}
}

func (a *RoboMakerStub) DescribeWorld(ctx workflow.Context, input *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error) {
	var output robomaker.DescribeWorldOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorld", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldAsync(ctx workflow.Context, input *robomaker.DescribeWorldInput) *RobomakerDescribeWorldFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorld", input)
	return &RobomakerDescribeWorldFuture{Future: future}
}

func (a *RoboMakerStub) DescribeWorldExportJob(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error) {
	var output robomaker.DescribeWorldExportJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldExportJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldExportJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldExportJobInput) *RobomakerDescribeWorldExportJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldExportJob", input)
	return &RobomakerDescribeWorldExportJobFuture{Future: future}
}

func (a *RoboMakerStub) DescribeWorldGenerationJob(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	var output robomaker.DescribeWorldGenerationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldGenerationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldGenerationJobAsync(ctx workflow.Context, input *robomaker.DescribeWorldGenerationJobInput) *RobomakerDescribeWorldGenerationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldGenerationJob", input)
	return &RobomakerDescribeWorldGenerationJobFuture{Future: future}
}

func (a *RoboMakerStub) DescribeWorldTemplate(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error) {
	var output robomaker.DescribeWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) DescribeWorldTemplateAsync(ctx workflow.Context, input *robomaker.DescribeWorldTemplateInput) *RobomakerDescribeWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.DescribeWorldTemplate", input)
	return &RobomakerDescribeWorldTemplateFuture{Future: future}
}

func (a *RoboMakerStub) GetWorldTemplateBody(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error) {
	var output robomaker.GetWorldTemplateBodyOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.GetWorldTemplateBody", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) GetWorldTemplateBodyAsync(ctx workflow.Context, input *robomaker.GetWorldTemplateBodyInput) *RobomakerGetWorldTemplateBodyFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.GetWorldTemplateBody", input)
	return &RobomakerGetWorldTemplateBodyFuture{Future: future}
}

func (a *RoboMakerStub) ListDeploymentJobs(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	var output robomaker.ListDeploymentJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListDeploymentJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListDeploymentJobsAsync(ctx workflow.Context, input *robomaker.ListDeploymentJobsInput) *RobomakerListDeploymentJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListDeploymentJobs", input)
	return &RobomakerListDeploymentJobsFuture{Future: future}
}

func (a *RoboMakerStub) ListFleets(ctx workflow.Context, input *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	var output robomaker.ListFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListFleetsAsync(ctx workflow.Context, input *robomaker.ListFleetsInput) *RobomakerListFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListFleets", input)
	return &RobomakerListFleetsFuture{Future: future}
}

func (a *RoboMakerStub) ListRobotApplications(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	var output robomaker.ListRobotApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobotApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListRobotApplicationsAsync(ctx workflow.Context, input *robomaker.ListRobotApplicationsInput) *RobomakerListRobotApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobotApplications", input)
	return &RobomakerListRobotApplicationsFuture{Future: future}
}

func (a *RoboMakerStub) ListRobots(ctx workflow.Context, input *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	var output robomaker.ListRobotsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobots", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListRobotsAsync(ctx workflow.Context, input *robomaker.ListRobotsInput) *RobomakerListRobotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListRobots", input)
	return &RobomakerListRobotsFuture{Future: future}
}

func (a *RoboMakerStub) ListSimulationApplications(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	var output robomaker.ListSimulationApplicationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationApplications", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationApplicationsAsync(ctx workflow.Context, input *robomaker.ListSimulationApplicationsInput) *RobomakerListSimulationApplicationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationApplications", input)
	return &RobomakerListSimulationApplicationsFuture{Future: future}
}

func (a *RoboMakerStub) ListSimulationJobBatches(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error) {
	var output robomaker.ListSimulationJobBatchesOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobBatches", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationJobBatchesAsync(ctx workflow.Context, input *robomaker.ListSimulationJobBatchesInput) *RobomakerListSimulationJobBatchesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobBatches", input)
	return &RobomakerListSimulationJobBatchesFuture{Future: future}
}

func (a *RoboMakerStub) ListSimulationJobs(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	var output robomaker.ListSimulationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListSimulationJobsAsync(ctx workflow.Context, input *robomaker.ListSimulationJobsInput) *RobomakerListSimulationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListSimulationJobs", input)
	return &RobomakerListSimulationJobsFuture{Future: future}
}

func (a *RoboMakerStub) ListTagsForResource(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error) {
	var output robomaker.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListTagsForResourceAsync(ctx workflow.Context, input *robomaker.ListTagsForResourceInput) *RobomakerListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListTagsForResource", input)
	return &RobomakerListTagsForResourceFuture{Future: future}
}

func (a *RoboMakerStub) ListWorldExportJobs(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error) {
	var output robomaker.ListWorldExportJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldExportJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldExportJobsAsync(ctx workflow.Context, input *robomaker.ListWorldExportJobsInput) *RobomakerListWorldExportJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldExportJobs", input)
	return &RobomakerListWorldExportJobsFuture{Future: future}
}

func (a *RoboMakerStub) ListWorldGenerationJobs(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error) {
	var output robomaker.ListWorldGenerationJobsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldGenerationJobs", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldGenerationJobsAsync(ctx workflow.Context, input *robomaker.ListWorldGenerationJobsInput) *RobomakerListWorldGenerationJobsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldGenerationJobs", input)
	return &RobomakerListWorldGenerationJobsFuture{Future: future}
}

func (a *RoboMakerStub) ListWorldTemplates(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error) {
	var output robomaker.ListWorldTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldTemplatesAsync(ctx workflow.Context, input *robomaker.ListWorldTemplatesInput) *RobomakerListWorldTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorldTemplates", input)
	return &RobomakerListWorldTemplatesFuture{Future: future}
}

func (a *RoboMakerStub) ListWorlds(ctx workflow.Context, input *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error) {
	var output robomaker.ListWorldsOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorlds", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) ListWorldsAsync(ctx workflow.Context, input *robomaker.ListWorldsInput) *RobomakerListWorldsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.ListWorlds", input)
	return &RobomakerListWorldsFuture{Future: future}
}

func (a *RoboMakerStub) RegisterRobot(ctx workflow.Context, input *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	var output robomaker.RegisterRobotOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.RegisterRobot", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) RegisterRobotAsync(ctx workflow.Context, input *robomaker.RegisterRobotInput) *RobomakerRegisterRobotFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.RegisterRobot", input)
	return &RobomakerRegisterRobotFuture{Future: future}
}

func (a *RoboMakerStub) RestartSimulationJob(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	var output robomaker.RestartSimulationJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.RestartSimulationJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) RestartSimulationJobAsync(ctx workflow.Context, input *robomaker.RestartSimulationJobInput) *RobomakerRestartSimulationJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.RestartSimulationJob", input)
	return &RobomakerRestartSimulationJobFuture{Future: future}
}

func (a *RoboMakerStub) StartSimulationJobBatch(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error) {
	var output robomaker.StartSimulationJobBatchOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.StartSimulationJobBatch", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) StartSimulationJobBatchAsync(ctx workflow.Context, input *robomaker.StartSimulationJobBatchInput) *RobomakerStartSimulationJobBatchFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.StartSimulationJobBatch", input)
	return &RobomakerStartSimulationJobBatchFuture{Future: future}
}

func (a *RoboMakerStub) SyncDeploymentJob(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	var output robomaker.SyncDeploymentJobOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.SyncDeploymentJob", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) SyncDeploymentJobAsync(ctx workflow.Context, input *robomaker.SyncDeploymentJobInput) *RobomakerSyncDeploymentJobFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.SyncDeploymentJob", input)
	return &RobomakerSyncDeploymentJobFuture{Future: future}
}

func (a *RoboMakerStub) TagResource(ctx workflow.Context, input *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error) {
	var output robomaker.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) TagResourceAsync(ctx workflow.Context, input *robomaker.TagResourceInput) *RobomakerTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.TagResource", input)
	return &RobomakerTagResourceFuture{Future: future}
}

func (a *RoboMakerStub) UntagResource(ctx workflow.Context, input *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error) {
	var output robomaker.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UntagResourceAsync(ctx workflow.Context, input *robomaker.UntagResourceInput) *RobomakerUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UntagResource", input)
	return &RobomakerUntagResourceFuture{Future: future}
}

func (a *RoboMakerStub) UpdateRobotApplication(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	var output robomaker.UpdateRobotApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateRobotApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateRobotApplicationAsync(ctx workflow.Context, input *robomaker.UpdateRobotApplicationInput) *RobomakerUpdateRobotApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateRobotApplication", input)
	return &RobomakerUpdateRobotApplicationFuture{Future: future}
}

func (a *RoboMakerStub) UpdateSimulationApplication(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	var output robomaker.UpdateSimulationApplicationOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateSimulationApplication", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateSimulationApplicationAsync(ctx workflow.Context, input *robomaker.UpdateSimulationApplicationInput) *RobomakerUpdateSimulationApplicationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateSimulationApplication", input)
	return &RobomakerUpdateSimulationApplicationFuture{Future: future}
}

func (a *RoboMakerStub) UpdateWorldTemplate(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error) {
	var output robomaker.UpdateWorldTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateWorldTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *RoboMakerStub) UpdateWorldTemplateAsync(ctx workflow.Context, input *robomaker.UpdateWorldTemplateInput) *RobomakerUpdateWorldTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws.robomaker.UpdateWorldTemplate", input)
	return &RobomakerUpdateWorldTemplateFuture{Future: future}
}
