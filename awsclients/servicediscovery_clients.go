// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/servicediscovery"
	"go.temporal.io/sdk/workflow"
)

type ServiceDiscoveryClient interface {
	CreateHttpNamespace(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error)
	CreateHttpNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) *ServicediscoveryCreateHttpNamespaceFuture

	CreatePrivateDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error)
	CreatePrivateDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) *ServicediscoveryCreatePrivateDnsNamespaceFuture

	CreatePublicDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error)
	CreatePublicDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) *ServicediscoveryCreatePublicDnsNamespaceFuture

	CreateService(ctx workflow.Context, input *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error)
	CreateServiceAsync(ctx workflow.Context, input *servicediscovery.CreateServiceInput) *ServicediscoveryCreateServiceFuture

	DeleteNamespace(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error)
	DeleteNamespaceAsync(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) *ServicediscoveryDeleteNamespaceFuture

	DeleteService(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error)
	DeleteServiceAsync(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) *ServicediscoveryDeleteServiceFuture

	DeregisterInstance(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error)
	DeregisterInstanceAsync(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) *ServicediscoveryDeregisterInstanceFuture

	DiscoverInstances(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error)
	DiscoverInstancesAsync(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) *ServicediscoveryDiscoverInstancesFuture

	GetInstance(ctx workflow.Context, input *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error)
	GetInstanceAsync(ctx workflow.Context, input *servicediscovery.GetInstanceInput) *ServicediscoveryGetInstanceFuture

	GetInstancesHealthStatus(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error)
	GetInstancesHealthStatusAsync(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) *ServicediscoveryGetInstancesHealthStatusFuture

	GetNamespace(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error)
	GetNamespaceAsync(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) *ServicediscoveryGetNamespaceFuture

	GetOperation(ctx workflow.Context, input *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error)
	GetOperationAsync(ctx workflow.Context, input *servicediscovery.GetOperationInput) *ServicediscoveryGetOperationFuture

	GetService(ctx workflow.Context, input *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error)
	GetServiceAsync(ctx workflow.Context, input *servicediscovery.GetServiceInput) *ServicediscoveryGetServiceFuture

	ListInstances(ctx workflow.Context, input *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error)
	ListInstancesAsync(ctx workflow.Context, input *servicediscovery.ListInstancesInput) *ServicediscoveryListInstancesFuture

	ListNamespaces(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error)
	ListNamespacesAsync(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) *ServicediscoveryListNamespacesFuture

	ListOperations(ctx workflow.Context, input *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error)
	ListOperationsAsync(ctx workflow.Context, input *servicediscovery.ListOperationsInput) *ServicediscoveryListOperationsFuture

	ListServices(ctx workflow.Context, input *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error)
	ListServicesAsync(ctx workflow.Context, input *servicediscovery.ListServicesInput) *ServicediscoveryListServicesFuture

	ListTagsForResource(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) *ServicediscoveryListTagsForResourceFuture

	RegisterInstance(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error)
	RegisterInstanceAsync(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) *ServicediscoveryRegisterInstanceFuture

	TagResource(ctx workflow.Context, input *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *servicediscovery.TagResourceInput) *ServicediscoveryTagResourceFuture

	UntagResource(ctx workflow.Context, input *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *servicediscovery.UntagResourceInput) *ServicediscoveryUntagResourceFuture

	UpdateInstanceCustomHealthStatus(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error)
	UpdateInstanceCustomHealthStatusAsync(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) *ServicediscoveryUpdateInstanceCustomHealthStatusFuture

	UpdateService(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error)
	UpdateServiceAsync(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) *ServicediscoveryUpdateServiceFuture
}

type ServiceDiscoveryStub struct{}

func NewServiceDiscoveryStub() ServiceDiscoveryClient {
	return &ServiceDiscoveryStub{}
}

type ServicediscoveryCreateHttpNamespaceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryCreateHttpNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryCreatePrivateDnsNamespaceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryCreatePrivateDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryCreatePublicDnsNamespaceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryCreatePublicDnsNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryCreateServiceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryCreateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryDeleteNamespaceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryDeleteNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryDeleteServiceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryDeleteServiceFuture) Get(ctx workflow.Context) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryDeregisterInstanceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryDeregisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryDiscoverInstancesFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryDiscoverInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryGetInstanceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryGetInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryGetInstancesHealthStatusFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryGetInstancesHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryGetNamespaceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryGetNamespaceFuture) Get(ctx workflow.Context) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryGetOperationFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryGetOperationFuture) Get(ctx workflow.Context) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryGetServiceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryGetServiceFuture) Get(ctx workflow.Context) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryListInstancesFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryListInstancesFuture) Get(ctx workflow.Context) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryListNamespacesFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryListNamespacesFuture) Get(ctx workflow.Context) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryListOperationsFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryListOperationsFuture) Get(ctx workflow.Context) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryListServicesFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryListServicesFuture) Get(ctx workflow.Context) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryListTagsForResourceFuture) Get(ctx workflow.Context) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryRegisterInstanceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryRegisterInstanceFuture) Get(ctx workflow.Context) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryTagResourceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryTagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryUntagResourceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryUntagResourceFuture) Get(ctx workflow.Context) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryUpdateInstanceCustomHealthStatusFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryUpdateInstanceCustomHealthStatusFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ServicediscoveryUpdateServiceFuture struct {
	Future workflow.Future
}

func (r *ServicediscoveryUpdateServiceFuture) Get(ctx workflow.Context) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) CreateHttpNamespace(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	var output servicediscovery.CreateHttpNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreateHttpNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) CreateHttpNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreateHttpNamespaceInput) *ServicediscoveryCreateHttpNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreateHttpNamespace", input)
	return &ServicediscoveryCreateHttpNamespaceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) CreatePrivateDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePrivateDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreatePrivateDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) CreatePrivateDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePrivateDnsNamespaceInput) *ServicediscoveryCreatePrivateDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreatePrivateDnsNamespace", input)
	return &ServicediscoveryCreatePrivateDnsNamespaceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) CreatePublicDnsNamespace(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	var output servicediscovery.CreatePublicDnsNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreatePublicDnsNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) CreatePublicDnsNamespaceAsync(ctx workflow.Context, input *servicediscovery.CreatePublicDnsNamespaceInput) *ServicediscoveryCreatePublicDnsNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreatePublicDnsNamespace", input)
	return &ServicediscoveryCreatePublicDnsNamespaceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) CreateService(ctx workflow.Context, input *servicediscovery.CreateServiceInput) (*servicediscovery.CreateServiceOutput, error) {
	var output servicediscovery.CreateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) CreateServiceAsync(ctx workflow.Context, input *servicediscovery.CreateServiceInput) *ServicediscoveryCreateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.CreateService", input)
	return &ServicediscoveryCreateServiceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) DeleteNamespace(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) (*servicediscovery.DeleteNamespaceOutput, error) {
	var output servicediscovery.DeleteNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeleteNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) DeleteNamespaceAsync(ctx workflow.Context, input *servicediscovery.DeleteNamespaceInput) *ServicediscoveryDeleteNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeleteNamespace", input)
	return &ServicediscoveryDeleteNamespaceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) DeleteService(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) (*servicediscovery.DeleteServiceOutput, error) {
	var output servicediscovery.DeleteServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeleteService", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) DeleteServiceAsync(ctx workflow.Context, input *servicediscovery.DeleteServiceInput) *ServicediscoveryDeleteServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeleteService", input)
	return &ServicediscoveryDeleteServiceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) DeregisterInstance(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) (*servicediscovery.DeregisterInstanceOutput, error) {
	var output servicediscovery.DeregisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeregisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) DeregisterInstanceAsync(ctx workflow.Context, input *servicediscovery.DeregisterInstanceInput) *ServicediscoveryDeregisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DeregisterInstance", input)
	return &ServicediscoveryDeregisterInstanceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) DiscoverInstances(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) (*servicediscovery.DiscoverInstancesOutput, error) {
	var output servicediscovery.DiscoverInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DiscoverInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) DiscoverInstancesAsync(ctx workflow.Context, input *servicediscovery.DiscoverInstancesInput) *ServicediscoveryDiscoverInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.DiscoverInstances", input)
	return &ServicediscoveryDiscoverInstancesFuture{Future: future}
}

func (a *ServiceDiscoveryStub) GetInstance(ctx workflow.Context, input *servicediscovery.GetInstanceInput) (*servicediscovery.GetInstanceOutput, error) {
	var output servicediscovery.GetInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) GetInstanceAsync(ctx workflow.Context, input *servicediscovery.GetInstanceInput) *ServicediscoveryGetInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetInstance", input)
	return &ServicediscoveryGetInstanceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) GetInstancesHealthStatus(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	var output servicediscovery.GetInstancesHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetInstancesHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) GetInstancesHealthStatusAsync(ctx workflow.Context, input *servicediscovery.GetInstancesHealthStatusInput) *ServicediscoveryGetInstancesHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetInstancesHealthStatus", input)
	return &ServicediscoveryGetInstancesHealthStatusFuture{Future: future}
}

func (a *ServiceDiscoveryStub) GetNamespace(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) (*servicediscovery.GetNamespaceOutput, error) {
	var output servicediscovery.GetNamespaceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetNamespace", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) GetNamespaceAsync(ctx workflow.Context, input *servicediscovery.GetNamespaceInput) *ServicediscoveryGetNamespaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetNamespace", input)
	return &ServicediscoveryGetNamespaceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) GetOperation(ctx workflow.Context, input *servicediscovery.GetOperationInput) (*servicediscovery.GetOperationOutput, error) {
	var output servicediscovery.GetOperationOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetOperation", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) GetOperationAsync(ctx workflow.Context, input *servicediscovery.GetOperationInput) *ServicediscoveryGetOperationFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetOperation", input)
	return &ServicediscoveryGetOperationFuture{Future: future}
}

func (a *ServiceDiscoveryStub) GetService(ctx workflow.Context, input *servicediscovery.GetServiceInput) (*servicediscovery.GetServiceOutput, error) {
	var output servicediscovery.GetServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetService", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) GetServiceAsync(ctx workflow.Context, input *servicediscovery.GetServiceInput) *ServicediscoveryGetServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.GetService", input)
	return &ServicediscoveryGetServiceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) ListInstances(ctx workflow.Context, input *servicediscovery.ListInstancesInput) (*servicediscovery.ListInstancesOutput, error) {
	var output servicediscovery.ListInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) ListInstancesAsync(ctx workflow.Context, input *servicediscovery.ListInstancesInput) *ServicediscoveryListInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListInstances", input)
	return &ServicediscoveryListInstancesFuture{Future: future}
}

func (a *ServiceDiscoveryStub) ListNamespaces(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) (*servicediscovery.ListNamespacesOutput, error) {
	var output servicediscovery.ListNamespacesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListNamespaces", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) ListNamespacesAsync(ctx workflow.Context, input *servicediscovery.ListNamespacesInput) *ServicediscoveryListNamespacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListNamespaces", input)
	return &ServicediscoveryListNamespacesFuture{Future: future}
}

func (a *ServiceDiscoveryStub) ListOperations(ctx workflow.Context, input *servicediscovery.ListOperationsInput) (*servicediscovery.ListOperationsOutput, error) {
	var output servicediscovery.ListOperationsOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListOperations", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) ListOperationsAsync(ctx workflow.Context, input *servicediscovery.ListOperationsInput) *ServicediscoveryListOperationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListOperations", input)
	return &ServicediscoveryListOperationsFuture{Future: future}
}

func (a *ServiceDiscoveryStub) ListServices(ctx workflow.Context, input *servicediscovery.ListServicesInput) (*servicediscovery.ListServicesOutput, error) {
	var output servicediscovery.ListServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListServices", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) ListServicesAsync(ctx workflow.Context, input *servicediscovery.ListServicesInput) *ServicediscoveryListServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListServices", input)
	return &ServicediscoveryListServicesFuture{Future: future}
}

func (a *ServiceDiscoveryStub) ListTagsForResource(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) (*servicediscovery.ListTagsForResourceOutput, error) {
	var output servicediscovery.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) ListTagsForResourceAsync(ctx workflow.Context, input *servicediscovery.ListTagsForResourceInput) *ServicediscoveryListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.ListTagsForResource", input)
	return &ServicediscoveryListTagsForResourceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) RegisterInstance(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) (*servicediscovery.RegisterInstanceOutput, error) {
	var output servicediscovery.RegisterInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.RegisterInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) RegisterInstanceAsync(ctx workflow.Context, input *servicediscovery.RegisterInstanceInput) *ServicediscoveryRegisterInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.RegisterInstance", input)
	return &ServicediscoveryRegisterInstanceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) TagResource(ctx workflow.Context, input *servicediscovery.TagResourceInput) (*servicediscovery.TagResourceOutput, error) {
	var output servicediscovery.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) TagResourceAsync(ctx workflow.Context, input *servicediscovery.TagResourceInput) *ServicediscoveryTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.TagResource", input)
	return &ServicediscoveryTagResourceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) UntagResource(ctx workflow.Context, input *servicediscovery.UntagResourceInput) (*servicediscovery.UntagResourceOutput, error) {
	var output servicediscovery.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) UntagResourceAsync(ctx workflow.Context, input *servicediscovery.UntagResourceInput) *ServicediscoveryUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UntagResource", input)
	return &ServicediscoveryUntagResourceFuture{Future: future}
}

func (a *ServiceDiscoveryStub) UpdateInstanceCustomHealthStatus(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	var output servicediscovery.UpdateInstanceCustomHealthStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UpdateInstanceCustomHealthStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) UpdateInstanceCustomHealthStatusAsync(ctx workflow.Context, input *servicediscovery.UpdateInstanceCustomHealthStatusInput) *ServicediscoveryUpdateInstanceCustomHealthStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UpdateInstanceCustomHealthStatus", input)
	return &ServicediscoveryUpdateInstanceCustomHealthStatusFuture{Future: future}
}

func (a *ServiceDiscoveryStub) UpdateService(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) (*servicediscovery.UpdateServiceOutput, error) {
	var output servicediscovery.UpdateServiceOutput
	err := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UpdateService", input).Get(ctx, &output)
	return &output, err
}

func (a *ServiceDiscoveryStub) UpdateServiceAsync(ctx workflow.Context, input *servicediscovery.UpdateServiceInput) *ServicediscoveryUpdateServiceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.servicediscovery.UpdateService", input)
	return &ServicediscoveryUpdateServiceFuture{Future: future}
}
