// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/timestreamwrite"
	"go.temporal.io/sdk/workflow"
)

type TimestreamWriteClient interface {
	CreateDatabase(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) (*timestreamwrite.CreateDatabaseOutput, error)
	CreateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) *TimestreamwriteCreateDatabaseFuture

	CreateTable(ctx workflow.Context, input *timestreamwrite.CreateTableInput) (*timestreamwrite.CreateTableOutput, error)
	CreateTableAsync(ctx workflow.Context, input *timestreamwrite.CreateTableInput) *TimestreamwriteCreateTableFuture

	DeleteDatabase(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) (*timestreamwrite.DeleteDatabaseOutput, error)
	DeleteDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) *TimestreamwriteDeleteDatabaseFuture

	DeleteTable(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) (*timestreamwrite.DeleteTableOutput, error)
	DeleteTableAsync(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) *TimestreamwriteDeleteTableFuture

	DescribeDatabase(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) (*timestreamwrite.DescribeDatabaseOutput, error)
	DescribeDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) *TimestreamwriteDescribeDatabaseFuture

	DescribeEndpoints(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) (*timestreamwrite.DescribeEndpointsOutput, error)
	DescribeEndpointsAsync(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) *TimestreamwriteDescribeEndpointsFuture

	DescribeTable(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) (*timestreamwrite.DescribeTableOutput, error)
	DescribeTableAsync(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) *TimestreamwriteDescribeTableFuture

	ListDatabases(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) (*timestreamwrite.ListDatabasesOutput, error)
	ListDatabasesAsync(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) *TimestreamwriteListDatabasesFuture

	ListTables(ctx workflow.Context, input *timestreamwrite.ListTablesInput) (*timestreamwrite.ListTablesOutput, error)
	ListTablesAsync(ctx workflow.Context, input *timestreamwrite.ListTablesInput) *TimestreamwriteListTablesFuture

	ListTagsForResource(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) (*timestreamwrite.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) *TimestreamwriteListTagsForResourceFuture

	TagResource(ctx workflow.Context, input *timestreamwrite.TagResourceInput) (*timestreamwrite.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *timestreamwrite.TagResourceInput) *TimestreamwriteTagResourceFuture

	UntagResource(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) (*timestreamwrite.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) *TimestreamwriteUntagResourceFuture

	UpdateDatabase(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) (*timestreamwrite.UpdateDatabaseOutput, error)
	UpdateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) *TimestreamwriteUpdateDatabaseFuture

	UpdateTable(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) (*timestreamwrite.UpdateTableOutput, error)
	UpdateTableAsync(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) *TimestreamwriteUpdateTableFuture

	WriteRecords(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) (*timestreamwrite.WriteRecordsOutput, error)
	WriteRecordsAsync(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) *TimestreamwriteWriteRecordsFuture
}

type TimestreamWriteStub struct{}

func NewTimestreamWriteStub() TimestreamWriteClient {
	return &TimestreamWriteStub{}
}

type TimestreamwriteCreateDatabaseFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteCreateDatabaseFuture) Get(ctx workflow.Context) (*timestreamwrite.CreateDatabaseOutput, error) {
	var output timestreamwrite.CreateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteCreateTableFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteCreateTableFuture) Get(ctx workflow.Context) (*timestreamwrite.CreateTableOutput, error) {
	var output timestreamwrite.CreateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteDeleteDatabaseFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteDeleteDatabaseFuture) Get(ctx workflow.Context) (*timestreamwrite.DeleteDatabaseOutput, error) {
	var output timestreamwrite.DeleteDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteDeleteTableFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteDeleteTableFuture) Get(ctx workflow.Context) (*timestreamwrite.DeleteTableOutput, error) {
	var output timestreamwrite.DeleteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteDescribeDatabaseFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteDescribeDatabaseFuture) Get(ctx workflow.Context) (*timestreamwrite.DescribeDatabaseOutput, error) {
	var output timestreamwrite.DescribeDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteDescribeEndpointsFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteDescribeEndpointsFuture) Get(ctx workflow.Context) (*timestreamwrite.DescribeEndpointsOutput, error) {
	var output timestreamwrite.DescribeEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteDescribeTableFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteDescribeTableFuture) Get(ctx workflow.Context) (*timestreamwrite.DescribeTableOutput, error) {
	var output timestreamwrite.DescribeTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteListDatabasesFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteListDatabasesFuture) Get(ctx workflow.Context) (*timestreamwrite.ListDatabasesOutput, error) {
	var output timestreamwrite.ListDatabasesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteListTablesFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteListTablesFuture) Get(ctx workflow.Context) (*timestreamwrite.ListTablesOutput, error) {
	var output timestreamwrite.ListTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteListTagsForResourceFuture) Get(ctx workflow.Context) (*timestreamwrite.ListTagsForResourceOutput, error) {
	var output timestreamwrite.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteTagResourceFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteTagResourceFuture) Get(ctx workflow.Context) (*timestreamwrite.TagResourceOutput, error) {
	var output timestreamwrite.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteUntagResourceFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteUntagResourceFuture) Get(ctx workflow.Context) (*timestreamwrite.UntagResourceOutput, error) {
	var output timestreamwrite.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteUpdateDatabaseFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteUpdateDatabaseFuture) Get(ctx workflow.Context) (*timestreamwrite.UpdateDatabaseOutput, error) {
	var output timestreamwrite.UpdateDatabaseOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteUpdateTableFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteUpdateTableFuture) Get(ctx workflow.Context) (*timestreamwrite.UpdateTableOutput, error) {
	var output timestreamwrite.UpdateTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TimestreamwriteWriteRecordsFuture struct {
	Future workflow.Future
}

func (r *TimestreamwriteWriteRecordsFuture) Get(ctx workflow.Context) (*timestreamwrite.WriteRecordsOutput, error) {
	var output timestreamwrite.WriteRecordsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) CreateDatabase(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) (*timestreamwrite.CreateDatabaseOutput, error) {
	var output timestreamwrite.CreateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.CreateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) CreateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.CreateDatabaseInput) *TimestreamwriteCreateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.CreateDatabase", input)
	return &TimestreamwriteCreateDatabaseFuture{Future: future}
}

func (a *TimestreamWriteStub) CreateTable(ctx workflow.Context, input *timestreamwrite.CreateTableInput) (*timestreamwrite.CreateTableOutput, error) {
	var output timestreamwrite.CreateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.CreateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) CreateTableAsync(ctx workflow.Context, input *timestreamwrite.CreateTableInput) *TimestreamwriteCreateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.CreateTable", input)
	return &TimestreamwriteCreateTableFuture{Future: future}
}

func (a *TimestreamWriteStub) DeleteDatabase(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) (*timestreamwrite.DeleteDatabaseOutput, error) {
	var output timestreamwrite.DeleteDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DeleteDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) DeleteDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DeleteDatabaseInput) *TimestreamwriteDeleteDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DeleteDatabase", input)
	return &TimestreamwriteDeleteDatabaseFuture{Future: future}
}

func (a *TimestreamWriteStub) DeleteTable(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) (*timestreamwrite.DeleteTableOutput, error) {
	var output timestreamwrite.DeleteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DeleteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) DeleteTableAsync(ctx workflow.Context, input *timestreamwrite.DeleteTableInput) *TimestreamwriteDeleteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DeleteTable", input)
	return &TimestreamwriteDeleteTableFuture{Future: future}
}

func (a *TimestreamWriteStub) DescribeDatabase(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) (*timestreamwrite.DescribeDatabaseOutput, error) {
	var output timestreamwrite.DescribeDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) DescribeDatabaseAsync(ctx workflow.Context, input *timestreamwrite.DescribeDatabaseInput) *TimestreamwriteDescribeDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeDatabase", input)
	return &TimestreamwriteDescribeDatabaseFuture{Future: future}
}

func (a *TimestreamWriteStub) DescribeEndpoints(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) (*timestreamwrite.DescribeEndpointsOutput, error) {
	var output timestreamwrite.DescribeEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) DescribeEndpointsAsync(ctx workflow.Context, input *timestreamwrite.DescribeEndpointsInput) *TimestreamwriteDescribeEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeEndpoints", input)
	return &TimestreamwriteDescribeEndpointsFuture{Future: future}
}

func (a *TimestreamWriteStub) DescribeTable(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) (*timestreamwrite.DescribeTableOutput, error) {
	var output timestreamwrite.DescribeTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeTable", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) DescribeTableAsync(ctx workflow.Context, input *timestreamwrite.DescribeTableInput) *TimestreamwriteDescribeTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.DescribeTable", input)
	return &TimestreamwriteDescribeTableFuture{Future: future}
}

func (a *TimestreamWriteStub) ListDatabases(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) (*timestreamwrite.ListDatabasesOutput, error) {
	var output timestreamwrite.ListDatabasesOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListDatabases", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) ListDatabasesAsync(ctx workflow.Context, input *timestreamwrite.ListDatabasesInput) *TimestreamwriteListDatabasesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListDatabases", input)
	return &TimestreamwriteListDatabasesFuture{Future: future}
}

func (a *TimestreamWriteStub) ListTables(ctx workflow.Context, input *timestreamwrite.ListTablesInput) (*timestreamwrite.ListTablesOutput, error) {
	var output timestreamwrite.ListTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListTables", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) ListTablesAsync(ctx workflow.Context, input *timestreamwrite.ListTablesInput) *TimestreamwriteListTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListTables", input)
	return &TimestreamwriteListTablesFuture{Future: future}
}

func (a *TimestreamWriteStub) ListTagsForResource(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) (*timestreamwrite.ListTagsForResourceOutput, error) {
	var output timestreamwrite.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) ListTagsForResourceAsync(ctx workflow.Context, input *timestreamwrite.ListTagsForResourceInput) *TimestreamwriteListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.ListTagsForResource", input)
	return &TimestreamwriteListTagsForResourceFuture{Future: future}
}

func (a *TimestreamWriteStub) TagResource(ctx workflow.Context, input *timestreamwrite.TagResourceInput) (*timestreamwrite.TagResourceOutput, error) {
	var output timestreamwrite.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) TagResourceAsync(ctx workflow.Context, input *timestreamwrite.TagResourceInput) *TimestreamwriteTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.TagResource", input)
	return &TimestreamwriteTagResourceFuture{Future: future}
}

func (a *TimestreamWriteStub) UntagResource(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) (*timestreamwrite.UntagResourceOutput, error) {
	var output timestreamwrite.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) UntagResourceAsync(ctx workflow.Context, input *timestreamwrite.UntagResourceInput) *TimestreamwriteUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UntagResource", input)
	return &TimestreamwriteUntagResourceFuture{Future: future}
}

func (a *TimestreamWriteStub) UpdateDatabase(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) (*timestreamwrite.UpdateDatabaseOutput, error) {
	var output timestreamwrite.UpdateDatabaseOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UpdateDatabase", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) UpdateDatabaseAsync(ctx workflow.Context, input *timestreamwrite.UpdateDatabaseInput) *TimestreamwriteUpdateDatabaseFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UpdateDatabase", input)
	return &TimestreamwriteUpdateDatabaseFuture{Future: future}
}

func (a *TimestreamWriteStub) UpdateTable(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) (*timestreamwrite.UpdateTableOutput, error) {
	var output timestreamwrite.UpdateTableOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UpdateTable", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) UpdateTableAsync(ctx workflow.Context, input *timestreamwrite.UpdateTableInput) *TimestreamwriteUpdateTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.UpdateTable", input)
	return &TimestreamwriteUpdateTableFuture{Future: future}
}

func (a *TimestreamWriteStub) WriteRecords(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) (*timestreamwrite.WriteRecordsOutput, error) {
	var output timestreamwrite.WriteRecordsOutput
	err := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.WriteRecords", input).Get(ctx, &output)
	return &output, err
}

func (a *TimestreamWriteStub) WriteRecordsAsync(ctx workflow.Context, input *timestreamwrite.WriteRecordsInput) *TimestreamwriteWriteRecordsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.timestreamwrite.WriteRecords", input)
	return &TimestreamwriteWriteRecordsFuture{Future: future}
}
