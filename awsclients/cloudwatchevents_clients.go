// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package awsclients

import (
	"github.com/aws/aws-sdk-go/service/cloudwatchevents"
	"go.temporal.io/sdk/workflow"
)

type CloudWatchEventsClient interface {
	ActivateEventSource(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error)
	ActivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) *CloudwatcheventsActivateEventSourceFuture

	CreateEventBus(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error)
	CreateEventBusAsync(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) *CloudwatcheventsCreateEventBusFuture

	CreatePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error)
	CreatePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) *CloudwatcheventsCreatePartnerEventSourceFuture

	DeactivateEventSource(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error)
	DeactivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) *CloudwatcheventsDeactivateEventSourceFuture

	DeleteEventBus(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error)
	DeleteEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) *CloudwatcheventsDeleteEventBusFuture

	DeletePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error)
	DeletePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) *CloudwatcheventsDeletePartnerEventSourceFuture

	DeleteRule(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error)
	DeleteRuleAsync(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) *CloudwatcheventsDeleteRuleFuture

	DescribeEventBus(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error)
	DescribeEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) *CloudwatcheventsDescribeEventBusFuture

	DescribeEventSource(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error)
	DescribeEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) *CloudwatcheventsDescribeEventSourceFuture

	DescribePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error)
	DescribePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) *CloudwatcheventsDescribePartnerEventSourceFuture

	DescribeRule(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error)
	DescribeRuleAsync(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) *CloudwatcheventsDescribeRuleFuture

	DisableRule(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error)
	DisableRuleAsync(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) *CloudwatcheventsDisableRuleFuture

	EnableRule(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error)
	EnableRuleAsync(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) *CloudwatcheventsEnableRuleFuture

	ListEventBuses(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error)
	ListEventBusesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) *CloudwatcheventsListEventBusesFuture

	ListEventSources(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error)
	ListEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) *CloudwatcheventsListEventSourcesFuture

	ListPartnerEventSourceAccounts(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error)
	ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) *CloudwatcheventsListPartnerEventSourceAccountsFuture

	ListPartnerEventSources(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error)
	ListPartnerEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) *CloudwatcheventsListPartnerEventSourcesFuture

	ListRuleNamesByTarget(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error)
	ListRuleNamesByTargetAsync(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) *CloudwatcheventsListRuleNamesByTargetFuture

	ListRules(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error)
	ListRulesAsync(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) *CloudwatcheventsListRulesFuture

	ListTagsForResource(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error)
	ListTagsForResourceAsync(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) *CloudwatcheventsListTagsForResourceFuture

	ListTargetsByRule(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error)
	ListTargetsByRuleAsync(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) *CloudwatcheventsListTargetsByRuleFuture

	PutEvents(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error)
	PutEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) *CloudwatcheventsPutEventsFuture

	PutPartnerEvents(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error)
	PutPartnerEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) *CloudwatcheventsPutPartnerEventsFuture

	PutPermission(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error)
	PutPermissionAsync(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) *CloudwatcheventsPutPermissionFuture

	PutRule(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error)
	PutRuleAsync(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) *CloudwatcheventsPutRuleFuture

	PutTargets(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error)
	PutTargetsAsync(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) *CloudwatcheventsPutTargetsFuture

	RemovePermission(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error)
	RemovePermissionAsync(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) *CloudwatcheventsRemovePermissionFuture

	RemoveTargets(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error)
	RemoveTargetsAsync(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) *CloudwatcheventsRemoveTargetsFuture

	TagResource(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error)
	TagResourceAsync(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) *CloudwatcheventsTagResourceFuture

	TestEventPattern(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error)
	TestEventPatternAsync(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) *CloudwatcheventsTestEventPatternFuture

	UntagResource(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error)
	UntagResourceAsync(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) *CloudwatcheventsUntagResourceFuture
}

type CloudWatchEventsStub struct{}

func NewCloudWatchEventsStub() CloudWatchEventsClient {
	return &CloudWatchEventsStub{}
}

type CloudwatcheventsActivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsActivateEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	var output cloudwatchevents.ActivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsCreateEventBusFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsCreateEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.CreateEventBusOutput, error) {
	var output cloudwatchevents.CreateEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsCreatePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsCreatePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	var output cloudwatchevents.CreatePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDeactivateEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDeactivateEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	var output cloudwatchevents.DeactivateEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDeleteEventBusFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDeleteEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeleteEventBusOutput, error) {
	var output cloudwatchevents.DeleteEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDeletePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDeletePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DeletePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDeleteRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDeleteRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DeleteRuleOutput, error) {
	var output cloudwatchevents.DeleteRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDescribeEventBusFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDescribeEventBusFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeEventBusOutput, error) {
	var output cloudwatchevents.DescribeEventBusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDescribeEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDescribeEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	var output cloudwatchevents.DescribeEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDescribePartnerEventSourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDescribePartnerEventSourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DescribePartnerEventSourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDescribeRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDescribeRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DescribeRuleOutput, error) {
	var output cloudwatchevents.DescribeRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsDisableRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsDisableRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.DisableRuleOutput, error) {
	var output cloudwatchevents.DisableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsEnableRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsEnableRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.EnableRuleOutput, error) {
	var output cloudwatchevents.EnableRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListEventBusesFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListEventBusesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListEventBusesOutput, error) {
	var output cloudwatchevents.ListEventBusesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListEventSourcesFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListEventSourcesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListEventSourcesOutput, error) {
	var output cloudwatchevents.ListEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListPartnerEventSourceAccountsFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListPartnerEventSourceAccountsFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourceAccountsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListPartnerEventSourcesFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListPartnerEventSourcesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListRuleNamesByTargetFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListRuleNamesByTargetFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	var output cloudwatchevents.ListRuleNamesByTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListRulesFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListRulesFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListRulesOutput, error) {
	var output cloudwatchevents.ListRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListTagsForResourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListTagsForResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	var output cloudwatchevents.ListTagsForResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsListTargetsByRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsListTargetsByRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	var output cloudwatchevents.ListTargetsByRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsPutEventsFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsPutEventsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutEventsOutput, error) {
	var output cloudwatchevents.PutEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsPutPartnerEventsFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsPutPartnerEventsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	var output cloudwatchevents.PutPartnerEventsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsPutPermissionFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsPutPermissionFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutPermissionOutput, error) {
	var output cloudwatchevents.PutPermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsPutRuleFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsPutRuleFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutRuleOutput, error) {
	var output cloudwatchevents.PutRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsPutTargetsFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsPutTargetsFuture) Get(ctx workflow.Context) (*cloudwatchevents.PutTargetsOutput, error) {
	var output cloudwatchevents.PutTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsRemovePermissionFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsRemovePermissionFuture) Get(ctx workflow.Context) (*cloudwatchevents.RemovePermissionOutput, error) {
	var output cloudwatchevents.RemovePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsRemoveTargetsFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsRemoveTargetsFuture) Get(ctx workflow.Context) (*cloudwatchevents.RemoveTargetsOutput, error) {
	var output cloudwatchevents.RemoveTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsTagResourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsTagResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.TagResourceOutput, error) {
	var output cloudwatchevents.TagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsTestEventPatternFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsTestEventPatternFuture) Get(ctx workflow.Context) (*cloudwatchevents.TestEventPatternOutput, error) {
	var output cloudwatchevents.TestEventPatternOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CloudwatcheventsUntagResourceFuture struct {
	Future workflow.Future
}

func (r *CloudwatcheventsUntagResourceFuture) Get(ctx workflow.Context) (*cloudwatchevents.UntagResourceOutput, error) {
	var output cloudwatchevents.UntagResourceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ActivateEventSource(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	var output cloudwatchevents.ActivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ActivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ActivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.ActivateEventSourceInput) *CloudwatcheventsActivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ActivateEventSource", input)
	return &CloudwatcheventsActivateEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) CreateEventBus(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error) {
	var output cloudwatchevents.CreateEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.CreateEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) CreateEventBusAsync(ctx workflow.Context, input *cloudwatchevents.CreateEventBusInput) *CloudwatcheventsCreateEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.CreateEventBus", input)
	return &CloudwatcheventsCreateEventBusFuture{Future: future}
}

func (a *CloudWatchEventsStub) CreatePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	var output cloudwatchevents.CreatePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.CreatePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) CreatePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.CreatePartnerEventSourceInput) *CloudwatcheventsCreatePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.CreatePartnerEventSource", input)
	return &CloudwatcheventsCreatePartnerEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) DeactivateEventSource(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	var output cloudwatchevents.DeactivateEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeactivateEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DeactivateEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeactivateEventSourceInput) *CloudwatcheventsDeactivateEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeactivateEventSource", input)
	return &CloudwatcheventsDeactivateEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) DeleteEventBus(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error) {
	var output cloudwatchevents.DeleteEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeleteEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DeleteEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DeleteEventBusInput) *CloudwatcheventsDeleteEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeleteEventBus", input)
	return &CloudwatcheventsDeleteEventBusFuture{Future: future}
}

func (a *CloudWatchEventsStub) DeletePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DeletePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeletePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DeletePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DeletePartnerEventSourceInput) *CloudwatcheventsDeletePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeletePartnerEventSource", input)
	return &CloudwatcheventsDeletePartnerEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) DeleteRule(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	var output cloudwatchevents.DeleteRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeleteRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DeleteRuleAsync(ctx workflow.Context, input *cloudwatchevents.DeleteRuleInput) *CloudwatcheventsDeleteRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DeleteRule", input)
	return &CloudwatcheventsDeleteRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) DescribeEventBus(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	var output cloudwatchevents.DescribeEventBusOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeEventBus", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DescribeEventBusAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventBusInput) *CloudwatcheventsDescribeEventBusFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeEventBus", input)
	return &CloudwatcheventsDescribeEventBusFuture{Future: future}
}

func (a *CloudWatchEventsStub) DescribeEventSource(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	var output cloudwatchevents.DescribeEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DescribeEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribeEventSourceInput) *CloudwatcheventsDescribeEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeEventSource", input)
	return &CloudwatcheventsDescribeEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) DescribePartnerEventSource(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	var output cloudwatchevents.DescribePartnerEventSourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribePartnerEventSource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DescribePartnerEventSourceAsync(ctx workflow.Context, input *cloudwatchevents.DescribePartnerEventSourceInput) *CloudwatcheventsDescribePartnerEventSourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribePartnerEventSource", input)
	return &CloudwatcheventsDescribePartnerEventSourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) DescribeRule(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	var output cloudwatchevents.DescribeRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DescribeRuleAsync(ctx workflow.Context, input *cloudwatchevents.DescribeRuleInput) *CloudwatcheventsDescribeRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DescribeRule", input)
	return &CloudwatcheventsDescribeRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) DisableRule(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	var output cloudwatchevents.DisableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DisableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) DisableRuleAsync(ctx workflow.Context, input *cloudwatchevents.DisableRuleInput) *CloudwatcheventsDisableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.DisableRule", input)
	return &CloudwatcheventsDisableRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) EnableRule(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	var output cloudwatchevents.EnableRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.EnableRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) EnableRuleAsync(ctx workflow.Context, input *cloudwatchevents.EnableRuleInput) *CloudwatcheventsEnableRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.EnableRule", input)
	return &CloudwatcheventsEnableRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListEventBuses(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error) {
	var output cloudwatchevents.ListEventBusesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListEventBuses", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListEventBusesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventBusesInput) *CloudwatcheventsListEventBusesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListEventBuses", input)
	return &CloudwatcheventsListEventBusesFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListEventSources(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error) {
	var output cloudwatchevents.ListEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListEventSourcesInput) *CloudwatcheventsListEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListEventSources", input)
	return &CloudwatcheventsListEventSourcesFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListPartnerEventSourceAccounts(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourceAccountsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListPartnerEventSourceAccounts", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListPartnerEventSourceAccountsAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourceAccountsInput) *CloudwatcheventsListPartnerEventSourceAccountsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListPartnerEventSourceAccounts", input)
	return &CloudwatcheventsListPartnerEventSourceAccountsFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListPartnerEventSources(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	var output cloudwatchevents.ListPartnerEventSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListPartnerEventSources", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListPartnerEventSourcesAsync(ctx workflow.Context, input *cloudwatchevents.ListPartnerEventSourcesInput) *CloudwatcheventsListPartnerEventSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListPartnerEventSources", input)
	return &CloudwatcheventsListPartnerEventSourcesFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListRuleNamesByTarget(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	var output cloudwatchevents.ListRuleNamesByTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListRuleNamesByTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListRuleNamesByTargetAsync(ctx workflow.Context, input *cloudwatchevents.ListRuleNamesByTargetInput) *CloudwatcheventsListRuleNamesByTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListRuleNamesByTarget", input)
	return &CloudwatcheventsListRuleNamesByTargetFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListRules(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	var output cloudwatchevents.ListRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListRules", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListRulesAsync(ctx workflow.Context, input *cloudwatchevents.ListRulesInput) *CloudwatcheventsListRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListRules", input)
	return &CloudwatcheventsListRulesFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListTagsForResource(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	var output cloudwatchevents.ListTagsForResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListTagsForResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListTagsForResourceAsync(ctx workflow.Context, input *cloudwatchevents.ListTagsForResourceInput) *CloudwatcheventsListTagsForResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListTagsForResource", input)
	return &CloudwatcheventsListTagsForResourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) ListTargetsByRule(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	var output cloudwatchevents.ListTargetsByRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListTargetsByRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) ListTargetsByRuleAsync(ctx workflow.Context, input *cloudwatchevents.ListTargetsByRuleInput) *CloudwatcheventsListTargetsByRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.ListTargetsByRule", input)
	return &CloudwatcheventsListTargetsByRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) PutEvents(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	var output cloudwatchevents.PutEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) PutEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutEventsInput) *CloudwatcheventsPutEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutEvents", input)
	return &CloudwatcheventsPutEventsFuture{Future: future}
}

func (a *CloudWatchEventsStub) PutPartnerEvents(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	var output cloudwatchevents.PutPartnerEventsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutPartnerEvents", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) PutPartnerEventsAsync(ctx workflow.Context, input *cloudwatchevents.PutPartnerEventsInput) *CloudwatcheventsPutPartnerEventsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutPartnerEvents", input)
	return &CloudwatcheventsPutPartnerEventsFuture{Future: future}
}

func (a *CloudWatchEventsStub) PutPermission(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	var output cloudwatchevents.PutPermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutPermission", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) PutPermissionAsync(ctx workflow.Context, input *cloudwatchevents.PutPermissionInput) *CloudwatcheventsPutPermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutPermission", input)
	return &CloudwatcheventsPutPermissionFuture{Future: future}
}

func (a *CloudWatchEventsStub) PutRule(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	var output cloudwatchevents.PutRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutRule", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) PutRuleAsync(ctx workflow.Context, input *cloudwatchevents.PutRuleInput) *CloudwatcheventsPutRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutRule", input)
	return &CloudwatcheventsPutRuleFuture{Future: future}
}

func (a *CloudWatchEventsStub) PutTargets(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	var output cloudwatchevents.PutTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) PutTargetsAsync(ctx workflow.Context, input *cloudwatchevents.PutTargetsInput) *CloudwatcheventsPutTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.PutTargets", input)
	return &CloudwatcheventsPutTargetsFuture{Future: future}
}

func (a *CloudWatchEventsStub) RemovePermission(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	var output cloudwatchevents.RemovePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.RemovePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) RemovePermissionAsync(ctx workflow.Context, input *cloudwatchevents.RemovePermissionInput) *CloudwatcheventsRemovePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.RemovePermission", input)
	return &CloudwatcheventsRemovePermissionFuture{Future: future}
}

func (a *CloudWatchEventsStub) RemoveTargets(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	var output cloudwatchevents.RemoveTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.RemoveTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) RemoveTargetsAsync(ctx workflow.Context, input *cloudwatchevents.RemoveTargetsInput) *CloudwatcheventsRemoveTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.RemoveTargets", input)
	return &CloudwatcheventsRemoveTargetsFuture{Future: future}
}

func (a *CloudWatchEventsStub) TagResource(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error) {
	var output cloudwatchevents.TagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.TagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) TagResourceAsync(ctx workflow.Context, input *cloudwatchevents.TagResourceInput) *CloudwatcheventsTagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.TagResource", input)
	return &CloudwatcheventsTagResourceFuture{Future: future}
}

func (a *CloudWatchEventsStub) TestEventPattern(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	var output cloudwatchevents.TestEventPatternOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.TestEventPattern", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) TestEventPatternAsync(ctx workflow.Context, input *cloudwatchevents.TestEventPatternInput) *CloudwatcheventsTestEventPatternFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.TestEventPattern", input)
	return &CloudwatcheventsTestEventPatternFuture{Future: future}
}

func (a *CloudWatchEventsStub) UntagResource(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error) {
	var output cloudwatchevents.UntagResourceOutput
	err := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.UntagResource", input).Get(ctx, &output)
	return &output, err
}

func (a *CloudWatchEventsStub) UntagResourceAsync(ctx workflow.Context, input *cloudwatchevents.UntagResourceInput) *CloudwatcheventsUntagResourceFuture {
	future := workflow.ExecuteActivity(ctx, "aws.cloudwatchevents.UntagResource", input)
	return &CloudwatcheventsUntagResourceFuture{Future: future}
}
